"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.step = exports.addArgument = exports.addStep = exports.endStep = exports.startStep = exports.addAttachment = exports.addDescription = exports.addEnvironment = exports.addTag = exports.addOwner = exports.addEpic = exports.addSubSuite = exports.addParentSuite = exports.addSuite = exports.addStory = exports.addTestId = exports.addIssue = exports.addSeverity = exports.addFeature = exports.addAllureId = exports.addLink = exports.addLabel = void 0;
const allure_js_commons_1 = require("allure-js-commons");
const constants_js_1 = require("../constants.js");
/**
 * Call reporter
 * @param {string} event  - event name
 * @param {object} msg - event payload
 * @private
 */
const tellReporter = (event, msg = {}) => {
    process.emit(event, msg);
};
/**
 * Assign label to test
 * @name addLabel
 * @param {string} name - label name
 * @param {string} value - label value
 */
function addLabel(name, value) {
    tellReporter(constants_js_1.events.addLabel, { name, value });
}
exports.addLabel = addLabel;
/**
 * Assign link to test
 * @name addLink
 * @param {string} url - link name
 * @param {string} [name] - link name
 * @param {string} [type] - link type
 */
function addLink(url, name, type) {
    tellReporter(constants_js_1.events.addLink, { url, name, type });
}
exports.addLink = addLink;
/**
 * Assign allure id label to test to link test to existing entity inside the test ops
 * @name addAllureId
 * @param {string} id - inner allure test ops id
 */
function addAllureId(id) {
    tellReporter(constants_js_1.events.addAllureId, { id });
}
exports.addAllureId = addAllureId;
/**
 * Assign feature to test
 * @name addFeature
 * @param {(string)} featureName - feature name or an array of names
 */
function addFeature(featureName) {
    tellReporter(constants_js_1.events.addFeature, { featureName });
}
exports.addFeature = addFeature;
/**
 * Assign severity to test
 * @name addSeverity
 * @param {string} severity - severity value
 */
function addSeverity(severity) {
    tellReporter(constants_js_1.events.addSeverity, { severity });
}
exports.addSeverity = addSeverity;
/**
 * Assign issue id to test
 * @name addIssue
 * @param {string} issue - issue id value
 */
function addIssue(issue) {
    tellReporter(constants_js_1.events.addIssue, { issue });
}
exports.addIssue = addIssue;
/**
 * Assign TMS test id to test
 * @name addTestId
 * @param {string} testId - test id value
 */
function addTestId(testId) {
    tellReporter(constants_js_1.events.addTestId, { testId });
}
exports.addTestId = addTestId;
/**
 * Assign story label to test
 * @name addStory
 * @param {string} storyName - story name for test
 */
function addStory(storyName) {
    tellReporter(constants_js_1.events.addStory, { storyName });
}
exports.addStory = addStory;
/**
 * Assign suite label to test
 * @name addSuite
 * @param {string} suiteName - story name for test
 */
function addSuite(suiteName) {
    tellReporter(constants_js_1.events.addSuite, { suiteName });
}
exports.addSuite = addSuite;
/**
 * Assign parent suite label to test
 * @name addParentSuite
 * @param {string} suiteName - suite name
 */
function addParentSuite(suiteName) {
    tellReporter(constants_js_1.events.addParentSuite, { suiteName });
}
exports.addParentSuite = addParentSuite;
/**
 * Assign sub-suite label to test
 * @name addSubSuite
 * @param {string} suiteName - sub-suite name
 */
function addSubSuite(suiteName) {
    tellReporter(constants_js_1.events.addSubSuite, { suiteName });
}
exports.addSubSuite = addSubSuite;
/**
 * Assign epic label to test
 * @name addEpic
 * @param {string} epicName - the epic name
 */
function addEpic(epicName) {
    tellReporter(constants_js_1.events.addEpic, { epicName });
}
exports.addEpic = addEpic;
/**
 * Assign owner label to test
 * @name addOwner
 * @param {string} owner - the owner name
 */
function addOwner(owner) {
    tellReporter(constants_js_1.events.addOwner, { owner });
}
exports.addOwner = addOwner;
/**
 * Assign tag label to test
 * @name addTag
 * @param {string} tag - the tag name
 */
function addTag(tag) {
    tellReporter(constants_js_1.events.addTag, { tag });
}
exports.addTag = addTag;
/**
 * Add environment value
 * @name addEnvironment
 * @param {string} name - environment name
 * @param {string} value - environment value
 */
function addEnvironment(name, value) {
    tellReporter(constants_js_1.events.addEnvironment, { name, value });
}
exports.addEnvironment = addEnvironment;
/**
 * Assign test description to test
 * @name addDescription
 * @param {string} description - description for test
 * @param {string} descriptionType - description type 'text'\'html'\'markdown'
 */
function addDescription(description, descriptionType) {
    tellReporter(constants_js_1.events.addDescription, { description, descriptionType });
}
exports.addDescription = addDescription;
/**
 * Add attachment
 * @name addAttachment
 * @param {string} name         - attachment file name
 * @param {*} content           - attachment content
 * @param {string=} mimeType    - attachment mime type
 */
function addAttachment(name, content, type) {
    if (!type) {
        type = content instanceof Buffer ? 'image/png' : typeof content === 'string' ? 'text/plain' : 'application/json';
    }
    tellReporter(constants_js_1.events.addAttachment, { name, content, type });
}
exports.addAttachment = addAttachment;
/**
 * Start allure step
 * @name startStep
 * @param {string} title - step name in report
 */
function startStep(title) {
    tellReporter(constants_js_1.events.startStep, title);
}
exports.startStep = startStep;
/**
 * End current allure step
 * @name endStep
 * @param {StepStatus} [status='passed'] - step status
 */
function endStep(status = allure_js_commons_1.Status.PASSED) {
    if (!Object.values(allure_js_commons_1.Status).includes(status)) {
        throw new Error(`Step status must be ${Object.values(allure_js_commons_1.Status).join(' or ')}. You tried to set "${status}"`);
    }
    tellReporter(constants_js_1.events.endStep, status);
}
exports.endStep = endStep;
/**
 * Create allure step
 * @name addStep
 * @param {string} title - step name in report
 * @param {object} [attachmentObject={}] - attachment for step
 * @param {string} attachmentObject.content - attachment content
 * @param {string} [attachmentObject.name='attachment'] - attachment name
 * @param {string} [attachmentObject.type='text/plain'] - attachment type
 * @param {string} [status='passed'] - step status
 */
function addStep(title, { content, name = 'attachment', type = 'text/plain' } = {}, status = allure_js_commons_1.Status.PASSED) {
    if (!Object.values(allure_js_commons_1.Status).includes(status)) {
        throw new Error(`Step status must be ${Object.values(allure_js_commons_1.Status).join(' or ')}. You tried to set "${status}"`);
    }
    const step = content ? { title, attachment: { content, name, type }, status } : { title, status };
    tellReporter(constants_js_1.events.addStep, { step });
}
exports.addStep = addStep;
/**
 * Add additional argument to test
 * @name addArgument
 * @param {string} name - argument name
 * @param {string} value - argument value
 */
function addArgument(name, value) {
    tellReporter(constants_js_1.events.addArgument, { name, value });
}
exports.addArgument = addArgument;
/**
 * Starts allure step execution with any content
 * Can be used to generate any hierarchy of steps
 * @param {string} name - the step name
 * @param {StepBodyFunction} body - the step content function
 */
async function step(name, body) {
    const runningStep = new allure_js_commons_1.AllureCommandStepExecutable(name);
    // looks complicated due to https://github.com/allure-framework/allure-js/commit/ce9a6f986d32a079b7f60c9f77a7d90f01d9a9f2#r110599261
    const result = await new Promise((resolve) => runningStep.run(body, async (result) => resolve(result)));
    tellReporter(constants_js_1.events.addAllureStep, result);
}
exports.step = step;
exports.default = {
    addFeature, addAllureId, addLabel, addSeverity, addIssue, addTestId, addStory, addEnvironment,
    addDescription, addAttachment, startStep, endStep, addStep, addArgument, step,
};
