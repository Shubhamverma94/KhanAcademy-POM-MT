"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.doInstall = exports.install = void 0;
const support_1 = require("@appium/support");
const storage_client_1 = __importDefault(require("./storage-client"));
const utils_1 = require("./utils");
const DOWNLOAD_TIMEOUT_MS = 15 * 1000;
const LATEST_VERSION = 'LATEST';
/**
 *
 * @param {string} ver
 */
async function formatCdVersion(ver) {
    return ver === LATEST_VERSION
        ? (await (0, utils_1.retrieveData)(`${utils_1.CD_CDN}/LATEST_RELEASE`, {
            'user-agent': 'appium',
            accept: '*/*',
        }, { timeout: DOWNLOAD_TIMEOUT_MS })).trim()
        : ver;
}
/**
 *
 * @param {string} platformName
 */
async function prepareChromedriverDir(platformName) {
    const chromedriverDir = (0, utils_1.getChromedriverDir)(platformName);
    if (!await support_1.fs.exists(chromedriverDir)) {
        await (0, support_1.mkdirp)(chromedriverDir);
    }
    return chromedriverDir;
}
async function install() {
    const osInfo = await (0, utils_1.getOsInfo)();
    const client = new storage_client_1.default({
        chromedriverDir: await prepareChromedriverDir(osInfo.name),
    });
    await client.syncDrivers({
        osInfo,
        versions: [await formatCdVersion(utils_1.CD_VER)],
    });
}
exports.install = install;
async function doInstall() {
    await install();
}
exports.doInstall = doInstall;
//# sourceMappingURL=install.js.map