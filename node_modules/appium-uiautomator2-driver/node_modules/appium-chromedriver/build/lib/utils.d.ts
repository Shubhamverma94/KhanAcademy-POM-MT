/**
 *
 * @param {import('./types').AdbStub} adb
 * @param {string} bundleId
 * @returns
 */
export function getChromeVersion(adb: import('./types').AdbStub, bundleId: string): Promise<string>;
export function getChromedriverDir(osName?: string): string;
/**
 *
 * @param {string} osName
 * @returns {Promise<string>}
 */
export function getChromedriverBinaryPath(osName?: string): Promise<string>;
export const getOsName: (() => string) & _.MemoizedFunction;
export const CD_BASE_DIR: string;
export const CD_CDN: string;
export const CD_VER: string;
export const CHROMEDRIVER_CHROME_MAPPING: any;
/**
 *
 * @param {import('./types').ChromedriverVersionMapping} mapping
 * @returns {string}
 */
export function getMostRecentChromedriver(mapping?: import('./types').ChromedriverVersionMapping): string;
/**
 *
 * @param {string} url
 * @param {import('axios').AxiosRequestConfig['headers']} headers
 * @param {Pick<import('axios').AxiosRequestConfig, 'timeout'|'responseType'>} opts
 * @returns
 */
export function retrieveData(url: string, headers: import('axios').AxiosRequestConfig['headers'], opts?: Pick<import('axios').AxiosRequestConfig, 'timeout' | 'responseType'>): Promise<any>;
export const getOsInfo: (() => Promise<import('./types').OSInfo>) & _.MemoizedFunction;
export namespace OS {
    const linux: string;
    const windows: string;
    const mac: string;
}
export const X64: "64";
export const X86: "32";
export const APPLE_ARM_SUFFIXES: string[];
/**
 * Generates log prefix string
 *
 * @param {any} obj log owner instance
 * @param {string?} sessionId Optional session identifier
 * @returns {string}
 */
export function generateLogPrefix(obj: any, sessionId?: string | null): string;
/**
 * Converts the given object to an integer number if possible
 *
 * @param {any} value to be converted
 * @returns {number | null}
 */
export function convertToInt(value: any): number | null;
import _ from 'lodash';
//# sourceMappingURL=utils.d.ts.map