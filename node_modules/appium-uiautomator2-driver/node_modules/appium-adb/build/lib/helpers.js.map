{"version":3,"file":"helpers.js","names":["_path","_interopRequireDefault","require","_support","_logger","_lodash","_bluebird","_semver","_os","APKS_EXTENSION","exports","APK_EXTENSION","APK_INSTALL_TIMEOUT","APKS_INSTALL_TIMEOUT","DEFAULT_ADB_EXEC_TIMEOUT","MAIN_ACTION","LAUNCHER_CATEGORY","MODULE_NAME","getModuleRoot","_","memoize","moduleRoot","path","dirname","resolve","__filename","isAtFsRoot","manifestPath","join","fs","exists","JSON","parse","readFile","name","ign","length","Error","getResourcePath","relPath","resultPath","getSdkRootFromEnv","process","env","ANDROID_HOME","ANDROID_SDK_ROOT","requireSdkRoot","customRoot","sdkRoot","docMsg","isEmpty","stats","stat","isDirectory","getAndroidPlatformAndPath","propsPaths","glob","cwd","absolute","platformsMapping","propsPath","propsContent","platformPath","platform","basename","match","exec","log","warn","parseInt","recentSdkVersion","keys","sort","reverse","result","debug","stringify","unzipFile","zipPath","dstRoot","zip","assertValidZip","extractAllTo","unsignApk","apkPath","tmpRoot","tempDir","openDir","metaInfFolderName","hasMetaInf","readEntries","entry","fileName","startsWith","tmpZipRoot","rimraf","tmpResultPath","toArchive","unlink","mv","getIMEListFromOutput","stdout","engines","line","split","push","trim","replace","getJavaHome","JAVA_HOME","getJavaForOs","javaHome","errMsg","err","message","executableName","system","isWindows","which","getOpenSslForOs","binaryName","getApksignerForOs","sysHelpers","getBinaryFromSdkRoot","getApkanalyzerForOs","isShowingLockscreen","dumpsys","some","x","includes","every","test","isCurrentFocusOnKeyguard","m","getSurfaceOrientation","isScreenOnFully","buildStartCmd","startAppOptions","apiLevel","user","waitForLaunch","pkg","activity","action","category","stopApp","flags","cmd","util","hasValue","optionalIntentArguments","parseKeyValue","str","space","indexOf","substring","re","args","apply","flag","flagPos","prevArgs","getSdkToolsVersion","androidHome","propertiesPath","propertiesContent","versionMatcher","RegExp","major","minor","build","getBuildToolsDirs","buildToolsDirs","map","dir","a","b","semver","rcompare","pair","pairs","B","mtime","valueOf","info","extractMatchingPermissions","dumpsysOutput","groupNames","grantedState","groupPatternByName","groupName","escapeRegExp","indentPattern","permissionNamePattern","grantedStatePattern","groupMatch","lines","titleIndent","search","slice","currentIndent","permissionNameMatch","item","permission","grantedStateMatch","granted","filteredResult","filter","isBoolean","pluralize","buildInstallArgs","options","allowTestPackages","useSdcard","grantPermissions","partialInstall","parseManifest","manifest","package","versionCode","versionName","application","activities","activityAliases","enabled","intentFilters","actions","categories","isMainAction","isLauncherCategory","parseAaptStrings","rawOutput","configMarker","normalizeStringMatch","s","apkStrings","isInConfig","currentResourceId","isInPluralGroup","quotedStringPattern","os","EOL","trimmedLine","parseAapt2Strings","allLines","extractContent","startIdx","idx","startCharPos","terminationCharMatch","terminationCharPos","index","trimStart","isInCurrentConfig","lineIndex","content","isString","formatConfigMarker","configsGetter","desiredMarker","defaultMarker","configs","toLowerCase","parseJsonData","output","entityName","jsonStr","e","toAvdLocaleArgs","language","country","toUpperCase","locale","getAndroidPrefsRoot","location","ANDROID_EMULATOR_HOME","dirExists","home","HOME","USERPROFILE","escapeShellArg","arg","parseLaunchableActivityNames","mainActivityNameRe","categoryNameRe","blocks","blockStartIndent","block","trimEnd","isNil","hasCategory","activityNameStr","Boolean","fqActivityName","matchComponentName","classString"],"sources":["../../lib/helpers.js"],"sourcesContent":["import path from 'path';\nimport { system, fs, zip, util, tempDir } from '@appium/support';\nimport log from './logger.js';\nimport _ from 'lodash';\nimport B from 'bluebird';\nimport semver from 'semver';\nimport os from 'os';\n\nconst APKS_EXTENSION = '.apks';\nconst APK_EXTENSION = '.apk';\nconst APK_INSTALL_TIMEOUT = 60000;\nconst APKS_INSTALL_TIMEOUT = APK_INSTALL_TIMEOUT * 2;\nconst DEFAULT_ADB_EXEC_TIMEOUT = 20000; // in milliseconds\nconst MAIN_ACTION = 'android.intent.action.MAIN';\nconst LAUNCHER_CATEGORY = 'android.intent.category.LAUNCHER';\nconst MODULE_NAME = 'appium-adb';\n\n/**\n * Calculates the absolute path to the current module's root folder\n *\n * @returns {Promise<string>} The full path to module root\n * @throws {Error} If the current module root folder cannot be determined\n */\nconst getModuleRoot = _.memoize(async function getModuleRoot () {\n  let moduleRoot = path.dirname(path.resolve(__filename));\n  let isAtFsRoot = false;\n  while (!isAtFsRoot) {\n    const manifestPath = path.join(moduleRoot, 'package.json');\n    try {\n      if (await fs.exists(manifestPath) &&\n          JSON.parse(await fs.readFile(manifestPath, 'utf8')).name === MODULE_NAME) {\n        return moduleRoot;\n      }\n    } catch (ign) {}\n    moduleRoot = path.dirname(moduleRoot);\n    isAtFsRoot = moduleRoot.length <= path.dirname(moduleRoot).length;\n  }\n  if (isAtFsRoot) {\n    throw new Error(`Cannot find the root folder of the ${MODULE_NAME} Node.js module`);\n  }\n  return moduleRoot;\n});\n\n/**\n * Calculates the absolsute path to the given resource\n *\n * @param {string} relPath Relative path to the resource starting from the current module root\n * @returns {Promise<string>} The full path to the resource\n * @throws {Error} If the absolute resource path cannot be determined\n */\nconst getResourcePath = _.memoize(async function getResourcePath (relPath) {\n  const moduleRoot = await getModuleRoot();\n  const resultPath = path.resolve(moduleRoot, relPath);\n  if (!await fs.exists(resultPath)) {\n    throw new Error(`Cannot find the resource '${relPath}' under the '${moduleRoot}' ` +\n      `folder of ${MODULE_NAME} Node.js module`);\n  }\n  return resultPath;\n});\n\n/**\n * Retrieves the actual path to SDK root folder from the system environment\n *\n * @return {?string} The full path to the SDK root folder\n */\nfunction getSdkRootFromEnv () {\n  return process.env.ANDROID_HOME || process.env.ANDROID_SDK_ROOT;\n}\n\n/**\n * Retrieves the actual path to SDK root folder\n *\n * @return {string} The full path to the SDK root folder\n * @throws {Error} If either the corresponding env variable is unset or is\n * pointing to an invalid file system entry\n */\nasync function requireSdkRoot (customRoot = null) {\n  const sdkRoot = customRoot || getSdkRootFromEnv();\n  const docMsg = 'Read https://developer.android.com/studio/command-line/variables for more details';\n  if (_.isEmpty(sdkRoot)) {\n    throw new Error(`Neither ANDROID_HOME nor ANDROID_SDK_ROOT environment variable was exported. ${docMsg}`);\n  }\n\n  if (!await fs.exists(sdkRoot)) {\n    throw new Error(`The Android SDK root folder '${sdkRoot}' does not exist on the local file system. ${docMsg}`);\n  }\n  const stats = await fs.stat(sdkRoot);\n  if (!stats.isDirectory()) {\n    throw new Error(`The Android SDK root '${sdkRoot}' must be a folder. ${docMsg}`);\n  }\n  return sdkRoot;\n}\n\n/**\n * @typedef {Object} PlatformInfo\n * @property {?string} platform - The platform name, for example `android-24`\n *                                or `null` if it cannot be found\n * @property {?string} platformPath - Full path to the platform SDK folder\n *                                    or `null` if it cannot be found\n */\n\n/**\n * Retrieve the path to the recent installed Android platform.\n *\n * @return {PlatformInfo} The resulting path to the newest installed platform.\n */\nasync function getAndroidPlatformAndPath (sdkRoot) {\n  const propsPaths = await fs.glob('*/build.prop', {\n    cwd: path.resolve(sdkRoot, 'platforms'),\n    absolute: true,\n  });\n  const platformsMapping = {};\n  for (const propsPath of propsPaths) {\n    const propsContent = await fs.readFile(propsPath, 'utf-8');\n    const platformPath = path.dirname(propsPath);\n    const platform = path.basename(platformPath);\n    const match = /ro\\.build\\.version\\.sdk=(\\d+)/.exec(propsContent);\n    if (!match) {\n      log.warn(`Cannot read the SDK version from '${propsPath}'. Skipping '${platform}'`);\n      continue;\n    }\n    platformsMapping[parseInt(match[1], 10)] = {\n      platform,\n      platformPath,\n    };\n  }\n  if (_.isEmpty(platformsMapping)) {\n    log.warn(`Found zero platform folders at '${path.resolve(sdkRoot, 'platforms')}'. ` +\n      `Do you have any Android SDKs installed?`);\n    return {\n      platform: null,\n      platformPath: null,\n    };\n  }\n\n  const recentSdkVersion = _.keys(platformsMapping).sort().reverse()[0];\n  const result = platformsMapping[recentSdkVersion];\n  log.debug(`Found the most recent Android platform: ${JSON.stringify(result)}`);\n  return result;\n}\n\nasync function unzipFile (zipPath, dstRoot = path.dirname(zipPath)) {\n  log.debug(`Unzipping '${zipPath}' to '${dstRoot}'`);\n  await zip.assertValidZip(zipPath);\n  await zip.extractAllTo(zipPath, dstRoot);\n  log.debug('Unzip successful');\n}\n\n/**\n * Unsigns the given apk by removing the\n * META-INF folder recursively from the archive.\n * !!! The function overwrites the given apk after successful unsigning !!!\n *\n * @param {string} apkPath The path to the apk\n * @returns {boolean} `true` if the apk has been successfully\n * unsigned and overwritten\n * @throws {Error} if there was an error during the unsign operation\n */\nasync function unsignApk (apkPath) {\n  const tmpRoot = await tempDir.openDir();\n  const metaInfFolderName = 'META-INF';\n  try {\n    let hasMetaInf = false;\n    await zip.readEntries(apkPath, ({entry}) => {\n      hasMetaInf = entry.fileName.startsWith(`${metaInfFolderName}/`);\n      // entries iteration stops after `false` is returned\n      return !hasMetaInf;\n    });\n    if (!hasMetaInf) {\n      return false;\n    }\n    const tmpZipRoot = path.resolve(tmpRoot, 'apk');\n    await zip.extractAllTo(apkPath, tmpZipRoot);\n    await fs.rimraf(path.resolve(tmpZipRoot, metaInfFolderName));\n    const tmpResultPath = path.resolve(tmpRoot, path.basename(apkPath));\n    await zip.toArchive(tmpResultPath, {\n      cwd: tmpZipRoot,\n    });\n    await fs.unlink(apkPath);\n    await fs.mv(tmpResultPath, apkPath);\n    return true;\n  } finally {\n    await fs.rimraf(tmpRoot);\n  }\n}\n\nfunction getIMEListFromOutput (stdout) {\n  let engines = [];\n  for (let line of stdout.split('\\n')) {\n    if (line.length > 0 && line[0] !== ' ') {\n      // remove newline and trailing colon, and add to the list\n      engines.push(line.trim().replace(/:$/, ''));\n    }\n  }\n  return engines;\n}\n\nconst getJavaHome = _.memoize(async function getJavaHome () {\n  const result = process.env.JAVA_HOME;\n  if (!result) {\n    throw new Error('The JAVA_HOME environment variable is not set for the current process');\n  }\n  if (!await fs.exists(result)) {\n    throw new Error(`The JAVA_HOME location '${result}' must exist`);\n  }\n  const stats = await fs.stat(result);\n  if (!stats.isDirectory()) {\n    throw new Error(`The JAVA_HOME location '${result}' must be a valid folder`);\n  }\n  return result;\n});\n\nconst getJavaForOs = _.memoize(async function getJavaForOs () {\n  let javaHome;\n  let errMsg;\n  try {\n    javaHome = await getJavaHome();\n  } catch (err) {\n    errMsg = err.message;\n  }\n  const executableName = `java${system.isWindows() ? '.exe' : ''}`;\n  if (javaHome) {\n    const resultPath = path.resolve(javaHome, 'bin', executableName);\n    if (await fs.exists(resultPath)) {\n      return resultPath;\n    }\n  }\n  try {\n    return await fs.which(executableName);\n  } catch (ign) {}\n  throw new Error(`The '${executableName}' binary could not be found ` +\n    `neither in PATH nor under JAVA_HOME (${errMsg || path.resolve(javaHome, 'bin')})`);\n});\n\nconst getOpenSslForOs = async function () {\n  const binaryName = `openssl${system.isWindows() ? '.exe' : ''}`;\n  try {\n    return await fs.which(binaryName);\n  } catch (err) {\n    throw new Error('The openssl tool must be installed on the system and available on the path');\n  }\n};\n\n/**\n * Get the absolute path to apksigner tool\n *\n * @param {Object} sysHelpers - An instance containing systemCallMethods helper methods\n * @returns {string} An absolute path to apksigner tool.\n * @throws {Error} If the tool is not present on the local file system.\n */\nasync function getApksignerForOs (sysHelpers) {\n  return await sysHelpers.getBinaryFromSdkRoot('apksigner.jar');\n}\n\n/**\n * Get the absolute path to apkanalyzer tool.\n * https://developer.android.com/studio/command-line/apkanalyzer.html\n *\n * @param {Object} sysHelpers - An instance containing systemCallMethods helper methods\n * @returns {string} An absolute path to apkanalyzer tool.\n * @throws {Error} If the tool is not present on the local file system.\n */\nasync function getApkanalyzerForOs (sysHelpers) {\n  return await sysHelpers.getBinaryFromSdkRoot('apkanalyzer');\n}\n\n/**\n * Checks mShowingLockscreen or mDreamingLockscreen in dumpsys output to determine\n * if lock screen is showing\n *\n * A note: `adb shell dumpsys trust` performs better while detecting the locked screen state\n * in comparison to `adb dumpsys window` output parsing.\n * But the trust command does not work for `Swipe` unlock pattern.\n *\n * In some Android devices (Probably around Android 10+), `mShowingLockscreen` and `mDreamingLockscreen`\n * do not work to detect lock status. Instead, keyguard preferences helps to detect the lock condition.\n * Some devices such as Android TV do not have keyguard, so we should keep\n * screen condition as this primary method.\n *\n * @param {string} dumpsys - The output of dumpsys window command.\n * @return {boolean} True if lock screen is showing.\n */\nfunction isShowingLockscreen (dumpsys) {\n  return _.some(['mShowingLockscreen=true', 'mDreamingLockscreen=true'], (x) => dumpsys.includes(x))\n    // `mIsShowing` and `mInputRestricted` are `true` in lock condition. `false` is unlock condition.\n    || _.every([/KeyguardStateMonitor[\\n\\s]+mIsShowing=true/, /\\s+mInputRestricted=true/], (x) => x.test(dumpsys));\n}\n\n/*\n * Checks mCurrentFocus in dumpsys output to determine if Keyguard is activated\n */\nfunction isCurrentFocusOnKeyguard (dumpsys) {\n  let m = /mCurrentFocus.+Keyguard/gi.exec(dumpsys);\n  return (m && m.length && m[0]) ? true : false;\n}\n\n/*\n * Reads SurfaceOrientation in dumpsys output\n */\nfunction getSurfaceOrientation (dumpsys) {\n  let m = /SurfaceOrientation: \\d/gi.exec(dumpsys);\n  return m && parseInt(m[0].split(':')[1], 10);\n}\n\n/*\n * Checks mScreenOnFully in dumpsys output to determine if screen is showing\n * Default is true\n */\nfunction isScreenOnFully (dumpsys) {\n  let m = /mScreenOnFully=\\w+/gi.exec(dumpsys);\n  return !m || // if information is missing we assume screen is fully on\n         (m && m.length > 0 && m[0].split('=')[1] === 'true') || false;\n}\n\n/**\n * Builds command line representation for the given\n * application startup options\n *\n * @param {StartAppOptions} startAppOptions - Application options mapping\n * @param {number} apiLevel - The actual OS API level\n * @returns {Array<String>} The actual command line array\n */\nfunction buildStartCmd (startAppOptions, apiLevel) {\n  const {\n    user,\n    waitForLaunch,\n    pkg,\n    activity,\n    action,\n    category,\n    stopApp,\n    flags,\n  } = startAppOptions;\n  const cmd = ['am', 'start'];\n  if (util.hasValue(user)) {\n    cmd.push('--user', user);\n  }\n  if (waitForLaunch) {\n    cmd.push('-W');\n  }\n  if (activity && pkg) {\n    cmd.push('-n', `${pkg}/${activity}`);\n  }\n  if (stopApp && apiLevel >= 15) {\n    cmd.push('-S');\n  }\n  if (action) {\n    cmd.push('-a', action);\n  }\n  if (category) {\n    cmd.push('-c', category);\n  }\n  if (flags) {\n    cmd.push('-f', flags);\n  }\n  if (startAppOptions.optionalIntentArguments) {\n    // expect optionalIntentArguments to be a single string of the form:\n    //     \"-flag key\"\n    //     \"-flag key value\"\n    // or a combination of these (e.g., \"-flag1 key1 -flag2 key2 value2\")\n\n    // take a string and parse out the part before any spaces, and anything after\n    // the first space\n    let parseKeyValue = function (str) {\n      str = str.trim();\n      let space = str.indexOf(' ');\n      if (space === -1) {\n        return str.length ? [str] : [];\n      } else {\n        return [str.substring(0, space).trim(), str.substring(space + 1).trim()];\n      }\n    };\n\n    // cycle through the optionalIntentArguments and pull out the arguments\n    // add a space initially so flags can be distinguished from arguments that\n    // have internal hyphens\n    let optionalIntentArguments = ` ${startAppOptions.optionalIntentArguments}`;\n    let re = / (-[^\\s]+) (.+)/;\n    while (true) { // eslint-disable-line no-constant-condition\n      let args = re.exec(optionalIntentArguments);\n      if (!args) {\n        if (optionalIntentArguments.length) {\n          // no more flags, so the remainder can be treated as 'key' or 'key value'\n          cmd.push.apply(cmd, parseKeyValue(optionalIntentArguments));\n        }\n        // we are done\n        break;\n      }\n\n      // take the flag and see if it is at the beginning of the string\n      // if it is not, then it means we have been through already, and\n      // what is before the flag is the argument for the previous flag\n      let flag = args[1];\n      let flagPos = optionalIntentArguments.indexOf(flag);\n      if (flagPos !== 0) {\n        let prevArgs = optionalIntentArguments.substring(0, flagPos);\n        cmd.push.apply(cmd, parseKeyValue(prevArgs));\n      }\n\n      // add the flag, as there are no more earlier arguments\n      cmd.push(flag);\n\n      // make optionalIntentArguments hold the remainder\n      optionalIntentArguments = args[2];\n    }\n  }\n  return cmd;\n}\n\nconst getSdkToolsVersion = _.memoize(async function getSdkToolsVersion () {\n  const androidHome = process.env.ANDROID_HOME;\n  if (!androidHome) {\n    throw new Error('ANDROID_HOME environment variable is expected to be set');\n  }\n  const propertiesPath = path.resolve(androidHome, 'tools', 'source.properties');\n  if (!await fs.exists(propertiesPath)) {\n    log.warn(`Cannot find ${propertiesPath} file to read SDK version from`);\n    return;\n  }\n  const propertiesContent = await fs.readFile(propertiesPath, 'utf8');\n  const versionMatcher = new RegExp(/Pkg\\.Revision=(\\d+)\\.?(\\d+)?\\.?(\\d+)?/);\n  const match = versionMatcher.exec(propertiesContent);\n  if (match) {\n    return {\n      major: parseInt(match[1], 10),\n      minor: match[2] ? parseInt(match[2], 10) : 0,\n      build: match[3] ? parseInt(match[3], 10) : 0\n    };\n  }\n  log.warn(`Cannot parse \"Pkg.Revision\" value from ${propertiesPath}`);\n});\n\n/**\n * Retrieves full paths to all 'build-tools' subfolders under the particular\n * SDK root folder\n *\n * @param {string} sdkRoot - The full path to the Android SDK root folder\n * @returns {Array<string>} The full paths to the resulting folders sorted by\n * modification date (the newest comes first) or an empty list if no macthes were found\n */\nconst getBuildToolsDirs = _.memoize(async function getBuildToolsDirs (sdkRoot) {\n  let buildToolsDirs = await fs.glob('*/', {\n    cwd: path.resolve(sdkRoot, 'build-tools'),\n    absolute: true,\n  });\n  try {\n    buildToolsDirs = buildToolsDirs\n      .map((dir) => [path.basename(dir), dir])\n      .sort((a, b) => semver.rcompare(a[0], b[0]))\n      .map((pair) => pair[1]);\n  } catch (err) {\n    log.warn(`Cannot sort build-tools folders ${JSON.stringify(buildToolsDirs.map((dir) => path.basename(dir)))} ` +\n      `by semantic version names.`);\n    log.warn(`Falling back to sorting by modification date. Original error: ${err.message}`);\n    const pairs = await B.map(buildToolsDirs, async (dir) => [(await fs.stat(dir)).mtime.valueOf(), dir]);\n    buildToolsDirs = pairs\n      .sort((a, b) => a[0] < b[0])\n      .map((pair) => pair[1]);\n  }\n  log.info(`Found ${buildToolsDirs.length} 'build-tools' folders under '${sdkRoot}' (newest first):`);\n  for (let dir of buildToolsDirs) {\n    log.info(`    ${dir}`);\n  }\n  return buildToolsDirs;\n});\n\n/**\n * Retrieves the list of permission names encoded in `dumpsys package` command output.\n *\n * @param {string} dumpsysOutput - The actual command output.\n * @param {Array<string>} groupNames - The list of group names to list permissions for.\n * @param {?boolean} grantedState - The expected state of `granted` attribute to filter with.\n *                                  No filtering is done if the parameter is not set.\n * @returns {Array<string>} The list of matched permission names or an empty list if no matches were found.\n */\nconst extractMatchingPermissions = function (dumpsysOutput, groupNames, grantedState = null) {\n  const groupPatternByName = (groupName) => new RegExp(`^(\\\\s*${_.escapeRegExp(groupName)} permissions:[\\\\s\\\\S]+)`, 'm');\n  const indentPattern = /\\S|$/;\n  const permissionNamePattern = /android\\.\\w*\\.?permission\\.\\w+/;\n  const grantedStatePattern = /\\bgranted=(\\w+)/;\n  const result = [];\n  for (const groupName of groupNames) {\n    const groupMatch = groupPatternByName(groupName).exec(dumpsysOutput);\n    if (!groupMatch) {\n      continue;\n    }\n\n    const lines = groupMatch[1].split('\\n');\n    if (lines.length < 2) {\n      continue;\n    }\n\n    const titleIndent = lines[0].search(indentPattern);\n    for (const line of lines.slice(1)) {\n      const currentIndent = line.search(indentPattern);\n      if (currentIndent <= titleIndent) {\n        break;\n      }\n\n      const permissionNameMatch = permissionNamePattern.exec(line);\n      if (!permissionNameMatch) {\n        continue;\n      }\n      const item = {\n        permission: permissionNameMatch[0],\n      };\n      const grantedStateMatch = grantedStatePattern.exec(line);\n      if (grantedStateMatch) {\n        item.granted = grantedStateMatch[1] === 'true';\n      }\n      result.push(item);\n    }\n  }\n\n  const filteredResult = result\n    .filter((item) => !_.isBoolean(grantedState) || item.granted === grantedState)\n    .map((item) => item.permission);\n  log.debug(`Retrieved ${util.pluralize('permission', filteredResult.length, true)} ` +\n    `from ${groupNames} ${util.pluralize('group', groupNames.length, false)}`);\n  return filteredResult;\n};\n\n/**\n * @typedef {Object} InstallOptions\n * @property {boolean} allowTestPackages [false] - Set to true in order to allow test\n *                                                 packages installation.\n * @property {boolean} useSdcard [false] - Set to true to install the app on sdcard\n *                                         instead of the device memory.\n * @property {boolean} grantPermissions [false] - Set to true in order to grant all the\n *                                                permissions requested in the application's manifest\n *                                                automatically after the installation is completed\n *                                                under Android 6+.\n * @property {boolean} replace [true] - Set it to false if you don't want\n *                                      the application to be upgraded/reinstalled\n *                                      if it is already present on the device.\n * @property {boolean} partialInstall [false] - Install apks partially. It is used for 'install-multiple'.\n *                                             https://android.stackexchange.com/questions/111064/what-is-a-partial-application-install-via-adb\n */\n\n/**\n * Transforms given options into the list of `adb install.install-multiple` command arguments\n *\n * @param {number} apiLevel - The current API level\n * @param {?InstallOptions} options - The options mapping to transform\n * @returns {Array<String>} The array of arguments\n */\nfunction buildInstallArgs (apiLevel, options = {}) {\n  const result = [];\n\n  if (!util.hasValue(options.replace) || options.replace) {\n    result.push('-r');\n  }\n  if (options.allowTestPackages) {\n    result.push('-t');\n  }\n  if (options.useSdcard) {\n    result.push('-s');\n  }\n  if (options.grantPermissions) {\n    if (apiLevel < 23) {\n      log.debug(`Skipping permissions grant option, since ` +\n                `the current API level ${apiLevel} does not support applications ` +\n                `permissions customization`);\n    } else {\n      result.push('-g');\n    }\n  }\n  // For multiple-install\n  if (options.partialInstall) {\n    result.push('-p');\n  }\n\n  return result;\n}\n\n/**\n * @typedef {Object} ManifestInfo\n * @property {string} pkg - The application identifier\n * @property {string} activity - The name of the main package activity\n * @property {?number} versionCode - The version code number (might be `NaN`)\n * @property {?string} versionName - The version name (might be `null`)\n */\n\n/**\n * Perform parsing of the manifest object in order\n * to extract some vital values from it\n *\n * @param {object} manifest The manifest content formatted as JSON\n * See https://www.npmjs.com/package/adbkit-apkreader for detailed format description\n * @returns {ManifestInfo}\n */\nfunction parseManifest (manifest) {\n  const result = {\n    pkg: manifest.package,\n    versionCode: parseInt(manifest.versionCode, 10),\n    versionName: manifest.versionName || null,\n  };\n  if (!manifest.application) {\n    return result;\n  }\n\n  // Look for enabled activity or activity-alias with\n  // action == android.intent.action.MAIN and\n  // category == android.intent.category.LAUNCHER\n  for (const activity of [\n    ...manifest.application.activities,\n    ...manifest.application.activityAliases,\n  ]) {\n    if (activity.enabled === false || _.isEmpty(activity.intentFilters)) {\n      continue;\n    }\n\n    for (const {actions, categories} of activity.intentFilters) {\n      if (_.isEmpty(actions) || _.isEmpty(categories)) {\n        continue;\n      }\n\n      const isMainAction = actions.some(({name}) => name === MAIN_ACTION);\n      const isLauncherCategory = categories.some(({name}) => name === LAUNCHER_CATEGORY);\n      if (isMainAction && isLauncherCategory) {\n        result.activity = activity.name;\n        return result;\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Parses apk strings from aapt tool output\n *\n * @param {string} rawOutput The actual tool output\n * @param {string} configMarker The config marker. Usually\n * a language abbreviation or `(default)`\n * @returns {Object} Strings ids to values mapping. Plural\n * values are represented as arrays. If no config found for the\n * given marker then an empty mapping is returned.\n */\nfunction parseAaptStrings (rawOutput, configMarker) {\n  const normalizeStringMatch = function (s) {\n    return s.replace(/\"$/, '').replace(/^\"/, '').replace(/\\\\\"/g, '\"');\n  };\n\n  const apkStrings = {};\n  let isInConfig = false;\n  let currentResourceId = null;\n  let isInPluralGroup = false;\n  // The pattern matches any quoted content including escaped quotes\n  const quotedStringPattern = /\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"/;\n  for (const line of rawOutput.split(os.EOL)) {\n    const trimmedLine = line.trim();\n    if (_.isEmpty(trimmedLine)) {\n      continue;\n    }\n\n    if (['config', 'type', 'spec', 'Package'].some((x) => trimmedLine.startsWith(x))) {\n      isInConfig = trimmedLine.startsWith(`config ${configMarker}:`);\n      currentResourceId = null;\n      isInPluralGroup = false;\n      continue;\n    }\n\n    if (!isInConfig) {\n      continue;\n    }\n\n    if (trimmedLine.startsWith('resource')) {\n      isInPluralGroup = false;\n      currentResourceId = null;\n\n      if (trimmedLine.includes(':string/')) {\n        const match = /:string\\/(\\S+):/.exec(trimmedLine);\n        if (match) {\n          currentResourceId = match[1];\n        }\n      } else if (trimmedLine.includes(':plurals/')) {\n        const match = /:plurals\\/(\\S+):/.exec(trimmedLine);\n        if (match) {\n          currentResourceId = match[1];\n          isInPluralGroup = true;\n        }\n      }\n      continue;\n    }\n\n    if (currentResourceId && trimmedLine.startsWith('(string')) {\n      const match = quotedStringPattern.exec(trimmedLine);\n      if (match) {\n        apkStrings[currentResourceId] = normalizeStringMatch(match[0]);\n      }\n      currentResourceId = null;\n      continue;\n    }\n\n    if (currentResourceId && isInPluralGroup && trimmedLine.includes(': (string')) {\n      const match = quotedStringPattern.exec(trimmedLine);\n      if (match) {\n        apkStrings[currentResourceId] = [\n          ...(apkStrings[currentResourceId] || []),\n          normalizeStringMatch(match[0]),\n        ];\n      }\n      continue;\n    }\n  }\n  return apkStrings;\n}\n\n/**\n * Parses apk strings from aapt2 tool output\n *\n * @param {string} rawOutput The actual tool output\n * @param {string} configMarker The config marker. Usually\n * a language abbreviation or an empty string for the default one\n * @returns {Object} Strings ids to values mapping. Plural\n * values are represented as arrays. If no config found for the\n * given marker then an empty mapping is returned.\n */\nfunction parseAapt2Strings (rawOutput, configMarker) {\n  const allLines = rawOutput.split(os.EOL);\n  function extractContent (startIdx) {\n    let idx = startIdx;\n    const startCharPos = allLines[startIdx].indexOf('\"');\n    if (startCharPos < 0) {\n      return [null, idx];\n    }\n    let result = '';\n    while (idx < allLines.length) {\n      const terminationCharMatch = /\"$/.exec(allLines[idx]);\n      if (terminationCharMatch) {\n        const terminationCharPos = terminationCharMatch.index;\n        if (startIdx === idx) {\n          return [\n            allLines[idx].substring(startCharPos + 1, terminationCharPos),\n            idx\n          ];\n        }\n        return [\n          `${result}\\\\n${_.trimStart(allLines[idx].substring(0, terminationCharPos))}`,\n          idx,\n        ];\n      }\n      if (idx > startIdx) {\n        result += `\\\\n${_.trimStart(allLines[idx])}`;\n      } else {\n        result += allLines[idx].substring(startCharPos + 1);\n      }\n      ++idx;\n    }\n    return [result, idx];\n  }\n\n  const apkStrings = {};\n  let currentResourceId = null;\n  let isInPluralGroup = false;\n  let isInCurrentConfig = false;\n  let lineIndex = 0;\n  while (lineIndex < allLines.length) {\n    const trimmedLine = allLines[lineIndex].trim();\n    if (_.isEmpty(trimmedLine)) {\n      ++lineIndex;\n      continue;\n    }\n\n    if (['type', 'Package'].some((x) => trimmedLine.startsWith(x))) {\n      currentResourceId = null;\n      isInPluralGroup = false;\n      isInCurrentConfig = false;\n      ++lineIndex;\n      continue;\n    }\n\n    if (trimmedLine.startsWith('resource')) {\n      isInPluralGroup = false;\n      currentResourceId = null;\n      isInCurrentConfig = false;\n\n      if (trimmedLine.includes('string/')) {\n        const match = /string\\/(\\S+)/.exec(trimmedLine);\n        if (match) {\n          currentResourceId = match[1];\n        }\n      } else if (trimmedLine.includes('plurals/')) {\n        const match = /plurals\\/(\\S+)/.exec(trimmedLine);\n        if (match) {\n          currentResourceId = match[1];\n          isInPluralGroup = true;\n        }\n      }\n      ++lineIndex;\n      continue;\n    }\n\n    if (currentResourceId) {\n      if (isInPluralGroup) {\n        if (trimmedLine.startsWith('(')) {\n          isInCurrentConfig = trimmedLine.startsWith(`(${configMarker})`);\n          ++lineIndex;\n          continue;\n        }\n        if (isInCurrentConfig) {\n          const [content, idx] = extractContent(lineIndex);\n          lineIndex = idx;\n          if (_.isString(content)) {\n            apkStrings[currentResourceId] = [\n              ...(apkStrings[currentResourceId] || []),\n              content,\n            ];\n          }\n        }\n      } else if (trimmedLine.startsWith(`(${configMarker})`)) {\n        const [content, idx] = extractContent(lineIndex);\n        lineIndex = idx;\n        if (_.isString(content)) {\n          apkStrings[currentResourceId] = content;\n        }\n        currentResourceId = null;\n      }\n    }\n    ++lineIndex;\n  }\n  return apkStrings;\n}\n\n/**\n * Formats the config marker, which is then passed to parse.. methods\n * to make it compatible with resource formats generated by aapt(2) tool\n *\n * @param {Function} configsGetter The function whose result is a list\n * of apk configs\n * @param {string} desiredMarker The desired config marker value\n * @param {string} defaultMarker The default config marker value\n * @return {string} The formatted config marker\n */\nasync function formatConfigMarker (configsGetter, desiredMarker, defaultMarker) {\n  let configMarker = desiredMarker || defaultMarker;\n  if (configMarker.includes('-') && !configMarker.includes('-r')) {\n    configMarker = configMarker.replace('-', '-r');\n  }\n  const configs = await configsGetter();\n  log.debug(`Resource configurations: ${JSON.stringify(configs)}`);\n  // Assume the 'en' configuration is the default one\n  if (configMarker.toLowerCase().startsWith('en')\n    && !configs.some((x) => x.trim() === configMarker)) {\n    log.debug(`Resource configuration name '${configMarker}' is unknown. ` +\n      `Replacing it with '${defaultMarker}'`);\n    configMarker = defaultMarker;\n  } else {\n    log.debug(`Selected configuration: '${configMarker}'`);\n  }\n  return configMarker;\n}\n\n/**\n * Parses the output in JSON format retrieved from\n * the corresponding Appium Settings broadcast calls\n *\n * @param {string} output The actual command output\n * @param {string} entityName The name of the entity which is\n * going to be parsed\n * @returns {Object} The parsed JSON object\n * @throws {Error} If the output cannot be parsed\n * as a valid JSON\n */\nfunction parseJsonData (output, entityName) {\n  if (!/\\bresult=-1\\b/.test(output) || !/\\bdata=\"/.test(output)) {\n    log.debug(output);\n    throw new Error(`Cannot retrieve ${entityName} from the device. ` +\n      'Check the server log for more details');\n  }\n  const match = /\\bdata=(\".+)/.exec(output);\n  if (!match) {\n    log.debug(output);\n    throw new Error(`Cannot parse ${entityName} from the command output. ` +\n      'Check the server log for more details');\n  }\n  const jsonStr = _.trim(match[1]).replace(/(^\")|(\"$)/g, '');\n  try {\n    return JSON.parse(jsonStr);\n  } catch (e) {\n    log.debug(jsonStr);\n    throw new Error(`Cannot parse ${entityName} from the resulting data string. ` +\n      'Check the server log for more details');\n  }\n}\n\n/**\n * Transforms the given language and country abbreviations\n * to AVD arguments array\n *\n * @param {?string} language Language name, for example 'fr'\n * @param {?string} country Country name, for example 'CA'\n * @returns {Array<string>} The generated arguments. The\n * resulting array might be empty if both arguments are empty\n */\nfunction toAvdLocaleArgs (language, country) {\n  const result = [];\n  if (language && _.isString(language)) {\n    result.push('-prop', `persist.sys.language=${language.toLowerCase()}`);\n  }\n  if (country && _.isString(country)) {\n    result.push('-prop', `persist.sys.country=${country.toUpperCase()}`);\n  }\n  let locale;\n  if (_.isString(language) && _.isString(country) && language && country) {\n    locale = language.toLowerCase() + '-' + country.toUpperCase();\n  } else if (language && _.isString(language)) {\n    locale = language.toLowerCase();\n  } else if (country && _.isString(country)) {\n    locale = country;\n  }\n  if (locale) {\n    result.push('-prop', `persist.sys.locale=${locale}`);\n  }\n  return result;\n}\n\n/**\n * Retrieves the full path to the Android preferences root\n *\n * @returns {?string} The full path to the folder or `null` if the folder cannot be found\n */\nasync function getAndroidPrefsRoot () {\n  let location = process.env.ANDROID_EMULATOR_HOME;\n  if (await dirExists(location)) {\n    return location;\n  }\n\n  if (location) {\n    log.warn(`The value of the ANDROID_EMULATOR_HOME environment variable '${location}' is not an existing directory`);\n  }\n\n  const home = process.env.HOME || process.env.USERPROFILE;\n  if (home) {\n    location = path.resolve(home, '.android');\n  }\n\n  if (!await dirExists(location)) {\n    log.debug(`Android config root '${location}' is not an existing directory`);\n    return null;\n  }\n\n  return location;\n}\n\n/**\n * Check if a path exists on the filesystem and is a directory\n *\n * @param {?string} location The full path to the directory\n * @returns {boolean}\n */\nasync function dirExists (location) {\n  return location\n    && await fs.exists(location)\n    && (await fs.stat(location)).isDirectory();\n}\n\n/**\n * Escapes special characters in command line arguments.\n * This is needed to avoid possible issues with how system `spawn`\n * call handles them.\n * See https://discuss.appium.io/t/how-to-modify-wd-proxy-and-uiautomator2-source-code-to-support-unicode/33466\n * for more details.\n *\n * @param {string} arg Non-escaped argument string\n * @returns The escaped argument\n */\nfunction escapeShellArg (arg) {\n  arg = `${arg}`;\n  if (system.isWindows()) {\n    return /[&|^\\s]/.test(arg) ? `\"${arg.replace(/\"/g, '\"\"')}\"` : arg;\n  }\n  return arg.replace(/&/g, '\\\\&');\n}\n\n/**\n * Parses the name of launchable package activity\n * from dumpsys output.\n *\n * @param {string} dumpsys the actual dumpsys output\n * @returns {string[]} Either the fully qualified\n * activity name as a single list item or an empty list if nothing could be parsed.\n * In Android 6 and older there is no reliable way to determine\n * the category name for the given activity, so this API just\n * returns all activity names belonging to 'android.intent.action.MAIN'\n * with the expectation that the app manifest could be parsed next\n * in order to determine category names for these.\n */\nfunction parseLaunchableActivityNames (dumpsys) {\n  const mainActivityNameRe = new RegExp(`^\\\\s*${_.escapeRegExp(MAIN_ACTION)}:$`);\n  const categoryNameRe = /^\\s*Category:\\s+\"([a-zA-Z0-9._/-]+)\"$/;\n  const blocks = [];\n  let blockStartIndent;\n  let block = [];\n  for (const line of dumpsys.split('\\n').map(_.trimEnd)) {\n    const currentIndent = line.length - _.trimStart(line).length;\n    if (mainActivityNameRe.test(line)) {\n      blockStartIndent = currentIndent;\n      if (!_.isEmpty(block)) {\n        blocks.push(block);\n        block = [];\n      }\n      continue;\n    }\n    if (_.isNil(blockStartIndent)) {\n      continue;\n    }\n\n    if (currentIndent > blockStartIndent) {\n      block.push(line);\n    } else {\n      if (!_.isEmpty(block)) {\n        blocks.push(block);\n        block = [];\n      }\n      blockStartIndent = null;\n    }\n  }\n  if (!_.isEmpty(block)) {\n    blocks.push(block);\n  }\n\n  const result = [];\n  for (const item of blocks) {\n    let hasCategory = false;\n    let isLauncherCategory = false;\n    for (const line of item) {\n      const match = categoryNameRe.exec(line);\n      if (!match) {\n        continue;\n      }\n\n      hasCategory = true;\n      isLauncherCategory = match[1] === LAUNCHER_CATEGORY;\n      break;\n    }\n    // On older Android versions the category name\n    // might not be listed, so we just try to fetch\n    // all matches instead\n    if (hasCategory && !isLauncherCategory) {\n      continue;\n    }\n\n    for (const activityNameStr of item.map(_.trim).filter(Boolean)) {\n      const fqActivityName = activityNameStr.split(/\\s+/)[1];\n      if (!matchComponentName(fqActivityName)) {\n        continue;\n      }\n\n      if (isLauncherCategory) {\n        return [fqActivityName];\n      }\n      result.push(fqActivityName);\n    }\n  }\n  return result;\n}\n\n/**\n * Check if the given string is a valid component name\n *\n * @param {string} classString The string to verify\n * @return {?Array<Match>} The result of Regexp.exec operation\n * or _null_ if no matches are found\n */\nfunction matchComponentName (classString) {\n  // some.package/some.package.Activity\n  return /^[a-z0-9./_]+$/i.exec(classString);\n}\n\nexport {\n  getAndroidPlatformAndPath, unzipFile,\n  getIMEListFromOutput, getJavaForOs, isShowingLockscreen, isCurrentFocusOnKeyguard,\n  getSurfaceOrientation, isScreenOnFully, buildStartCmd, getJavaHome,\n  getSdkToolsVersion, getApksignerForOs, getBuildToolsDirs,\n  getApkanalyzerForOs, getOpenSslForOs, extractMatchingPermissions, APKS_EXTENSION,\n  APK_INSTALL_TIMEOUT, APKS_INSTALL_TIMEOUT, buildInstallArgs, APK_EXTENSION,\n  DEFAULT_ADB_EXEC_TIMEOUT, parseManifest, parseAaptStrings, parseAapt2Strings,\n  formatConfigMarker, parseJsonData, unsignApk, toAvdLocaleArgs, requireSdkRoot,\n  getSdkRootFromEnv, getAndroidPrefsRoot, dirExists, escapeShellArg,\n  parseLaunchableActivityNames, matchComponentName, getResourcePath\n};\n"],"mappings":"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"}