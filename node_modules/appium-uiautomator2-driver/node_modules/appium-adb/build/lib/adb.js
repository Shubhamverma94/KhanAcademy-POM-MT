"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEFAULT_ADB_PORT = exports.ADB = void 0;
Object.defineProperty(exports, "getAndroidBinaryPath", {
  enumerable: true,
  get: function () {
    return _index.getAndroidBinaryPath;
  }
});
Object.defineProperty(exports, "getSdkRootFromEnv", {
  enumerable: true,
  get: function () {
    return _helpers.getSdkRootFromEnv;
  }
});
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _os = _interopRequireDefault(require("os"));
var _index = _interopRequireWildcard(require("./tools/index.js"));
var _helpers = require("./helpers");
var _logger = _interopRequireDefault(require("./logger.js"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const DEFAULT_ADB_PORT = 5037;
exports.DEFAULT_ADB_PORT = DEFAULT_ADB_PORT;
const DEFAULT_OPTS = {
  sdkRoot: (0, _helpers.getSdkRootFromEnv)() || null,
  udid: null,
  appDeviceReadyTimeout: null,
  useKeystore: null,
  keystorePath: null,
  keystorePassword: null,
  keyAlias: null,
  keyPassword: null,
  executable: {
    path: 'adb',
    defaultArgs: []
  },
  tmpDir: _os.default.tmpdir(),
  curDeviceId: null,
  emulatorPort: null,
  logcat: null,
  binaries: {},
  instrumentProc: null,
  suppressKillServer: null,
  jars: {},
  adbPort: DEFAULT_ADB_PORT,
  adbHost: null,
  adbExecTimeout: _helpers.DEFAULT_ADB_EXEC_TIMEOUT,
  remoteAppsCacheLimit: 10,
  buildToolsVersion: null,
  allowOfflineDevices: false,
  allowDelayAdb: true
};
class ADB {
  constructor(opts = {}) {
    Object.assign(this, opts);
    _lodash.default.defaultsDeep(this, _lodash.default.cloneDeep(DEFAULT_OPTS));
    if (opts.remoteAdbHost) {
      this.executable.defaultArgs.push('-H', opts.remoteAdbHost);
      this.adbHost = opts.remoteAdbHost;
    }
    if (opts.remoteAdbPort) {
      this.adbPort = opts.remoteAdbPort;
    }
    this.executable.defaultArgs.push('-P', this.adbPort);
  }
  clone(opts = {}) {
    const originalOptions = _lodash.default.cloneDeep(_lodash.default.pick(this, Object.keys(DEFAULT_OPTS)));
    const cloneOptions = _lodash.default.defaultsDeep(opts, originalOptions);
    const defaultArgs = cloneOptions.executable.defaultArgs;
    if (cloneOptions.remoteAdbHost && defaultArgs.includes('-H')) {
      defaultArgs.splice(defaultArgs.indexOf('-H'), 2);
    }
    if (defaultArgs.includes('-P')) {
      defaultArgs.splice(defaultArgs.indexOf('-P'), 2);
    }
    return new ADB(cloneOptions);
  }
}
exports.ADB = ADB;
ADB.createADB = async function createADB(opts) {
  const adb = new ADB(opts);
  adb.sdkRoot = await (0, _helpers.requireSdkRoot)(adb.sdkRoot);
  await adb.getAdbWithCorrectAdbPath();
  try {
    await adb.adbExec(['start-server']);
  } catch (e) {
    _logger.default.warn(e.stderr || e.message);
  }
  return adb;
};
for (const [fnName, fn] of _lodash.default.toPairs(_index.default)) {
  ADB.prototype[fnName] = fn;
}
var _default = ADB;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfb3MiLCJfaW5kZXgiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9oZWxwZXJzIiwiX2xvZ2dlciIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJERUZBVUxUX0FEQl9QT1JUIiwiZXhwb3J0cyIsIkRFRkFVTFRfT1BUUyIsInNka1Jvb3QiLCJnZXRTZGtSb290RnJvbUVudiIsInVkaWQiLCJhcHBEZXZpY2VSZWFkeVRpbWVvdXQiLCJ1c2VLZXlzdG9yZSIsImtleXN0b3JlUGF0aCIsImtleXN0b3JlUGFzc3dvcmQiLCJrZXlBbGlhcyIsImtleVBhc3N3b3JkIiwiZXhlY3V0YWJsZSIsInBhdGgiLCJkZWZhdWx0QXJncyIsInRtcERpciIsIm9zIiwidG1wZGlyIiwiY3VyRGV2aWNlSWQiLCJlbXVsYXRvclBvcnQiLCJsb2djYXQiLCJiaW5hcmllcyIsImluc3RydW1lbnRQcm9jIiwic3VwcHJlc3NLaWxsU2VydmVyIiwiamFycyIsImFkYlBvcnQiLCJhZGJIb3N0IiwiYWRiRXhlY1RpbWVvdXQiLCJERUZBVUxUX0FEQl9FWEVDX1RJTUVPVVQiLCJyZW1vdGVBcHBzQ2FjaGVMaW1pdCIsImJ1aWxkVG9vbHNWZXJzaW9uIiwiYWxsb3dPZmZsaW5lRGV2aWNlcyIsImFsbG93RGVsYXlBZGIiLCJBREIiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJhc3NpZ24iLCJfIiwiZGVmYXVsdHNEZWVwIiwiY2xvbmVEZWVwIiwicmVtb3RlQWRiSG9zdCIsInB1c2giLCJyZW1vdGVBZGJQb3J0IiwiY2xvbmUiLCJvcmlnaW5hbE9wdGlvbnMiLCJwaWNrIiwia2V5cyIsImNsb25lT3B0aW9ucyIsImluY2x1ZGVzIiwic3BsaWNlIiwiaW5kZXhPZiIsImNyZWF0ZUFEQiIsImFkYiIsInJlcXVpcmVTZGtSb290IiwiZ2V0QWRiV2l0aENvcnJlY3RBZGJQYXRoIiwiYWRiRXhlYyIsImUiLCJsb2ciLCJ3YXJuIiwic3RkZXJyIiwibWVzc2FnZSIsImZuTmFtZSIsImZuIiwidG9QYWlycyIsIm1ldGhvZHMiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9hZGIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBvcyBmcm9tICdvcyc7XG5pbXBvcnQgbWV0aG9kcywgeyBnZXRBbmRyb2lkQmluYXJ5UGF0aCB9IGZyb20gJy4vdG9vbHMvaW5kZXguanMnO1xuaW1wb3J0IHtcbiAgREVGQVVMVF9BREJfRVhFQ19USU1FT1VULCByZXF1aXJlU2RrUm9vdCwgZ2V0U2RrUm9vdEZyb21FbnZcbn0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXIuanMnO1xuXG5jb25zdCBERUZBVUxUX0FEQl9QT1JUID0gNTAzNztcbmNvbnN0IERFRkFVTFRfT1BUUyA9IHtcbiAgc2RrUm9vdDogZ2V0U2RrUm9vdEZyb21FbnYoKSB8fCBudWxsLFxuICB1ZGlkOiBudWxsLFxuICBhcHBEZXZpY2VSZWFkeVRpbWVvdXQ6IG51bGwsXG4gIHVzZUtleXN0b3JlOiBudWxsLFxuICBrZXlzdG9yZVBhdGg6IG51bGwsXG4gIGtleXN0b3JlUGFzc3dvcmQ6IG51bGwsXG4gIGtleUFsaWFzOiBudWxsLFxuICBrZXlQYXNzd29yZDogbnVsbCxcbiAgZXhlY3V0YWJsZToge3BhdGg6ICdhZGInLCBkZWZhdWx0QXJnczogW119LFxuICB0bXBEaXI6IG9zLnRtcGRpcigpLFxuICBjdXJEZXZpY2VJZDogbnVsbCxcbiAgZW11bGF0b3JQb3J0OiBudWxsLFxuICBsb2djYXQ6IG51bGwsXG4gIGJpbmFyaWVzOiB7fSxcbiAgaW5zdHJ1bWVudFByb2M6IG51bGwsXG4gIHN1cHByZXNzS2lsbFNlcnZlcjogbnVsbCxcbiAgamFyczoge30sXG4gIGFkYlBvcnQ6IERFRkFVTFRfQURCX1BPUlQsXG4gIGFkYkhvc3Q6IG51bGwsXG4gIGFkYkV4ZWNUaW1lb3V0OiBERUZBVUxUX0FEQl9FWEVDX1RJTUVPVVQsXG4gIHJlbW90ZUFwcHNDYWNoZUxpbWl0OiAxMCxcbiAgYnVpbGRUb29sc1ZlcnNpb246IG51bGwsXG4gIGFsbG93T2ZmbGluZURldmljZXM6IGZhbHNlLFxuICBhbGxvd0RlbGF5QWRiOiB0cnVlLFxufTtcblxuY2xhc3MgQURCIHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0cyk7XG4gICAgXy5kZWZhdWx0c0RlZXAodGhpcywgXy5jbG9uZURlZXAoREVGQVVMVF9PUFRTKSk7XG5cbiAgICBpZiAob3B0cy5yZW1vdGVBZGJIb3N0KSB7XG4gICAgICB0aGlzLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3MucHVzaCgnLUgnLCBvcHRzLnJlbW90ZUFkYkhvc3QpO1xuICAgICAgdGhpcy5hZGJIb3N0ID0gb3B0cy5yZW1vdGVBZGJIb3N0O1xuICAgIH1cbiAgICAvLyBUT0RPIGZpZ3VyZSBvdXQgd2h5IHdlIGhhdmUgdGhpcyBvcHRpb24gYXMgaXQgZG9lcyBub3QgYXBwZWFyIHRvIGJlXG4gICAgLy8gdXNlZCBhbnl3aGVyZS4gUHJvYmFibHkgZGVwcmVjYXRlIGluIGZhdm9yIG9mIHNpbXBsZSBvcHRzLmFkYlBvcnRcbiAgICBpZiAob3B0cy5yZW1vdGVBZGJQb3J0KSB7XG4gICAgICB0aGlzLmFkYlBvcnQgPSBvcHRzLnJlbW90ZUFkYlBvcnQ7XG4gICAgfVxuICAgIHRoaXMuZXhlY3V0YWJsZS5kZWZhdWx0QXJncy5wdXNoKCctUCcsIHRoaXMuYWRiUG9ydCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIGBBREJgIHRoYXQgaW5oZXJpdHMgY29uZmlndXJhdGlvbiBmcm9tIHRoaXMgYEFEQmAgaW5zdGFuY2UuXG4gICAqIFRoaXMgYXZvaWRzIHRoZSBuZWVkIHRvIGNhbGwgYEFEQi5jcmVhdGVBREIoKWAgbXVsdGlwbGUgdGltZXMuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gQWRkaXRpb25hbCBvcHRpb25zIG1hcHBpbmcgdG8gcGFzcyB0byB0aGUgYEFEQmAgY29uc3RydWN0b3IuXG4gICAqIEByZXR1cm5zIHtBREJ9IFRoZSByZXN1bHRpbmcgY2xhc3MgaW5zdGFuY2UuXG4gICAqL1xuICBjbG9uZSAob3B0cyA9IHt9KSB7XG4gICAgY29uc3Qgb3JpZ2luYWxPcHRpb25zID0gXy5jbG9uZURlZXAoXy5waWNrKHRoaXMsIE9iamVjdC5rZXlzKERFRkFVTFRfT1BUUykpKTtcbiAgICBjb25zdCBjbG9uZU9wdGlvbnMgPSBfLmRlZmF1bHRzRGVlcChvcHRzLCBvcmlnaW5hbE9wdGlvbnMpO1xuXG4gICAgLy8gUmVzZXQgZGVmYXVsdCBhcmd1bWVudHMgY3JlYXRlZCBpbiB0aGUgY29uc3RydWN0b3IuXG4gICAgLy8gV2l0aG91dCB0aGlzIGNvZGUsIC1IIGFuZCAtUCBjYW4gYmUgaW5qZWN0ZWQgaW50byBkZWZhdWx0QXJncyBtdWx0aXBsZSB0aW1lcy5cbiAgICBjb25zdCBkZWZhdWx0QXJncyA9IGNsb25lT3B0aW9ucy5leGVjdXRhYmxlLmRlZmF1bHRBcmdzO1xuICAgIGlmIChjbG9uZU9wdGlvbnMucmVtb3RlQWRiSG9zdCAmJiBkZWZhdWx0QXJncy5pbmNsdWRlcygnLUgnKSkge1xuICAgICAgZGVmYXVsdEFyZ3Muc3BsaWNlKGRlZmF1bHRBcmdzLmluZGV4T2YoJy1IJyksIDIpO1xuICAgIH1cbiAgICBpZiAoZGVmYXVsdEFyZ3MuaW5jbHVkZXMoJy1QJykpIHtcbiAgICAgIGRlZmF1bHRBcmdzLnNwbGljZShkZWZhdWx0QXJncy5pbmRleE9mKCctUCcpLCAyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFEQihjbG9uZU9wdGlvbnMpO1xuICB9XG59XG5cbkFEQi5jcmVhdGVBREIgPSBhc3luYyBmdW5jdGlvbiBjcmVhdGVBREIgKG9wdHMpIHtcbiAgY29uc3QgYWRiID0gbmV3IEFEQihvcHRzKTtcbiAgYWRiLnNka1Jvb3QgPSBhd2FpdCByZXF1aXJlU2RrUm9vdChhZGIuc2RrUm9vdCk7XG4gIGF3YWl0IGFkYi5nZXRBZGJXaXRoQ29ycmVjdEFkYlBhdGgoKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBhZGIuYWRiRXhlYyhbJ3N0YXJ0LXNlcnZlciddKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy53YXJuKGUuc3RkZXJyIHx8IGUubWVzc2FnZSk7XG4gIH1cbiAgcmV0dXJuIGFkYjtcbn07XG5cbi8vIGFkZCBhbGwgdGhlIG1ldGhvZHMgdG8gdGhlIEFEQiBwcm90b3R5cGVcbmZvciAoY29uc3QgW2ZuTmFtZSwgZm5dIG9mIF8udG9QYWlycyhtZXRob2RzKSkge1xuICBBREIucHJvdG90eXBlW2ZuTmFtZV0gPSBmbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQURCO1xuZXhwb3J0IHsgQURCLCBERUZBVUxUX0FEQl9QT1JULCBnZXRBbmRyb2lkQmluYXJ5UGF0aCwgZ2V0U2RrUm9vdEZyb21FbnYgfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxHQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxNQUFBLEdBQUFDLHVCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBSSxRQUFBLEdBQUFKLE9BQUE7QUFHQSxJQUFBSyxPQUFBLEdBQUFOLHNCQUFBLENB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