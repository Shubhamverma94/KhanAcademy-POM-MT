{"version":3,"file":"adb-emu-commands.js","names":["_logger","_interopRequireDefault","require","_helpers","_lodash","_net","_support","_bluebird","_path","_ini","PHONE_NUMBER_PATTERN","emuMethods","POWER_AC_STATES","Object","freeze","POWER_AC_ON","POWER_AC_OFF","GSM_CALL_ACTIONS","GSM_CALL","GSM_ACCEPT","GSM_CANCEL","GSM_HOLD","GSM_VOICE_STATES","GSM_VOICE_UNREGISTERED","GSM_VOICE_HOME","GSM_VOICE_ROAMING","GSM_VOICE_SEARCHING","GSM_VOICE_DENIED","GSM_VOICE_OFF","GSM_VOICE_ON","GSM_SIGNAL_STRENGTHS","NETWORK_SPEED","GSM","SCSD","GPRS","EDGE","UMTS","HSDPA","LTE","EVDO","FULL","SENSORS","ACCELERATION","GYROSCOPE","MAGNETIC_FIELD","ORIENTATION","TEMPERATURE","PROXIMITY","LIGHT","PRESSURE","HUMIDITY","MAGNETIC_FIELD_UNCALIBRATED","GYROSCOPE_UNCALIBRATED","HINGE_ANGLE0","HINGE_ANGLE1","HINGE_ANGLE2","HEART_RATE","RGBC_LIGHT","listEmulators","avdsRoot","process","env","ANDROID_AVD_HOME","dirExists","getAvdConfigPaths","log","warn","prefsRoot","getAndroidPrefsRoot","path","resolve","debug","configs","fs","glob","cwd","absolute","map","confPath","avdName","basename","split","slice","join","name","config","filter","_","trim","isEmulatorConnected","emulators","getConnectedEmulators","find","x","udid","curDeviceId","verifyEmulatorConnected","Error","fingerprint","fingerprintId","level","getApiLevel","adbExecEmu","rotate","powerAC","state","values","indexOf","TypeError","sensorSet","sensor","value","includes","isNil","powerCapacity","percent","parseInt","isNaN","powerOFF","sendSMS","phoneNumber","message","replace","test","gsmCall","action","gsmSignal","strength","info","gsmVoice","networkSpeed","speed","execEmuConsoleCommand","execTelnet","cmd","opts","port","portMatch","exec","host","execTimeout","connTimeout","initTimeout","resetTelnetAuthToken","okFlag","nokFlag","eol","client","net","connect","B","reject","connTimeoutObj","setTimeout","execTimeoutObj","initTimeoutObj","isCommandSent","serverResponse","once","e","clearTimeout","on","chunk","push","output","Buffer","concat","toString","cmdStr","isArray","util","quote","write","end","outputArr","length","last","getEmuVersionInfo","propsPath","sdkRoot","exists","content","readFile","revisionMatch","result","revision","buildIdMatch","buildId","getEmuImageProperties","avds","avd","msg","isEmpty","ini","parse","checkAvdExist","some","_default","exports","default"],"sources":["../../../lib/tools/adb-emu-commands.js"],"sourcesContent":["import log from '../logger.js';\nimport { getAndroidPrefsRoot, dirExists } from '../helpers';\nimport _ from 'lodash';\nimport net from 'net';\nimport { util, fs } from '@appium/support';\nimport B from 'bluebird';\nimport path from 'path';\nimport ini from 'ini';\n\nconst PHONE_NUMBER_PATTERN = /^[+]?[(]?[0-9]*[)]?[-\\s.]?[0-9]*[-\\s.]?[0-9]{2,}$/im;\n\nconst emuMethods = {};\nemuMethods.POWER_AC_STATES = Object.freeze({\n  POWER_AC_ON: 'on',\n  POWER_AC_OFF: 'off'\n});\nemuMethods.GSM_CALL_ACTIONS = Object.freeze({\n  GSM_CALL: 'call',\n  GSM_ACCEPT: 'accept',\n  GSM_CANCEL: 'cancel',\n  GSM_HOLD: 'hold'\n});\nemuMethods.GSM_VOICE_STATES = Object.freeze({\n  GSM_VOICE_UNREGISTERED: 'unregistered',\n  GSM_VOICE_HOME: 'home',\n  GSM_VOICE_ROAMING: 'roaming',\n  GSM_VOICE_SEARCHING: 'searching',\n  GSM_VOICE_DENIED: 'denied',\n  GSM_VOICE_OFF: 'off',\n  GSM_VOICE_ON: 'on'\n});\nemuMethods.GSM_SIGNAL_STRENGTHS = [0, 1, 2, 3, 4];\n\nemuMethods.NETWORK_SPEED = Object.freeze({\n  GSM: 'gsm', // GSM/CSD (up: 14.4, down: 14.4).\n  SCSD: 'scsd', // HSCSD (up: 14.4, down: 57.6).\n  GPRS: 'gprs', // GPRS (up: 28.8, down: 57.6).\n  EDGE: 'edge', // EDGE/EGPRS (up: 473.6, down: 473.6).\n  UMTS: 'umts', // UMTS/3G (up: 384.0, down: 384.0).\n  HSDPA: 'hsdpa', // HSDPA (up: 5760.0, down: 13,980.0).\n  LTE: 'lte', // LTE (up: 58,000, down: 173,000).\n  EVDO: 'evdo', // EVDO (up: 75,000, down: 280,000).\n  FULL: 'full' // No limit, the default (up: 0.0, down: 0.0).\n});\n\nemuMethods.SENSORS = Object.freeze({\n  ACCELERATION: 'acceleration',\n  GYROSCOPE: 'gyroscope',\n  MAGNETIC_FIELD: 'magnetic-field',\n  ORIENTATION: 'orientation',\n  TEMPERATURE: 'temperature',\n  PROXIMITY: 'proximity',\n  LIGHT: 'light',\n  PRESSURE: 'pressure',\n  HUMIDITY: 'humidity',\n  MAGNETIC_FIELD_UNCALIBRATED: 'magnetic-field-uncalibrated',\n  GYROSCOPE_UNCALIBRATED: 'gyroscope-uncalibrated',\n  HINGE_ANGLE0: 'hinge-angle0',\n  HINGE_ANGLE1: 'hinge-angle1',\n  HINGE_ANGLE2: 'hinge-angle2',\n  HEART_RATE: 'heart-rate',\n  RGBC_LIGHT: 'rgbc-light',\n});\n\n/**\n * @typedef {Object} EmuInfo\n * @property {string} name Emulator name, for example `Pixel_XL_API_30`\n * @property {string} config Full path to the emulator config .ini file,\n * for example `/Users/user/.android/avd/Pixel_XL_API_30.ini`\n */\n\n/**\n * Retrieves the list of available Android emulators\n *\n * @returns {Array<EmuInfo>}\n */\nasync function listEmulators () {\n  let avdsRoot = process.env.ANDROID_AVD_HOME;\n  if (await dirExists(avdsRoot)) {\n    return await getAvdConfigPaths(avdsRoot);\n  }\n\n  if (avdsRoot) {\n    log.warn(`The value of the ANDROID_AVD_HOME environment variable '${avdsRoot}' is not an existing directory`);\n  }\n\n  const prefsRoot = await getAndroidPrefsRoot();\n  if (!prefsRoot) {\n    return [];\n  }\n\n  avdsRoot = path.resolve(prefsRoot, 'avd');\n  if (!await dirExists(avdsRoot)) {\n    log.debug(`Virtual devices config root '${avdsRoot}' is not an existing directory`);\n    return [];\n  }\n\n  return await getAvdConfigPaths(avdsRoot);\n}\n\n/**\n * Get configuration paths of all virtual devices\n *\n * @param {string} avdsRoot Path to the directory that contains the AVD .ini files\n * @returns {Array<EmuInfo>}\n */\nasync function getAvdConfigPaths (avdsRoot) {\n  const configs = await fs.glob('*.ini', {\n    cwd: avdsRoot,\n    absolute: true,\n  });\n  return configs.map((confPath) => {\n    const avdName = path.basename(confPath).split('.').slice(0, -1).join('.');\n    return {name: avdName, config: confPath};\n  }).filter(({name}) => _.trim(name));\n}\n\n/**\n * Check the emulator state.\n *\n * @return {boolean} True if Emulator is visible to adb.\n */\nemuMethods.isEmulatorConnected = async function isEmulatorConnected () {\n  let emulators = await this.getConnectedEmulators();\n  return !!_.find(emulators, (x) => x && x.udid === this.curDeviceId);\n};\n\n/**\n * Verify the emulator is connected.\n *\n * @throws {error} If Emulator is not visible to adb.\n */\nemuMethods.verifyEmulatorConnected = async function verifyEmulatorConnected () {\n  if (!(await this.isEmulatorConnected())) {\n    throw new Error(`The emulator \"${this.curDeviceId}\" was unexpectedly disconnected`);\n  }\n};\n\n/**\n * Emulate fingerprint touch event on the connected emulator.\n *\n * @param {string} fingerprintId - The ID of the fingerprint.\n */\nemuMethods.fingerprint = async function fingerprint (fingerprintId) {\n  if (!fingerprintId) {\n    throw new Error('Fingerprint id parameter must be defined');\n  }\n  // the method used only works for API level 23 and above\n  let level = await this.getApiLevel();\n  if (level < 23) {\n    throw new Error(`Device API Level must be >= 23. Current Api level '${level}'`);\n  }\n  await this.adbExecEmu(['finger', 'touch', fingerprintId]);\n};\n\n/**\n * Change the display orientation on the connected emulator.\n * The orientation is changed (PI/2 is added) every time\n * this method is called.\n */\nemuMethods.rotate = async function rotate () {\n  await this.adbExecEmu(['rotate']);\n};\n\n/**\n * Emulate power state change on the connected emulator.\n *\n * @param {string} state ['on'] - Either 'on' or 'off'.\n */\nemuMethods.powerAC = async function powerAC (state = 'on') {\n  if (_.values(emuMethods.POWER_AC_STATES).indexOf(state) === -1) {\n    throw new TypeError(`Wrong power AC state sent '${state}'. `\n      + `Supported values: ${_.values(emuMethods.POWER_AC_STATES)}]`);\n  }\n  await this.adbExecEmu(['power', 'ac', state]);\n};\n\n/**\n * Emulate sensors values on the connected emulator.\n *\n * @param {string} sensor - Sensor type declared in SENSORS items.\n * @param {number|string} value  - Number to set as the sensor value.\n * @throws {Error} - If sensor type or sensor value is not defined\n */\nemuMethods.sensorSet = async function sensorSet (sensor, value) {\n  if (!_.includes(emuMethods.SENSORS, sensor)) {\n    throw new TypeError(`Unsupported sensor sent '${sensor}'. `\n      + `Supported values: ${_.values(emuMethods.SENSORS)}]`);\n  }\n  if (_.isNil(value) || value === '') {\n    throw new TypeError(`Missing/invalid sensor value argument. `\n      + `You need to provide a valid value to set to the sensor in `\n      + `format <value-a>[:<value-b>[:<value-c>[...]]].`);\n  }\n  await this.adbExecEmu(['sensor', 'set', sensor, value]);\n};\n\n/**\n * Emulate power capacity change on the connected emulator.\n *\n * @param {string|number} percent [100] - Percentage value in range [0, 100].\n */\nemuMethods.powerCapacity = async function powerCapacity (percent = 100) {\n  percent = parseInt(percent, 10);\n  if (isNaN(percent) || percent < 0 || percent > 100) {\n    throw new Error(`The percentage value should be valid integer between 0 and 100`);\n  }\n  await this.adbExecEmu(['power', 'capacity', percent]);\n};\n\n/**\n * Emulate power off event on the connected emulator.\n */\nemuMethods.powerOFF = async function powerOFF () {\n  await this.powerAC(emuMethods.POWER_AC_STATES.POWER_AC_OFF);\n  await this.powerCapacity(0);\n};\n\n/**\n * Emulate send SMS event on the connected emulator.\n *\n * @param {string|number} phoneNumber - The phone number of message sender.\n * @param {string} message [''] - The message content.\n * @throws {error} If phone number has invalid format.\n */\nemuMethods.sendSMS = async function sendSMS (phoneNumber, message = '') {\n  message = message.trim();\n  if (message === '') {\n    throw new Error('Sending an SMS requires a message');\n  }\n  phoneNumber = `${phoneNumber}`.replace(/\\s*/, '');\n  if (!PHONE_NUMBER_PATTERN.test(phoneNumber)) {\n    throw new Error(`Invalid sendSMS phoneNumber param ${phoneNumber}`);\n  }\n  await this.adbExecEmu(['sms', 'send', phoneNumber, message]);\n};\n\n/**\n * Emulate GSM call event on the connected emulator.\n *\n * @param {string|number} phoneNumber - The phone number of the caller.\n * @param {string} action [''] - One of available GSM call actions.\n * @throws {error} If phone number has invalid format.\n * @throws {error} If _action_ value is invalid.\n */\nemuMethods.gsmCall = async function gsmCall (phoneNumber, action = '') {\n  if (_.values(emuMethods.GSM_CALL_ACTIONS).indexOf(action) === -1) {\n    throw new Error(`Invalid gsm action param ${action}. Supported values: ${_.values(emuMethods.GSM_CALL_ACTIONS)}`);\n  }\n  phoneNumber = `${phoneNumber}`.replace(/\\s*/, '');\n  if (!PHONE_NUMBER_PATTERN.test(phoneNumber)) {\n    throw new Error(`Invalid gsmCall phoneNumber param ${phoneNumber}`);\n  }\n  await this.adbExecEmu(['gsm', action, phoneNumber]);\n};\n\n/**\n * Emulate GSM signal strength change event on the connected emulator.\n *\n * @param {string|number} strength [4] - A number in range [0, 4];\n * @throws {error} If _strength_ value is invalid.\n */\nemuMethods.gsmSignal = async function gsmSignal (strength = 4) {\n  strength = parseInt(strength, 10);\n  if (emuMethods.GSM_SIGNAL_STRENGTHS.indexOf(strength) === -1) {\n    throw new Error(`Invalid signal strength param ${strength}. Supported values: ${_.values(emuMethods.GSM_SIGNAL_STRENGTHS)}`);\n  }\n  log.info('gsm signal-profile <strength> changes the reported strength on next (15s) update.');\n  await this.adbExecEmu(['gsm', 'signal-profile', strength]);\n};\n\n/**\n * Emulate GSM voice event on the connected emulator.\n *\n * @param {string} state ['on'] - Either 'on' or 'off'.\n * @throws {error} If _state_ value is invalid.\n */\nemuMethods.gsmVoice = async function gsmVoice (state = 'on') {\n  // gsm voice <state> allows you to change the state of your GPRS connection\n  if (_.values(emuMethods.GSM_VOICE_STATES).indexOf(state) === -1) {\n    throw new Error(`Invalid gsm voice state param ${state}. Supported values: ${_.values(emuMethods.GSM_VOICE_STATES)}`);\n  }\n  await this.adbExecEmu(['gsm', 'voice', state]);\n};\n\n/**\n * Emulate network speed change event on the connected emulator.\n *\n * @param {string} speed ['full'] - One of possible NETWORK_SPEED values.\n * @throws {error} If _speed_ value is invalid.\n */\nemuMethods.networkSpeed = async function networkSpeed (speed = 'full') {\n  // network speed <speed> allows you to set the network speed emulation.\n  if (_.values(emuMethods.NETWORK_SPEED).indexOf(speed) === -1) {\n    throw new Error(`Invalid network speed param ${speed}. Supported values: ${_.values(emuMethods.NETWORK_SPEED)}`);\n  }\n  await this.adbExecEmu(['network', 'speed', speed]);\n};\n\n/**\n * @typedef {Object} ExecTelnetOptions\n * @property {number} execTimeout [60000] A timeout used to wait for a server\n * reply to the given command\n * @property {number} connTimeout [5000] Console connection timeout in milliseconds\n * @property {number} initTimeout [5000] Telnet console initialization timeout\n * in milliseconds (the time between connection happens and the command prompt\n * is available)\n * @property {?number|string} port The emulator port number. The method will try to parse it\n * from the current device identifier if unset\n */\n\n/**\n * Executes a command through emulator telnet console interface and returns its output\n *\n * @param {Array<string>|string} cmd - The actual command to execute. See\n * https://developer.android.com/studio/run/emulator-console for more details\n * on available commands\n * @param {ExecTelnetOptions} opts\n * @returns {string} The command output\n * @throws {Error} If there was an error while connecting to the Telnet console\n * or if the given command returned non-OK response\n */\nemuMethods.execEmuConsoleCommand = async function execTelnet (cmd, opts = {}) {\n  let port = parseInt(opts.port, 10);\n  if (!port) {\n    const portMatch = /emulator-(\\d+)/i.exec(this.curDeviceId);\n    if (!portMatch) {\n      throw new Error(`Cannot parse the console port number from the device identifier '${this.curDeviceId}'. ` +\n        `Is it an emulator?`);\n    }\n    port = parseInt(portMatch[1], 10);\n  }\n  const host = '127.0.0.1';\n  const {\n    execTimeout = 60000,\n    connTimeout = 5000,\n    initTimeout = 5000,\n  } = opts;\n  await this.resetTelnetAuthToken();\n\n  const okFlag = /^OK$/m;\n  const nokFlag = /^KO\\b/m;\n  const eol = '\\r\\n';\n  const client = net.connect({\n    host,\n    port,\n  });\n\n  return await new B((resolve, reject) => {\n    const connTimeoutObj = setTimeout(\n      () => reject(new Error(`Cannot connect to the Emulator console at ${host}:${port} ` +\n        `after ${connTimeout}ms`)), connTimeout);\n    let execTimeoutObj;\n    let initTimeoutObj;\n    let isCommandSent = false;\n    let serverResponse = [];\n\n    client.once('error', (e) => {\n      clearTimeout(connTimeoutObj);\n      reject(new Error(`Cannot connect to the Emulator console at ${host}:${port}. ` +\n        `Original error: ${e.message}`));\n    });\n\n    client.once('connect', () => {\n      clearTimeout(connTimeoutObj);\n      initTimeoutObj = setTimeout(\n        () => reject(new Error(`Did not get the initial response from the Emulator console at ${host}:${port} ` +\n          `after ${initTimeout}ms`)), initTimeout);\n    });\n\n    client.on('data', (chunk) => {\n      serverResponse.push(chunk);\n      const output = Buffer.concat(serverResponse).toString('utf8').trim();\n      if (okFlag.test(output)) {\n        // The initial incoming data chunk confirms the interface is ready for input\n        if (!isCommandSent) {\n          clearTimeout(initTimeoutObj);\n          serverResponse = [];\n          const cmdStr = _.isArray(cmd) ? util.quote(cmd) : `${cmd}`;\n          log.debug(`Executing Emulator console command: ${cmdStr}`);\n          client.write(cmdStr);\n          client.write(eol);\n          isCommandSent = true;\n          execTimeoutObj = setTimeout(\n            () => reject(new Error(`Did not get any response from the Emulator console at ${host}:${port} ` +\n              `to '${cmd}' command after ${execTimeout}ms`)), execTimeout);\n          return;\n        }\n        clearTimeout(execTimeoutObj);\n        client.end();\n        const outputArr = output.split(eol);\n        // remove the redundant OK flag from the resulting command output\n        return resolve(outputArr.slice(0, outputArr.length - 1).join('\\n').trim());\n      } else if (nokFlag.test(output)) {\n        clearTimeout(initTimeoutObj);\n        clearTimeout(execTimeoutObj);\n        client.end();\n        const outputArr = output.split(eol);\n        return reject(_.trim(_.last(outputArr)));\n      }\n    });\n  });\n};\n\n/**\n * @typedef {Object} EmuVersionInfo\n * @property {?string} revision The actual revision number, for example '30.0.5'\n * @property {?number} buildId The build identifier, for example 6306047\n */\n\n/**\n * Retrieves emulator version from the file system\n *\n * @returns {EmuVersionInfo} If no version info could be parsed then an empty\n * object is returned\n */\nemuMethods.getEmuVersionInfo = async function getEmuVersionInfo () {\n  const propsPath = path.join(this.sdkRoot, 'emulator', 'source.properties');\n  if (!await fs.exists(propsPath)) {\n    return {};\n  }\n\n  const content = await fs.readFile(propsPath, 'utf8');\n  const revisionMatch = /^Pkg\\.Revision=([\\d.]+)$/m.exec(content);\n  const result = {};\n  if (revisionMatch) {\n    result.revision = revisionMatch[1];\n  }\n  const buildIdMatch = /^Pkg\\.BuildId=(\\d+)$/m.exec(content);\n  if (buildIdMatch) {\n    result.buildId = parseInt(buildIdMatch[1], 10);\n  }\n  return result;\n};\n\n/**\n * Retrieves emulator image properties from the local file system\n *\n * @param {string} avdName Emulator name. Should NOT start with '@' character\n * @throws {Error} if there was a failure while extracting the properties\n * @returns {Object} The content of emulator image properties file.\n * Usually this configuration .ini file has the following content:\n *   avd.ini.encoding=UTF-8\n *   path=/Users/username/.android/avd/Pixel_XL_API_30.avd\n *   path.rel=avd/Pixel_XL_API_30.avd\n *   target=android-30\n */\nemuMethods.getEmuImageProperties = async function getEmuImageProperties (avdName) {\n  const avds = await listEmulators();\n  const avd = avds.find(({name}) => name === avdName);\n  if (!avd) {\n    let msg = `Cannot find '${avdName}' emulator. `;\n    if (_.isEmpty(avds)) {\n      msg += `No emulators have been detected on your system`;\n    } else {\n      msg += `Available avd names are: ${avds.map(({name}) => name)}`;\n    }\n    throw new Error(msg);\n  }\n  return ini.parse(await fs.readFile(avd.config, 'utf8'));\n};\n\n/**\n * Check if given emulator exists in the list of available avds.\n *\n * @param {string} avdName - The name of emulator to verify for existence.\n * Should NOT start with '@' character\n * @throws {Error} If the emulator with given name does not exist.\n */\nemuMethods.checkAvdExist = async function checkAvdExist (avdName) {\n  const avds = await listEmulators();\n  if (!avds.some(({name}) => name === avdName)) {\n    let msg = `Avd '${avdName}' is not available. `;\n    if (_.isEmpty(avds)) {\n      msg += `No emulators have been detected on your system`;\n    } else {\n      msg += `Please select your avd name from one of these: '${avds.map(({name}) => name)}'`;\n    }\n    throw new Error(msg);\n  }\n  return true;\n};\n\nexport default emuMethods;\n"],"mappings":"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"}