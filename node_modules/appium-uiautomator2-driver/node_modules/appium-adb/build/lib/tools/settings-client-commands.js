"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _logger = _interopRequireDefault(require("../logger.js"));
var _helpers = require("../helpers.js");
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("@appium/support");
var _asyncbox = require("asyncbox");
var _utf = require("utf7");
var _teen_process = require("teen_process");
var _bluebird = _interopRequireDefault(require("bluebird"));
const SETTINGS_HELPER_ID = 'io.appium.settings';
const SETTINGS_HELPER_MAIN_ACTIVITY = '.Settings';
const WIFI_CONNECTION_SETTING_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.WiFiConnectionSettingReceiver`;
const WIFI_CONNECTION_SETTING_ACTION = `${SETTINGS_HELPER_ID}.wifi`;
const DATA_CONNECTION_SETTING_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.DataConnectionSettingReceiver`;
const DATA_CONNECTION_SETTING_ACTION = `${SETTINGS_HELPER_ID}.data_connection`;
const ANIMATION_SETTING_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.AnimationSettingReceiver`;
const ANIMATION_SETTING_ACTION = `${SETTINGS_HELPER_ID}.animation`;
const LOCALE_SETTING_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.LocaleSettingReceiver`;
const LOCALE_SETTING_ACTION = `${SETTINGS_HELPER_ID}.locale`;
const LOCATION_SERVICE = `${SETTINGS_HELPER_ID}/.LocationService`;
const LOCATION_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.LocationInfoReceiver`;
const LOCATION_RETRIEVAL_ACTION = `${SETTINGS_HELPER_ID}.location`;
const CLIPBOARD_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.ClipboardReceiver`;
const CLIPBOARD_RETRIEVAL_ACTION = `${SETTINGS_HELPER_ID}.clipboard.get`;
const NOTIFICATIONS_RETRIEVAL_ACTION = `${SETTINGS_HELPER_ID}.notifications`;
const SMS_LIST_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.SmsReader`;
const SMS_LIST_RETRIEVAL_ACTION = `${SETTINGS_HELPER_ID}.sms.read`;
const MEDIA_SCAN_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.MediaScannerReceiver`;
const MEDIA_SCAN_ACTION = `${SETTINGS_HELPER_ID}.scan_media`;
const APPIUM_IME = `${SETTINGS_HELPER_ID}/.AppiumIME`;
const UNICODE_IME = `${SETTINGS_HELPER_ID}/.UnicodeIME`;
const DEFAULT_SATELLITES_COUNT = 12;
const DEFAULT_ALTITUDE = 0.0;
const LOCATION_TRACKER_TAG = 'LocationTracker';
const GPS_CACHE_REFRESHED_LOGS = ['The current location has been successfully retrieved from Play Services', 'The current location has been successfully retrieved from Location Manager'];
const GPS_COORDINATES_PATTERN = /data="(-?[\d.]+)\s+(-?[\d.]+)\s+(-?[\d.]+)"/;
const commands = {};
commands.requireRunningSettingsApp = async function requireRunningSettingsApp(opts = {}) {
  if (await this.processExists(SETTINGS_HELPER_ID)) {
    return this;
  }
  _logger.default.debug('Starting Appium Settings app');
  const {
    timeout = 5000,
    shouldRestoreCurrentApp = false
  } = opts;
  let appPackage;
  if (shouldRestoreCurrentApp) {
    try {
      ({
        appPackage
      } = await this.getFocusedPackageAndActivity());
    } catch (e) {
      _logger.default.warn(`The current application can not be restored: ${e.message}`);
    }
  }
  await this.startApp({
    pkg: SETTINGS_HELPER_ID,
    activity: SETTINGS_HELPER_MAIN_ACTIVITY,
    action: 'android.intent.action.MAIN',
    category: 'android.intent.category.LAUNCHER',
    stopApp: false,
    waitForLaunch: false
  });
  try {
    await (0, _asyncbox.waitForCondition)(async () => await this.processExists(SETTINGS_HELPER_ID), {
      waitMs: timeout,
      intervalMs: 300
    });
    if (shouldRestoreCurrentApp && appPackage) {
      try {
        await this.activateApp(appPackage);
      } catch (e) {
        _logger.default.warn(`The current application can not be restored: ${e.message}`);
      }
    }
    return this;
  } catch (err) {
    throw new Error(`Appium Settings app is not running after ${timeout}ms`);
  }
};
commands.setWifiState = async function setWifiState(on, isEmulator = false) {
  if (isEmulator) {
    await this.shell(['svc', 'wifi', on ? 'enable' : 'disable'], {
      privileged: (await this.getApiLevel()) < 26
    });
    return;
  }
  if ((await this.getApiLevel()) < 30) {
    await this.requireRunningSettingsApp({
      shouldRestoreCurrentApp: true
    });
    await this.shell(['am', 'broadcast', '-a', WIFI_CONNECTION_SETTING_ACTION, '-n', WIFI_CONNECTION_SETTING_RECEIVER, '--es', 'setstatus', on ? 'enable' : 'disable']);
    return;
  }
  await this.shell(['cmd', '-w', 'wifi', 'set-wifi-enabled', on ? 'enabled' : 'disabled']);
};
commands.setDataState = async function setDataState(on, isEmulator = false) {
  if (isEmulator) {
    await this.shell(['svc', 'data', on ? 'enable' : 'disable'], {
      privileged: (await this.getApiLevel()) < 26
    });
    return;
  }
  if ((await this.getApiLevel()) < 30) {
    await this.requireRunningSettingsApp({
      shouldRestoreCurrentApp: true
    });
    await this.shell(['am', 'broadcast', '-a', DATA_CONNECTION_SETTING_ACTION, '-n', DATA_CONNECTION_SETTING_RECEIVER, '--es', 'setstatus', on ? 'enable' : 'disable']);
    return;
  }
  await this.shell(['cmd', 'phone', 'data', on ? 'enable' : 'disable']);
};
commands.setAnimationState = async function setAnimationState(on) {
  await this.shell(['am', 'broadcast', '-a', ANIMATION_SETTING_ACTION, '-n', ANIMATION_SETTING_RECEIVER, '--es', 'setstatus', on ? 'enable' : 'disable']);
};
commands.setDeviceSysLocaleViaSettingApp = async function setDeviceSysLocaleViaSettingApp(language, country, script = null) {
  const params = ['am', 'broadcast', '-a', LOCALE_SETTING_ACTION, '-n', LOCALE_SETTING_RECEIVER, '--es', 'lang', language.toLowerCase(), '--es', 'country', country.toUpperCase()];
  if (script) {
    params.push('--es', 'script', script);
  }
  await this.shell(params);
};
commands.setGeoLocation = async function setGeoLocation(location, isEmulator = false) {
  const formatLocationValue = (valueName, isRequired = true) => {
    if (!_support.util.hasValue(location[valueName])) {
      if (isRequired) {
        throw new Error(`${valueName} must be provided`);
      }
      return null;
    }
    const floatValue = parseFloat(location[valueName]);
    if (!isNaN(floatValue)) {
      return `${_lodash.default.ceil(floatValue, 5)}`;
    }
    if (isRequired) {
      throw new Error(`${valueName} is expected to be a valid float number. ` + `'${location[valueName]}' is given instead`);
    }
    return null;
  };
  const longitude = formatLocationValue('longitude');
  const latitude = formatLocationValue('latitude');
  const altitude = formatLocationValue('altitude', false);
  const speed = formatLocationValue('speed', false);
  if (isEmulator) {
    const args = [longitude, latitude];
    if (!_lodash.default.isNil(altitude)) {
      args.push(altitude);
    }
    const satellites = parseInt(location.satellites, 10);
    if (!Number.isNaN(satellites) && satellites > 0 && satellites <= 12) {
      if (args.length < 3) {
        args.push(`${DEFAULT_ALTITUDE}`);
      }
      args.push(`${satellites}`);
    }
    if (!_lodash.default.isNil(speed)) {
      if (args.length < 3) {
        args.push(`${DEFAULT_ALTITUDE}`);
      }
      if (args.length < 4) {
        args.push(`${DEFAULT_SATELLITES_COUNT}`);
      }
      args.push(speed);
    }
    await this.resetTelnetAuthToken();
    await this.adbExec(['emu', 'geo', 'fix', ...args]);
    await this.adbExec(['emu', 'geo', 'fix', ...args.map(arg => arg.replace('.', ','))]);
  } else {
    const args = ['am', (await this.getApiLevel()) >= 26 ? 'start-foreground-service' : 'startservice', '-e', 'longitude', longitude, '-e', 'latitude', latitude];
    if (_support.util.hasValue(altitude)) {
      args.push('-e', 'altitude', altitude);
    }
    if (_support.util.hasValue(speed)) {
      args.push('-e', 'speed', speed);
    }
    args.push(LOCATION_SERVICE);
    await this.shell(args);
  }
};
commands.getGeoLocation = async function getGeoLocation() {
  await this.requireRunningSettingsApp({
    shouldRestoreCurrentApp: true
  });
  let output;
  try {
    output = await this.shell(['am', 'broadcast', '-n', LOCATION_RECEIVER, '-a', LOCATION_RETRIEVAL_ACTION]);
  } catch (err) {
    throw new Error(`Cannot retrieve the current geo coordinates from the device. ` + `Make sure the Appium Settings application is up to date and has location permissions. Also the location ` + `services must be enabled on the device. Original error: ${err.stderr || err.stdout || err.message}`);
  }
  const match = GPS_COORDINATES_PATTERN.exec(output);
  if (!match) {
    throw new Error(`Cannot parse the actual location values from the command output: ${output}`);
  }
  const location = {
    latitude: match[1],
    longitude: match[2],
    altitude: match[3]
  };
  _logger.default.debug(`Got geo coordinates: ${JSON.stringify(location)}`);
  return location;
};
commands.refreshGeoLocationCache = async function refreshGeoLocationCache(timeoutMs = 20000) {
  await this.requireRunningSettingsApp({
    shouldRestoreCurrentApp: true
  });
  let logcatMonitor;
  let monitoringPromise;
  if (timeoutMs > 0) {
    const cmd = [...this.executable.defaultArgs, 'logcat', '-s', LOCATION_TRACKER_TAG];
    logcatMonitor = new _teen_process.SubProcess(this.executable.path, cmd);
    const timeoutErrorMsg = `The GPS cache has not been refreshed within ${timeoutMs}ms timeout. ` + `Please make sure the device under test has Appium Settings app installed and running. ` + `Also, it is required that the device has Google Play Services installed or is running ` + `Android 10+ otherwise.`;
    monitoringPromise = new _bluebird.default((resolve, reject) => {
      setTimeout(() => reject(new Error(timeoutErrorMsg)), timeoutMs);
      logcatMonitor.on('exit', () => reject(new Error(timeoutErrorMsg)));
      ['lines-stderr', 'lines-stdout'].map(evt => logcatMonitor.on(evt, lines => {
        if (lines.some(line => GPS_CACHE_REFRESHED_LOGS.some(x => line.includes(x)))) {
          resolve();
        }
      }));
    });
    await logcatMonitor.start(0);
  }
  try {
    await this.shell(['am', 'broadcast', '-n', LOCATION_RECEIVER, '-a', LOCATION_RETRIEVAL_ACTION, '--ez', 'forceUpdate', 'true']);
  } catch (err) {
    throw new Error(`Cannot refresh the GPS cache on the device. ` + `Make sure the Appium Settings application is up to date and has location permissions. Also the location ` + `services must be enabled on the device. Original error: ${err.stderr || err.stdout || err.message}`);
  }
  if (logcatMonitor && monitoringPromise) {
    const timer = new _support.timing.Timer().start();
    _logger.default.debug(`Waiting up to ${timeoutMs}ms for the GPS cache to be refreshed`);
    try {
      await monitoringPromise;
      _logger.default.info(`The GPS cache has been successfully refreshed after ` + `${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
    } finally {
      if (logcatMonitor.isRunning) {
        await logcatMonitor.stop();
      }
    }
  } else {
    _logger.default.info('The request to refresh the GPS cache has been sent. Skipping waiting for its result.');
  }
};
commands.performEditorAction = async function performEditorAction(action) {
  _logger.default.debug(`Performing editor action: ${action}`);
  await this.runInImeContext(APPIUM_IME, async () => await this.shell(['input', 'text', `/${action}/`]));
};
commands.getClipboard = async function getClipboard() {
  _logger.default.debug('Getting the clipboard content');
  await this.requireRunningSettingsApp({
    shouldRestoreCurrentApp: true
  });
  const retrieveClipboard = async () => await this.shell(['am', 'broadcast', '-n', CLIPBOARD_RECEIVER, '-a', CLIPBOARD_RETRIEVAL_ACTION]);
  let output;
  try {
    output = (await this.getApiLevel()) >= 29 ? await this.runInImeContext(APPIUM_IME, retrieveClipboard) : await retrieveClipboard();
  } catch (err) {
    throw new Error(`Cannot retrieve the current clipboard content from the device. ` + `Make sure the Appium Settings application is up to date. ` + `Original error: ${err.message}`);
  }
  const match = /data="([^"]*)"/.exec(output);
  if (!match) {
    throw new Error(`Cannot parse the actual cliboard content from the command output: ${output}`);
  }
  return _lodash.default.trim(match[1]);
};
commands.getNotifications = async function getNotifications() {
  _logger.default.debug('Retrieving notifications');
  await this.requireRunningSettingsApp({
    shouldRestoreCurrentApp: true
  });
  let output;
  try {
    output = await this.shell(['am', 'broadcast', '-a', NOTIFICATIONS_RETRIEVAL_ACTION]);
  } catch (err) {
    throw new Error(`Cannot retrieve notifications from the device. ` + `Make sure the Appium Settings application is installed and is up to date. ` + `Original error: ${err.message}`);
  }
  return (0, _helpers.parseJsonData)(output, 'notifications');
};
commands.getSmsList = async function getSmsList(opts = {}) {
  _logger.default.debug('Retrieving the recent SMS messages');
  await this.requireRunningSettingsApp({
    shouldRestoreCurrentApp: true
  });
  const args = ['am', 'broadcast', '-n', SMS_LIST_RECEIVER, '-a', SMS_LIST_RETRIEVAL_ACTION];
  if (opts.max) {
    args.push('--es', 'max', opts.max);
  }
  let output;
  try {
    output = await this.shell(args);
  } catch (err) {
    throw new Error(`Cannot retrieve SMS list from the device. ` + `Make sure the Appium Settings application is installed and is up to date. ` + `Original error: ${err.message}`);
  }
  return (0, _helpers.parseJsonData)(output, 'SMS list');
};
commands.typeUnicode = async function typeUnicode(text) {
  if (_lodash.default.isNil(text)) {
    return false;
  }
  text = `${text}`;
  _logger.default.debug(`Typing ${_support.util.pluralize('character', text.length, true)}`);
  if (!text) {
    return false;
  }
  await this.runInImeContext(UNICODE_IME, async () => await this.inputText(_utf.imap.encode(text)));
  return true;
};
commands.scanMedia = async function scanMedia(destination) {
  _logger.default.debug(`Scanning '${destination}' for media files`);
  await this.requireRunningSettingsApp({
    shouldRestoreCurrentApp: true
  });
  const output = await this.shell(['am', 'broadcast', '-n', MEDIA_SCAN_RECEIVER, '-a', MEDIA_SCAN_ACTION, '--es', 'path', destination]);
  if (!_lodash.default.includes(output, 'result=-1')) {
    throw new Error(`No media could be scanned at '${destination}'. ` + `Check the device logcat output for more details.`);
  }
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,