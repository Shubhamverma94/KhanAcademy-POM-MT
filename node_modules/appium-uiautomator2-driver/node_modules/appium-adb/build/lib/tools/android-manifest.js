"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _teen_process = require("teen_process");
var _logger = _interopRequireDefault(require("../logger.js"));
var _helpers = require("../helpers.js");
var _support = require("@appium/support");
var _lodash = _interopRequireDefault(require("lodash"));
var _path = _interopRequireDefault(require("path"));
var _adbkitApkreader = _interopRequireDefault(require("adbkit-apkreader"));
let manifestMethods = {};
manifestMethods.packageAndLaunchActivityFromManifest = async function packageAndLaunchActivityFromManifest(appPath) {
  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    appPath = await this.extractBaseApk(appPath);
  }
  let manifest;
  try {
    const apkReader = await _adbkitApkreader.default.open(appPath);
    manifest = await apkReader.readManifest();
  } catch (e) {
    _logger.default.debug(e);
    throw new Error(`Cannot extract a manifest from '${appPath}'. ` + `Is it a valid Android application?`);
  }
  const {
    pkg,
    activity
  } = (0, _helpers.parseManifest)(manifest);
  _logger.default.info(`Package name: '${pkg}'`);
  _logger.default.info(`Main activity name: '${activity}'`);
  return {
    apkPackage: pkg,
    apkActivity: activity
  };
};
manifestMethods.targetSdkVersionFromManifest = async function targetSdkVersionFromManifest(appPath) {
  _logger.default.debug(`Extracting target SDK version of '${appPath}'`);
  const originalAppPath = appPath;
  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    appPath = await this.extractBaseApk(appPath);
  }
  const getTargetSdkViaApkReader = async () => {
    const apkReader = await _adbkitApkreader.default.open(appPath);
    const manifest = await apkReader.readManifest();
    if (manifest.usesSdk && _lodash.default.isInteger(manifest.usesSdk.targetSdkVersion)) {
      return manifest.usesSdk.targetSdkVersion;
    }
    throw new Error('Cannot find the information about targetSdkVersion in the manifest');
  };
  const getTargetSdkViaAapt = async () => {
    await this.initAapt();
    const args = ['dump', 'badging', appPath];
    const {
      stdout
    } = await (0, _teen_process.exec)(this.binaries.aapt, args);
    const targetSdkVersion = /targetSdkVersion:'([^']+)'/g.exec(stdout);
    if (!targetSdkVersion) {
      _logger.default.debug(stdout);
      throw new Error('Cannot parse the command output');
    }
    return parseInt(targetSdkVersion[1], 10);
  };
  const versionGetters = [['ApkReader', getTargetSdkViaApkReader], ['aapt', getTargetSdkViaAapt]];
  for (const [toolName, versionGetter] of versionGetters) {
    try {
      return await versionGetter();
    } catch (e) {
      _logger.default.info(`Cannot extract targetSdkVersion of '${originalAppPath}' using ${toolName}. ` + `Original error: ${e.message}`);
    }
  }
  throw new Error(`Cannot extract the target SDK version number of '${originalAppPath}' using either of ` + `${JSON.stringify(versionGetters.map(pair => pair[0]))} tools. ` + `Check the server log for more details`);
};
manifestMethods.targetSdkVersionUsingPKG = async function targetSdkVersionUsingPKG(pkg, cmdOutput = null) {
  let stdout = cmdOutput || (await this.shell(['dumpsys', 'package', pkg]));
  let targetSdkVersion = new RegExp(/targetSdk=([^\s\s]+)/g).exec(stdout);
  if (targetSdkVersion && targetSdkVersion.length >= 2) {
    targetSdkVersion = targetSdkVersion[1];
  } else {
    targetSdkVersion = 0;
  }
  return parseInt(targetSdkVersion, 10);
};
manifestMethods.compileManifest = async function compileManifest(manifest, manifestPackage, targetPackage) {
  const {
    platform,
    platformPath
  } = await (0, _helpers.getAndroidPlatformAndPath)(this.sdkRoot);
  if (!platform) {
    throw new Error('Cannot compile the manifest. The required platform does not exist (API level >= 17)');
  }
  const resultPath = `${manifest}.apk`;
  const androidJarPath = _path.default.resolve(platformPath, 'android.jar');
  if (await _support.fs.exists(resultPath)) {
    await _support.fs.rimraf(resultPath);
  }
  try {
    await this.initAapt2();
    const args = ['link', '-o', resultPath, '--manifest', manifest, '--rename-manifest-package', manifestPackage, '--rename-instrumentation-target-package', targetPackage, '-I', androidJarPath, '-v'];
    _logger.default.debug(`Compiling the manifest using '${_support.util.quote([this.binaries.aapt2, ...args])}'`);
    await (0, _teen_process.exec)(this.binaries.aapt2, args);
  } catch (e) {
    _logger.default.debug('Cannot compile the manifest using aapt2. Defaulting to aapt. ' + `Original error: ${e.stderr || e.message}`);
    await this.initAapt();
    const args = ['package', '-M', manifest, '--rename-manifest-package', manifestPackage, '--rename-instrumentation-target-package', targetPackage, '-I', androidJarPath, '-F', resultPath, '-f'];
    _logger.default.debug(`Compiling the manifest using '${_support.util.quote([this.binaries.aapt, ...args])}'`);
    try {
      await (0, _teen_process.exec)(this.binaries.aapt, args);
    } catch (e1) {
      throw new Error(`Cannot compile the manifest. Original error: ${e1.stderr || e1.message}`);
    }
  }
  _logger.default.debug(`Compiled the manifest at '${resultPath}'`);
};
manifestMethods.insertManifest = async function insertManifest(manifest, srcApk, dstApk) {
  _logger.default.debug(`Inserting manifest '${manifest}', src: '${srcApk}', dst: '${dstApk}'`);
  await _support.zip.assertValidZip(srcApk);
  await (0, _helpers.unzipFile)(`${manifest}.apk`);
  const manifestName = _path.default.basename(manifest);
  try {
    await this.initAapt();
    await _support.fs.copyFile(srcApk, dstApk);
    _logger.default.debug('Moving manifest');
    try {
      await (0, _teen_process.exec)(this.binaries.aapt, ['remove', dstApk, manifestName]);
    } catch (ign) {}
    await (0, _teen_process.exec)(this.binaries.aapt, ['add', dstApk, manifestName], {
      cwd: _path.default.dirname(manifest)
    });
  } catch (e) {
    _logger.default.debug('Cannot insert manifest using aapt. Defaulting to zip. ' + `Original error: ${e.stderr || e.message}`);
    const tmpRoot = await _support.tempDir.openDir();
    try {
      _logger.default.debug(`Extracting the source apk at '${srcApk}'`);
      await _support.zip.extractAllTo(srcApk, tmpRoot);
      _logger.default.debug('Moving manifest');
      await _support.fs.mv(manifest, _path.default.resolve(tmpRoot, manifestName));
      _logger.default.debug(`Collecting the destination apk at '${dstApk}'`);
      await _support.zip.toArchive(dstApk, {
        cwd: tmpRoot
      });
    } finally {
      await _support.fs.rimraf(tmpRoot);
    }
  }
  _logger.default.debug(`Manifest insertion into '${dstApk}' is completed`);
};
manifestMethods.hasInternetPermissionFromManifest = async function hasInternetPermissionFromManifest(appPath) {
  _logger.default.debug(`Checking if '${appPath}' requires internet access permission in the manifest`);
  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    appPath = await this.extractBaseApk(appPath);
  }
  const apkReader = await _adbkitApkreader.default.open(appPath);
  const manifest = await apkReader.readManifest();
  return (manifest.usesPermissions || []).some(({
    name
  }) => name === 'android.permission.INTERNET');
};
var _default = manifestMethods;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,