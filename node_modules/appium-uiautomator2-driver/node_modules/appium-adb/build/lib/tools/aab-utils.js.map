{"version":3,"file":"aab-utils.js","names":["_logger","_interopRequireDefault","require","_path","_support","_lruCache","_helpers","_asyncLock","_bluebird","_crypto","AAB_CACHE","LRU","max","dispose","hash","extractedFilesRoot","fs","rimraf","AAB_CACHE_GUARD","AsyncLock","UNIVERSAL_APK","aabUtilsMethods","process","on","size","paths","values","log","debug","length","util","pluralize","appPath","rimrafSync","e","warn","message","extractUniversalApk","aabPath","opts","exists","Error","aabName","path","basename","apkName","substring","extname","tmpRoot","tempDir","openDir","tmpApksPath","join","acquire","aabHash","keystore","keystorePassword","keyAlias","keyPassword","cacheHash","keystoreHash","keyAliasHash","crypto","createHash","update","digest","has","resultPath","resolve","get","del","initAapt2","args","binaries","aapt2","execBundletool","unzipFile","universalApkPath","fileDeletionPromises","allFileNames","readdir","fileName","fullPath","push","B","all","ign","mv","set","_default","exports","default"],"sources":["../../../lib/tools/aab-utils.js"],"sourcesContent":["import log from '../logger.js';\nimport path from 'path';\nimport { fs, tempDir, util } from '@appium/support';\nimport LRU from 'lru-cache';\nimport { unzipFile } from '../helpers.js';\nimport AsyncLock from 'async-lock';\nimport B from 'bluebird';\nimport crypto from 'crypto';\n\nconst AAB_CACHE = new LRU({\n  max: 10,\n  dispose: (hash, extractedFilesRoot) => fs.rimraf(extractedFilesRoot),\n});\nconst AAB_CACHE_GUARD = new AsyncLock();\nconst UNIVERSAL_APK = 'universal.apk';\n\nconst aabUtilsMethods = {};\n\nprocess.on('exit', () => {\n  if (!AAB_CACHE.size) {\n    return;\n  }\n\n  const paths = [...AAB_CACHE.values()];\n  log.debug(`Performing cleanup of ${paths.length} cached .aab ` +\n    util.pluralize('package', paths.length));\n  for (const appPath of paths) {\n    try {\n      // Asynchronous calls are not supported in onExit handler\n      fs.rimrafSync(appPath);\n    } catch (e) {\n      log.warn(e.message);\n    }\n  }\n});\n\n/**\n * @typedef {Object} ApkCreationOptions\n * @property {string} keystore Specifies the path to the deployment keystore used\n * to sign the APKs. This flag is optional. If you don't include it,\n * bundletool attempts to sign your APKs with a debug signing key.\n * If the .apk has been already signed and cached then it is not going to be resigned\n * unless a different keystore or key alias is used.\n * @property {string} keystorePassword Specifies your keystoreâ€™s password.\n * It is mandatory to provide this value if `keystore` one is assigned\n * otherwise it is going to be ignored.\n * @property {string} keyAlias Specifies the alias of the signing key you want to use.\n * It is mandatory to provide this value if `keystore` one is assigned\n * otherwise it is going to be ignored.\n * @property {string} keyPassword Specifies the password for the signing key.\n * It is mandatory to provide this value if `keystore` one is assigned\n * otherwise it is going to be ignored.\n */\n\n/**\n * Builds a universal .apk from the given .aab package. See\n * https://developer.android.com/studio/command-line/bundletool#generate_apks\n * for more details.\n *\n * @param {string} aabPath Full path to the source .aab package\n * @param {ApkCreationOptions} opts\n * @returns The path to the resulting universal .apk. The .apk is stored in the internal cache\n * by default.\n * @throws {Error} If there was an error while creating the universal .apk\n */\naabUtilsMethods.extractUniversalApk = async function extractUniversalApk (aabPath, opts = {}) {\n  if (!await fs.exists(aabPath)) {\n    throw new Error(`The file at '${aabPath}' either does not exist or is not accessible`);\n  }\n\n  const aabName = path.basename(aabPath);\n  const apkName = aabName.substring(0, aabName.length - path.extname(aabName).length) + '.apk';\n  const tmpRoot = await tempDir.openDir();\n  const tmpApksPath = path.join(tmpRoot, `${aabName}.apks`);\n  try {\n    return await AAB_CACHE_GUARD.acquire(aabPath, async () => {\n      const aabHash = await fs.hash(aabPath);\n      const {\n        keystore,\n        keystorePassword,\n        keyAlias,\n        keyPassword,\n      } = opts;\n      let cacheHash = aabHash;\n      if (keystore) {\n        if (!await fs.exists(keystore)) {\n          throw new Error(`The keystore file at '${keystore}' either does not exist ` +\n            `or is not accessible`);\n        }\n        if (!keystorePassword || !keyAlias || !keyPassword) {\n          throw new Error('It is mandatory to also provide keystore password, key alias, ' +\n            'and key password if the keystore path is set');\n        }\n        const keystoreHash = await fs.hash(keystore);\n        const keyAliasHash = crypto.createHash('sha1');\n        keyAliasHash.update(keyAlias);\n        cacheHash = [cacheHash, keystoreHash, keyAliasHash.digest('hex')].join(':');\n      }\n      log.debug(`Calculated the cache key for '${aabPath}': ${cacheHash}`);\n      if (AAB_CACHE.has(cacheHash)) {\n        const resultPath = path.resolve(AAB_CACHE.get(cacheHash), apkName);\n        if (await fs.exists(resultPath)) {\n          return resultPath;\n        }\n        AAB_CACHE.del(cacheHash);\n      }\n\n      await this.initAapt2();\n      const args = [\n        'build-apks',\n        '--aapt2', this.binaries.aapt2,\n        '--bundle', aabPath,\n        '--output', tmpApksPath,\n        ...(keystore ? [\n          '--ks', keystore,\n          '--ks-pass', `pass:${keystorePassword}`,\n          '--ks-key-alias', keyAlias,\n          '--key-pass', `pass:${keyPassword}`,\n        ] : []),\n        '--mode=universal'\n      ];\n      log.debug(`Preparing universal .apks bundle from '${aabPath}'`);\n      await this.execBundletool(args, `Cannot build a universal .apks bundle from '${aabPath}'`);\n\n      log.debug(`Unpacking universal application bundle at '${tmpApksPath}' to '${tmpRoot}'`);\n      await unzipFile(tmpApksPath, tmpRoot);\n      let universalApkPath;\n      const fileDeletionPromises = [];\n      const allFileNames = await fs.readdir(tmpRoot);\n      for (const fileName of allFileNames) {\n        const fullPath = path.join(tmpRoot, fileName);\n        if (fileName === UNIVERSAL_APK) {\n          universalApkPath = fullPath;\n        } else {\n          fileDeletionPromises.push(fs.rimraf(fullPath));\n        }\n      }\n      try {\n        await B.all(fileDeletionPromises);\n      } catch (ign) {}\n      if (!universalApkPath) {\n        log.debug(`The following items were extracted from the .aab bundle: ${allFileNames}`);\n        throw new Error(`${UNIVERSAL_APK} cannot be found in '${aabPath}' bundle. ` +\n          `Does the archive contain a valid application bundle?`);\n      }\n      const resultPath = path.join(tmpRoot, apkName);\n      log.debug(`Found ${UNIVERSAL_APK} at '${universalApkPath}'. Caching it to '${resultPath}'`);\n      await fs.mv(universalApkPath, resultPath);\n      AAB_CACHE.set(cacheHash, tmpRoot);\n      return resultPath;\n    });\n  } catch (e) {\n    await fs.rimraf(tmpRoot);\n    throw e;\n  }\n};\n\nexport default aabUtilsMethods;\n"],"mappings":"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"}