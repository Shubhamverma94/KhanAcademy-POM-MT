{"version":3,"file":"apk-utils.js","names":["_helpers","require","_teen_process","_logger","_interopRequireDefault","_path","_lodash","_asyncbox","_support","_semver","_os","_lruCache","_adbkitApkreader","apkUtilsMethods","APP_INSTALL_STATE","UNKNOWN","NOT_INSTALLED","NEWER_VERSION_INSTALLED","SAME_VERSION_INSTALLED","OLDER_VERSION_INSTALLED","REMOTE_CACHE_ROOT","exports","RESOLVER_ACTIVITY_NAME","isAppInstalled","pkg","log","debug","installedPattern","RegExp","_","escapeRegExp","stdout","shell","isInstalled","test","e","Error","message","startUri","uri","opts","waitForLaunch","args","push","escapeShellArg","res","toLowerCase","includes","startApp","startAppOptions","activity","action","clone","replace","defaults","waitPkg","waitActivity","retry","stopApp","apiLevel","getApiLevel","cmd","buildStartCmd","intentName","optionalIntentArguments","shellOpts","isInteger","waitDuration","timeout","startsWith","waitForActivity","appDescriptor","dumpWindows","dumpsysArg","getFocusedPackageAndActivity","nullFocusedAppRe","focusedAppRe","nullCurrentFocusRe","currentFocusAppRe","focusedAppCandidates","currentFocusAppCandidates","candidates","pattern","match","exec","appPackage","trim","appActivity","length","intersectionWith","isEqual","waitForActivityOrNot","waitForStop","waitMs","splitNames","names","split","map","name","allPackages","allActivities","possibleActivityNames","oneActivity","currentPkg","join","possibleActivityPatterns","actName","conditionFunc","fullyQualifiedActivity","isActivityFound","some","p","waitForCondition","parseInt","intervalMs","act","waitForNotActivity","uninstallApk","options","info","keepData","forceStop","adbExec","installFromDevicePath","apkPathOnDevice","indexOf","cacheApk","apkPath","appHash","fs","hash","remotePath","path","posix","remoteCachedFiles","errorMarker","lsOutput","_areExtendedLsOptionsSupported","isBoolean","isString","substring","x","filter","Boolean","toHash","parse","catch","timer","timing","Timer","start","size","stat","basename","util","toReadableSizeString","getDuration","asMilliSeconds","toFixed","remoteAppsCache","LRU","max","remoteAppsCacheLimit","difference","keys","forEach","del","set","entriesToCleanup","has","slice","isEmpty","warn","install","appPath","endsWith","APKS_EXTENSION","installApks","cloneDeep","adbExecTimeout","DEFAULT_ADB_EXEC_TIMEOUT","APK_INSTALL_TIMEOUT","timeoutCapName","installArgs","buildInstallArgs","noIncremental","isIncrementalInstallSupported","installOpts","installCmd","performAppInstall","shouldCacheApp","isStreamedInstallSupported","clearCache","cacheApp","cachedAppPath","pmInstallCmdByRemotePath","output","newCachedAppPath","truncatedOutput","substr","isTestPackageOnlyError","msg","err","getApplicationInstallState","apkInfo","getApkInfo","versionCode","pkgVersionCode","versionName","pkgVersionNameStr","getPackageInfo","pkgVersionName","semver","valid","coerce","apkVersionCode","apkVersionNameStr","apkVersionName","satisfies","installOrUpgrade","enforceCurrentBuild","appState","wasUninstalled","uninstallPackage","Object","assign","extractStringsFromApk","language","out","originalAppPath","extractLanguageApk","apkStrings","configMarker","initAapt","formatConfigMarker","binaries","aapt","uniq","os","EOL","parseAaptStrings","stderr","initAapt2","aapt2","parseAapt2Strings","localPath","resolve","mkdirp","writeFile","JSON","stringify","getDeviceLanguage","getDeviceSysLanguage","getDeviceProductLanguage","getDeviceLocale","getDeviceCountry","country","getDeviceSysCountry","getDeviceProductCountry","locale","getDeviceSysLocale","getDeviceProductLocale","setDeviceLocale","validateLocale","split_locale","setDeviceLanguageCountry","ensureCurrentLocale","script","hasLanguage","hasCountry","retryInterval","curLanguage","curCountry","curLocale","localeCode","error","reconnect","ign","restartAdb","toUpperCase","setDeviceSysLocaleViaSettingApp","exists","extractBaseApk","apkReader","ApkReader","open","manifest","readManifest","parseManifest","result","versionNameMatch","versionCodeMatch","pullApk","tmpDir","packageMarker","tmpApp","pull","activateApp","appId","errorAndThrow","activityName","resolveLaunchableActivity","preferCmd","_default","default"],"sources":["../../../lib/tools/apk-utils.js"],"sourcesContent":["import {\n  buildStartCmd, APKS_EXTENSION, buildInstallArgs,\n  APK_INSTALL_TIMEOUT, DEFAULT_ADB_EXEC_TIMEOUT,\n  parseManifest, parseAaptStrings, parseAapt2Strings, formatConfigMarker,\n  escapeShellArg,\n} from '../helpers.js';\nimport { exec } from 'teen_process';\nimport log from '../logger.js';\nimport path from 'path';\nimport _ from 'lodash';\nimport { retryInterval, waitForCondition } from 'asyncbox';\nimport { fs, util, mkdirp, timing } from '@appium/support';\nimport semver from 'semver';\nimport os from 'os';\nimport LRU from 'lru-cache';\nimport ApkReader from 'adbkit-apkreader';\n\nconst apkUtilsMethods = {};\n\napkUtilsMethods.APP_INSTALL_STATE = {\n  UNKNOWN: 'unknown',\n  NOT_INSTALLED: 'notInstalled',\n  NEWER_VERSION_INSTALLED: 'newerVersionInstalled',\n  SAME_VERSION_INSTALLED: 'sameVersionInstalled',\n  OLDER_VERSION_INSTALLED: 'olderVersionInstalled',\n};\nconst REMOTE_CACHE_ROOT = '/data/local/tmp/appium_cache';\nconst RESOLVER_ACTIVITY_NAME = 'android/com.android.internal.app.ResolverActivity';\n\n\n/**\n * Check whether the particular package is present on the device under test.\n *\n * @param {string} pkg - The name of the package to check.\n * @return {boolean} True if the package is installed.\n * @throws {Error} If there was an error while detecting application state\n */\napkUtilsMethods.isAppInstalled = async function isAppInstalled (pkg) {\n  log.debug(`Getting install status for ${pkg}`);\n  const installedPattern = new RegExp(`^\\\\s*Package\\\\s+\\\\[${_.escapeRegExp(pkg)}\\\\][^:]+:$`, 'm');\n  try {\n    const stdout = await this.shell(['dumpsys', 'package', pkg]);\n    const isInstalled = installedPattern.test(stdout);\n    log.debug(`'${pkg}' is${!isInstalled ? ' not' : ''} installed`);\n    return isInstalled;\n  } catch (e) {\n    throw new Error(`Error finding if '${pkg}' is installed. Original error: ${e.message}`);\n  }\n};\n\n/**\n * @typedef {Object} StartUriOptions\n * @property {?boolean} waitForLaunch [true] - if `false` then adb won't wait\n * for the started activity to return the control\n */\n\n/**\n * Start the particular URI on the device under test.\n *\n * @param {string} uri - The name of URI to start.\n * @param {string} pkg - The name of the package to start the URI with.\n * @param {StartUriOptions} opts\n */\napkUtilsMethods.startUri = async function startUri (uri, pkg, opts = {}) {\n  const {\n    waitForLaunch = true,\n  } = opts;\n\n  if (!uri || !pkg) {\n    throw new Error('URI and package arguments are required');\n  }\n\n  const args = ['am', 'start'];\n  if (waitForLaunch) {\n    args.push('-W');\n  }\n  args.push('-a', 'android.intent.action.VIEW',\n    '-d', escapeShellArg(uri),\n    pkg);\n\n  try {\n    const res = await this.shell(args);\n    if (res.toLowerCase().includes('unable to resolve intent')) {\n      throw new Error(res);\n    }\n  } catch (e) {\n    throw new Error(`Error attempting to start URI. Original error: ${e}`);\n  }\n};\n\n/**\n * @typedef {Object} StartAppOptions\n * @property {!string} pkg - The name of the application package\n * @property {?string} activity - The name of the main application activity.\n * This or action is required in order to be able to launch an app.\n * @property {?string} action - The name of the intent action that will launch the required app.\n * This or activity is required in order to be able to launch an app.\n * @property {?boolean} retry [true] - If this property is set to `true`\n * and the activity name does not start with '.' then the method\n * will try to add the missing dot and start the activity once more\n * if the first startup try fails.\n * @property {?boolean} stopApp [true] - Set it to `true` in order to forcefully\n * stop the activity if it is already running.\n * @property {?string} waitPkg - The name of the package to wait to on\n * startup (this only makes sense if this name is different from the one, which is set as `pkg`)\n * @property {?string} waitActivity - The name of the activity to wait to on\n * startup (this only makes sense if this name is different from the one, which is set as `activity`)\n * @property {?number} waitDuration - The number of milliseconds to wait until the\n * `waitActivity` is focused\n * @property {?string|number} user - The number of the user profile to start\n * the given activity with. The default OS user profile (usually zero) is used\n * when this property is unset\n * @property {?boolean} waitForLaunch [true] - if `false` then adb won't wait\n * for the started activity to return the control\n */\n\n/**\n * Start the particular package/activity on the device under test.\n *\n * @param {StartAppOptions} startAppOptions [{}] - Startup options mapping.\n * @return {string} The output of the corresponding adb command.\n * @throws {Error} If there is an error while executing the activity\n */\napkUtilsMethods.startApp = async function startApp (startAppOptions = {}) {\n  if (!startAppOptions.pkg || !(startAppOptions.activity || startAppOptions.action)) {\n    throw new Error('pkg, and activity or intent action, are required to start an application');\n  }\n\n  startAppOptions = _.clone(startAppOptions);\n  if (startAppOptions.activity) {\n    startAppOptions.activity = startAppOptions.activity.replace('$', '\\\\$');\n  }\n  // initializing defaults\n  _.defaults(startAppOptions, {\n    waitPkg: startAppOptions.pkg,\n    waitForLaunch: true,\n    waitActivity: false,\n    retry: true,\n    stopApp: true\n  });\n  // preventing null waitpkg\n  startAppOptions.waitPkg = startAppOptions.waitPkg || startAppOptions.pkg;\n\n  const apiLevel = await this.getApiLevel();\n  const cmd = buildStartCmd(startAppOptions, apiLevel);\n  const intentName = `${startAppOptions.action}${startAppOptions.optionalIntentArguments ? ' ' + startAppOptions.optionalIntentArguments : ''}`;\n  try {\n    const shellOpts = {};\n    if (_.isInteger(startAppOptions.waitDuration) && startAppOptions.waitDuration >= 0) {\n      shellOpts.timeout = startAppOptions.waitDuration;\n    }\n    const stdout = await this.shell(cmd, shellOpts);\n    if (stdout.includes('Error: Activity class') && stdout.includes('does not exist')) {\n      if (startAppOptions.retry && !startAppOptions.activity.startsWith('.')) {\n        log.debug(`We tried to start an activity that doesn't exist, ` +\n                  `retrying with '.${startAppOptions.activity}' activity name`);\n        startAppOptions.activity = `.${startAppOptions.activity}`;\n        startAppOptions.retry = false;\n        return await this.startApp(startAppOptions);\n      }\n      throw new Error(`Activity name '${startAppOptions.activity}' used to start the app doesn't ` +\n                      `exist or cannot be launched! Make sure it exists and is a launchable activity`);\n    } else if (stdout.includes('Error: Intent does not match any activities') || stdout.includes('Error: Activity not started, unable to resolve Intent')) {\n      throw new Error(`Activity for intent '${intentName}' used to start the app doesn't ` +\n                      `exist or cannot be launched! Make sure it exists and is a launchable activity`);\n    } else if (stdout.includes('java.lang.SecurityException')) {\n      // if the app is disabled on a real device it will throw a security exception\n      throw new Error(`The permission to start '${startAppOptions.activity}' activity has been denied.` +\n                      `Make sure the activity/package names are correct.`);\n    }\n    if (startAppOptions.waitActivity) {\n      await this.waitForActivity(startAppOptions.waitPkg, startAppOptions.waitActivity, startAppOptions.waitDuration);\n    }\n    return stdout;\n  } catch (e) {\n    const appDescriptor = startAppOptions.pkg || intentName;\n    throw new Error(`Cannot start the '${appDescriptor}' application. ` +\n      `Consider checking the driver's troubleshooting documentation. ` +\n      `Original error: ${e.message}`);\n  }\n};\n\n/**\n * Helper method to call `adb dumpsys window windows/displays`\n */\napkUtilsMethods.dumpWindows = async function dumpWindows () {\n  const apiLevel = await this.getApiLevel();\n\n  // With version 29, Android changed the dumpsys syntax\n  const dumpsysArg = apiLevel >= 29 ? 'displays' : 'windows';\n  const cmd = ['dumpsys', 'window', dumpsysArg];\n\n  return await this.shell(cmd);\n};\n\n/**\n * @typedef {Object} PackageActivityInfo\n * @property {?string} appPackage - The name of application package,\n *                                  for example 'com.acme.app'.\n * @property {?string} appActivity - The name of main application activity.\n */\n\n/**\n * Get the name of currently focused package and activity.\n *\n * @return {PackageActivityInfo} The mapping, where property names are 'appPackage' and 'appActivity'.\n * @throws {Error} If there is an error while parsing the data.\n */\napkUtilsMethods.getFocusedPackageAndActivity = async function getFocusedPackageAndActivity () {\n  log.debug('Getting focused package and activity');\n  let stdout;\n  try {\n    stdout = await this.dumpWindows();\n  } catch (e) {\n    throw new Error(\n      `Could not retrieve the currently focused package and activity. Original error: ${e.message}`\n    );\n  }\n\n  const nullFocusedAppRe = /^\\s*mFocusedApp=null/m;\n  // https://regex101.com/r/xZ8vF7/1\n  const focusedAppRe = new RegExp(\n    '^\\\\s*mFocusedApp.+Record\\\\{.*\\\\s([^\\\\s\\\\/\\\\}]+)\\\\/([^\\\\s\\\\/\\\\}\\\\,]+)\\\\,?(\\\\s[^\\\\s\\\\/\\\\}]+)*\\\\}',\n    'mg'\n  );\n  const nullCurrentFocusRe = /^\\s*mCurrentFocus=null/m;\n  const currentFocusAppRe = new RegExp('^\\\\s*mCurrentFocus.+\\\\{.+\\\\s([^\\\\s\\\\/]+)\\\\/([^\\\\s]+)\\\\b', 'mg');\n\n  const focusedAppCandidates = [];\n  const currentFocusAppCandidates = [];\n  for (const [candidates, pattern] of [\n    [focusedAppCandidates, focusedAppRe],\n    [currentFocusAppCandidates, currentFocusAppRe]\n  ]) {\n    let match;\n    while ((match = pattern.exec(stdout))) {\n      candidates.push({\n        appPackage: match[1].trim(),\n        appActivity: match[2].trim()\n      });\n    }\n  }\n  if (focusedAppCandidates.length > 1 && currentFocusAppCandidates.length > 0) {\n    // https://github.com/appium/appium/issues/17106\n    return _.intersectionWith(focusedAppCandidates, currentFocusAppCandidates, _.isEqual)[0]\n      ?? focusedAppCandidates[0];\n  }\n  if (focusedAppCandidates.length > 0 || currentFocusAppCandidates.length > 0) {\n    return focusedAppCandidates[0] ?? currentFocusAppCandidates[0];\n  }\n\n  for (const pattern of [nullFocusedAppRe, nullCurrentFocusRe]) {\n    if (pattern.exec(stdout)) {\n      return {\n        appPackage: null,\n        appActivity: null\n      };\n    }\n  }\n\n  log.debug(stdout);\n  throw new Error('Could not retrieve the currently focused package and activity');\n};\n\n/**\n * Wait for the given activity to be focused/non-focused.\n *\n * @param {string} pkg - The name of the package to wait for.\n * @param {string} activity - The name of the activity, belonging to that package,\n *                            to wait for.\n * @param {boolean} waitForStop - Whether to wait until the activity is focused (true)\n *                                or is not focused (false).\n * @param {number} waitMs [20000] - Number of milliseconds to wait before timeout occurs.\n * @throws {error} If timeout happens.\n */\napkUtilsMethods.waitForActivityOrNot = async function waitForActivityOrNot (pkg, activity, waitForStop, waitMs = 20000) {\n  if (!pkg || !activity) {\n    throw new Error('Package and activity required.');\n  }\n  log.debug(`Waiting up to ${waitMs}ms for activity matching pkg: '${pkg}' and ` +\n            `activity: '${activity}' to${waitForStop ? ' not' : ''} be focused`);\n\n  const splitNames = (names) => names.split(',').map((name) => name.trim());\n  const allPackages = splitNames(pkg);\n  const allActivities = splitNames(activity);\n\n  const possibleActivityNames = [];\n  for (const oneActivity of allActivities) {\n    if (oneActivity.startsWith('.')) {\n      // add the package name if activity is not full qualified\n      for (const currentPkg of allPackages) {\n        possibleActivityNames.push(`${currentPkg}${oneActivity}`.replace(/\\.+/g, '.'));\n      }\n    } else {\n      // accept fully qualified activity name.\n      possibleActivityNames.push(oneActivity);\n      possibleActivityNames.push(`${pkg}.${oneActivity}`);\n    }\n  }\n  log.debug(`Possible activities, to be checked: ${possibleActivityNames.map((name) => `'${name}'`).join(', ')}`);\n\n  const possibleActivityPatterns = possibleActivityNames.map(\n    (actName) => new RegExp(`^${actName.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*?').replace(/\\$/g, '\\\\$')}$`)\n  );\n\n  const conditionFunc = async () => {\n    let appPackage;\n    let appActivity;\n    try {\n      ({appPackage, appActivity} = await this.getFocusedPackageAndActivity());\n    } catch (e) {\n      log.debug(e.message);\n      return false;\n    }\n    if (appActivity && appPackage) {\n      const fullyQualifiedActivity = appActivity.startsWith('.') ? `${appPackage}${appActivity}` : appActivity;\n      log.debug(`Found package: '${appPackage}' and fully qualified activity name : '${fullyQualifiedActivity}'`);\n      const isActivityFound = _.includes(allPackages, appPackage)\n        && possibleActivityPatterns.some((p) => p.test(fullyQualifiedActivity));\n      if ((!waitForStop && isActivityFound) || (waitForStop && !isActivityFound)) {\n        return true;\n      }\n    }\n    log.debug('Incorrect package and activity. Retrying.');\n    return false;\n  };\n\n  try {\n    await waitForCondition(conditionFunc, {\n      waitMs: parseInt(waitMs, 10),\n      intervalMs: 500,\n    });\n  } catch (e) {\n    throw new Error(`${possibleActivityNames.map((name) => `'${name}'`).join(' or ')} never ${waitForStop ? 'stopped' : 'started'}. ` +\n      `Consider checking the driver's troubleshooting documentation.`);\n  }\n};\n\n/**\n * Wait for the given activity to be focused\n *\n * @param {string} pkg - The name of the package to wait for.\n * @param {string} activity - The name of the activity, belonging to that package,\n *                            to wait for.\n * @param {number} waitMs [20000] - Number of milliseconds to wait before timeout occurs.\n * @throws {error} If timeout happens.\n */\napkUtilsMethods.waitForActivity = async function waitForActivity (pkg, act, waitMs = 20000) {\n  await this.waitForActivityOrNot(pkg, act, false, waitMs);\n};\n\n/**\n * Wait for the given activity to be non-focused.\n *\n * @param {string} pkg - The name of the package to wait for.\n * @param {string} activity - The name of the activity, belonging to that package,\n *                            to wait for.\n * @param {number} waitMs [20000] - Number of milliseconds to wait before timeout occurs.\n * @throws {error} If timeout happens.\n */\napkUtilsMethods.waitForNotActivity = async function waitForNotActivity (pkg, act, waitMs = 20000) {\n  await this.waitForActivityOrNot(pkg, act, true, waitMs);\n};\n\n/**\n * @typedef {Object} UninstallOptions\n * @property {number} timeout [adbExecTimeout] - The count of milliseconds to wait until the\n *                                      app is uninstalled.\n * @property {boolean} keepData [false] - Set to true in order to keep the\n *                                        application data and cache folders after uninstall.\n */\n\n/**\n * Uninstall the given package from the device under test.\n *\n * @param {string} pkg - The name of the package to be uninstalled.\n * @param {?UninstallOptions} options - The set of uninstall options.\n * @return {boolean} True if the package was found on the device and\n *                   successfully uninstalled.\n */\napkUtilsMethods.uninstallApk = async function uninstallApk (pkg, options = {}) {\n  log.debug(`Uninstalling ${pkg}`);\n  if (!await this.isAppInstalled(pkg)) {\n    log.info(`${pkg} was not uninstalled, because it was not present on the device`);\n    return false;\n  }\n\n  const cmd = ['uninstall'];\n  if (options.keepData) {\n    cmd.push('-k');\n  }\n  cmd.push(pkg);\n\n  let stdout;\n  try {\n    await this.forceStop(pkg);\n    stdout = (await this.adbExec(cmd, {timeout: options.timeout})).trim();\n  } catch (e) {\n    throw new Error(`Unable to uninstall APK. Original error: ${e.message}`);\n  }\n  log.debug(`'adb ${cmd.join(' ')}' command output: ${stdout}`);\n  if (stdout.includes('Success')) {\n    log.info(`${pkg} was successfully uninstalled`);\n    return true;\n  }\n  log.info(`${pkg} was not uninstalled`);\n  return false;\n};\n\n/**\n * Install the package after it was pushed to the device under test.\n *\n * @param {string} apkPathOnDevice - The full path to the package on the device file system.\n * @param {object} opts [{}] - Additional exec options. See {@link https://github.com/appium/node-teen_process}\n *                             for more details on this parameter.\n * @throws {error} If there was a failure during application install.\n */\napkUtilsMethods.installFromDevicePath = async function installFromDevicePath (apkPathOnDevice, opts = {}) {\n  let stdout = await this.shell(['pm', 'install', '-r', apkPathOnDevice], opts);\n  if (stdout.indexOf('Failure') !== -1) {\n    throw new Error(`Remote install failed: ${stdout}`);\n  }\n};\n\n/**\n * @typedef {Object} CachingOptions\n * @property {?number} timeout [adbExecTimeout] - The count of milliseconds to wait until the\n *                                                app is uploaded to the remote location.\n */\n\n/**\n * Caches the given APK at a remote location to speed up further APK deployments.\n *\n * @param {string} apkPath - Full path to the apk on the local FS\n * @param {?CachingOptions} options - Caching options\n * @returns {string} - Full path to the cached apk on the remote file system\n * @throws {Error} if there was a failure while caching the app\n */\napkUtilsMethods.cacheApk = async function cacheApk (apkPath, options = {}) {\n  const appHash = await fs.hash(apkPath);\n  const remotePath = path.posix.join(REMOTE_CACHE_ROOT, `${appHash}.apk`);\n  const remoteCachedFiles = [];\n  // Get current contents of the remote cache or create it for the first time\n  try {\n    const errorMarker = '_ERROR_';\n    let lsOutput = null;\n    if (this._areExtendedLsOptionsSupported === true || !_.isBoolean(this._areExtendedLsOptionsSupported)) {\n      lsOutput = await this.shell([`ls -t -1 ${REMOTE_CACHE_ROOT} 2>&1 || echo ${errorMarker}`]);\n    }\n    if (!_.isString(lsOutput) || (lsOutput.includes(errorMarker) && !lsOutput.includes(REMOTE_CACHE_ROOT))) {\n      if (!_.isBoolean(this._areExtendedLsOptionsSupported)) {\n        log.debug('The current Android API does not support extended ls options. ' +\n          'Defaulting to no-options call');\n      }\n      lsOutput = await this.shell([`ls ${REMOTE_CACHE_ROOT} 2>&1 || echo ${errorMarker}`]);\n      this._areExtendedLsOptionsSupported = false;\n    } else {\n      this._areExtendedLsOptionsSupported = true;\n    }\n    if (lsOutput.includes(errorMarker)) {\n      throw new Error(lsOutput.substring(0, lsOutput.indexOf(errorMarker)));\n    }\n    remoteCachedFiles.push(...(\n      lsOutput.split('\\n')\n        .map((x) => x.trim())\n        .filter(Boolean)\n    ));\n  } catch (e) {\n    log.debug(`Got an error '${e.message.trim()}' while getting the list of files in the cache. ` +\n      `Assuming the cache does not exist yet`);\n    await this.shell(['mkdir', '-p', REMOTE_CACHE_ROOT]);\n  }\n  log.debug(`The count of applications in the cache: ${remoteCachedFiles.length}`);\n  const toHash = (remotePath) => path.posix.parse(remotePath).name;\n  // Push the apk to the remote cache if needed\n  if (remoteCachedFiles.some((x) => toHash(x) === appHash)) {\n    log.info(`The application at '${apkPath}' is already cached to '${remotePath}'`);\n    // Update the application timestamp asynchronously in order to bump its position\n    // in the sorted ls output\n    // eslint-disable-next-line promise/prefer-await-to-then\n    this.shell(['touch', '-am', remotePath]).catch(() => {});\n  } else {\n    log.info(`Caching the application at '${apkPath}' to '${remotePath}'`);\n    const timer = new timing.Timer().start();\n    await this.push(apkPath, remotePath, {timeout: options.timeout});\n    const {size} = await fs.stat(apkPath);\n    log.info(`The upload of '${path.basename(apkPath)}' (${util.toReadableSizeString(size)}) ` +\n      `took ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);\n  }\n  if (!this.remoteAppsCache) {\n    this.remoteAppsCache = new LRU({\n      max: this.remoteAppsCacheLimit,\n    });\n  }\n  // Cleanup the invalid entries from the cache\n  _.difference([...this.remoteAppsCache.keys()], remoteCachedFiles.map(toHash))\n    .forEach((hash) => this.remoteAppsCache.del(hash));\n  // Bump the cache record for the recently cached item\n  this.remoteAppsCache.set(appHash, remotePath);\n  // If the remote cache exceeds this.remoteAppsCacheLimit, remove the least recently used entries\n  const entriesToCleanup = remoteCachedFiles\n    .map((x) => path.posix.join(REMOTE_CACHE_ROOT, x))\n    .filter((x) => !this.remoteAppsCache.has(toHash(x)))\n    .slice(this.remoteAppsCacheLimit - [...this.remoteAppsCache.keys()].length);\n  if (!_.isEmpty(entriesToCleanup)) {\n    try {\n      await this.shell(['rm', '-f', ...entriesToCleanup]);\n      log.debug(`Deleted ${entriesToCleanup.length} expired application cache entries`);\n    } catch (e) {\n      log.warn(`Cannot delete ${entriesToCleanup.length} expired application cache entries. ` +\n        `Original error: ${e.message}`);\n    }\n  }\n  return remotePath;\n};\n\n/**\n * @typedef {Object} InstallOptions\n * @property {number} timeout [60000] - The count of milliseconds to wait until the\n *                                      app is installed.\n * @property {string} timeoutCapName [androidInstallTimeout] - The timeout option name\n *                                                             users can increase the timeout.\n * @property {boolean} allowTestPackages [false] - Set to true in order to allow test\n *                                                 packages installation.\n * @property {boolean} useSdcard [false] - Set to true to install the app on sdcard\n *                                         instead of the device memory.\n * @property {boolean} grantPermissions [false] - Set to true in order to grant all the\n *                                                permissions requested in the application's manifest\n *                                                automatically after the installation is completed\n *                                                under Android 6+.\n * @property {boolean} replace [true] - Set it to false if you don't want\n *                                      the application to be upgraded/reinstalled\n *                                      if it is already present on the device.\n * @property {boolean} noIncremental [false] - Forcefully disables incremental installs if set to `true`.\n *                                             Read https://developer.android.com/preview/features#incremental\n *                                             for more details.\n */\n\n/**\n * Install the package from the local file system.\n *\n * @param {string} appPath - The full path to the local package.\n * @param {?InstallOptions} options - The set of installation options.\n * @throws {Error} If an unexpected error happens during install.\n */\napkUtilsMethods.install = async function install (appPath, options = {}) {\n  if (appPath.endsWith(APKS_EXTENSION)) {\n    return await this.installApks(appPath, options);\n  }\n\n  options = _.cloneDeep(options);\n  _.defaults(options, {\n    replace: true,\n    timeout: this.adbExecTimeout === DEFAULT_ADB_EXEC_TIMEOUT ? APK_INSTALL_TIMEOUT : this.adbExecTimeout,\n    timeoutCapName: 'androidInstallTimeout',\n  });\n\n  const installArgs = buildInstallArgs(await this.getApiLevel(), options);\n  if (options.noIncremental && await this.isIncrementalInstallSupported()) {\n    // Adb throws an error if it does not know about an arg,\n    // which is the case here for older adb versions.\n    installArgs.push('--no-incremental');\n  }\n  const installOpts = {\n    timeout: options.timeout,\n    timeoutCapName: options.timeoutCapName,\n  };\n  const installCmd = [\n    'install',\n    ...installArgs,\n    appPath,\n  ];\n  let performAppInstall = async () => await this.adbExec(installCmd, installOpts);\n  // this.remoteAppsCacheLimit <= 0 means no caching should be applied\n  let shouldCacheApp = this.remoteAppsCacheLimit > 0;\n  if (shouldCacheApp) {\n    shouldCacheApp = !(await this.isStreamedInstallSupported());\n    if (!shouldCacheApp) {\n      log.info(`The application at '${appPath}' will not be cached, because the device under test has ` +\n        `confirmed the support of streamed installs`);\n    }\n  }\n  if (shouldCacheApp) {\n    const clearCache = async () => {\n      log.info(`Clearing the cache at '${REMOTE_CACHE_ROOT}'`);\n      await this.shell(['rm', '-rf', `${REMOTE_CACHE_ROOT}/*`]);\n    };\n    const cacheApp = async () => await this.cacheApk(appPath, {\n      timeout: options.timeout,\n    });\n    try {\n      const cachedAppPath = await cacheApp();\n      performAppInstall = async () => {\n        const pmInstallCmdByRemotePath = (remotePath) => [\n          'pm', 'install',\n          ...installArgs,\n          remotePath,\n        ];\n        const output = await this.shell(pmInstallCmdByRemotePath(cachedAppPath), installOpts);\n        // https://github.com/appium/appium/issues/13970\n        if (/\\bINSTALL_FAILED_INSUFFICIENT_STORAGE\\b/.test(output)) {\n          log.warn(`There was a failure while installing '${appPath}' ` +\n            `because of the insufficient device storage space`);\n          await clearCache();\n          log.info(`Consider decreasing the maximum amount of cached apps ` +\n            `(currently ${this.remoteAppsCacheLimit}) to avoid such issues in the future`);\n          const newCachedAppPath = await cacheApp();\n          return await this.shell(pmInstallCmdByRemotePath(newCachedAppPath), installOpts);\n        }\n        return output;\n      };\n    } catch (e) {\n      log.debug(e);\n      log.warn(`There was a failure while caching '${appPath}': ${e.message}`);\n      log.warn('Falling back to the default installation procedure');\n      await clearCache();\n    }\n  }\n  try {\n    const timer = new timing.Timer().start();\n    const output = await performAppInstall();\n    log.info(`The installation of '${path.basename(appPath)}' took ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);\n    const truncatedOutput = (!_.isString(output) || output.length <= 300) ?\n      output : `${output.substr(0, 150)}...${output.substr(output.length - 150)}`;\n    log.debug(`Install command stdout: ${truncatedOutput}`);\n    if (/\\[INSTALL[A-Z_]+FAILED[A-Z_]+\\]/.test(output)) {\n      if (this.isTestPackageOnlyError(output)) {\n        const msg = `Set 'allowTestPackages' capability to true in order to allow test packages installation.`;\n        log.warn(msg);\n        throw new Error(`${output}\\n${msg}`);\n      }\n      throw new Error(output);\n    }\n  } catch (err) {\n    // on some systems this will throw an error if the app already\n    // exists\n    if (!err.message.includes('INSTALL_FAILED_ALREADY_EXISTS')) {\n      throw err;\n    }\n    log.debug(`Application '${appPath}' already installed. Continuing.`);\n  }\n};\n\n/**\n * Retrieves the current installation state of the particular application\n *\n * @param {string} appPath - Full path to the application\n * @param {?string} pkg - Package identifier. If omitted then the script will\n *                        try to extract it on its own\n * @returns {string}]One of `APP_INSTALL_STATE` constants\n */\napkUtilsMethods.getApplicationInstallState = async function getApplicationInstallState (appPath, pkg = null) {\n  let apkInfo = null;\n  if (!pkg) {\n    apkInfo = await this.getApkInfo(appPath);\n    pkg = apkInfo.name;\n  }\n  if (!pkg) {\n    log.warn(`Cannot read the package name of '${appPath}'`);\n    return this.APP_INSTALL_STATE.UNKNOWN;\n  }\n\n  if (!await this.isAppInstalled(pkg)) {\n    log.debug(`App '${appPath}' is not installed`);\n    return this.APP_INSTALL_STATE.NOT_INSTALLED;\n  }\n\n  const {versionCode: pkgVersionCode, versionName: pkgVersionNameStr} = await this.getPackageInfo(pkg);\n  const pkgVersionName = semver.valid(semver.coerce(pkgVersionNameStr));\n  if (!apkInfo) {\n    apkInfo = await this.getApkInfo(appPath);\n  }\n  const {versionCode: apkVersionCode, versionName: apkVersionNameStr} = apkInfo;\n  const apkVersionName = semver.valid(semver.coerce(apkVersionNameStr));\n\n  if (!_.isInteger(apkVersionCode) || !_.isInteger(pkgVersionCode)) {\n    log.warn(`Cannot read version codes of '${appPath}' and/or '${pkg}'`);\n    if (!_.isString(apkVersionName) || !_.isString(pkgVersionName)) {\n      log.warn(`Cannot read version names of '${appPath}' and/or '${pkg}'`);\n      return this.APP_INSTALL_STATE.UNKNOWN;\n    }\n  }\n  if (_.isInteger(apkVersionCode) && _.isInteger(pkgVersionCode)) {\n    if (pkgVersionCode > apkVersionCode) {\n      log.debug(`The version code of the installed '${pkg}' is greater than the application version code (${pkgVersionCode} > ${apkVersionCode})`);\n      return this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED;\n    }\n    // Version codes might not be maintained. Check version names.\n    if (pkgVersionCode === apkVersionCode) {\n      if (_.isString(apkVersionName) && _.isString(pkgVersionName) && semver.satisfies(pkgVersionName, `>=${apkVersionName}`)) {\n        log.debug(`The version name of the installed '${pkg}' is greater or equal to the application version name ('${pkgVersionName}' >= '${apkVersionName}')`);\n        return semver.satisfies(pkgVersionName, `>${apkVersionName}`)\n          ? this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED\n          : this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED;\n      }\n      if (!_.isString(apkVersionName) || !_.isString(pkgVersionName)) {\n        log.debug(`The version name of the installed '${pkg}' is equal to application version name (${pkgVersionCode} === ${apkVersionCode})`);\n        return this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED;\n      }\n    }\n  } else if (_.isString(apkVersionName) && _.isString(pkgVersionName) && semver.satisfies(pkgVersionName, `>=${apkVersionName}`)) {\n    log.debug(`The version name of the installed '${pkg}' is greater or equal to the application version name ('${pkgVersionName}' >= '${apkVersionName}')`);\n    return semver.satisfies(pkgVersionName, `>${apkVersionName}`)\n      ? this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED\n      : this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED;\n  }\n\n  log.debug(`The installed '${pkg}' package is older than '${appPath}' (${pkgVersionCode} < ${apkVersionCode} or '${pkgVersionName}' < '${apkVersionName}')'`);\n  return this.APP_INSTALL_STATE.OLDER_VERSION_INSTALLED;\n};\n\n/**\n * @typedef {Object} InstallOrUpgradeOptions\n * @property {number} timeout [60000] - The count of milliseconds to wait until the\n *                                      app is installed.\n * @property {boolean} allowTestPackages [false] - Set to true in order to allow test\n *                                                 packages installation.\n * @property {boolean} useSdcard [false] - Set to true to install the app on SDCard\n *                                         instead of the device memory.\n * @property {boolean} grantPermissions [false] - Set to true in order to grant all the\n *                                                permissions requested in the application's manifest\n *                                                automatically after the installation is completed\n *                                                under Android 6+.\n * @property {boolean} enforceCurrentBuild [false] - Set to `true` in order to always prefer\n *                                                   the current build over any installed packages having\n *                                                   the same identifier\n */\n\n/**\n * @typedef {Object} InstallOrUpgradeResult\n * @property {boolean} wasUninstalled - Equals to `true` if the target app has been uninstalled\n *                                      before being installed\n * @property {APP_INSTALL_STATE} appState - One of `adb.APP_INSTALL_STATE` states, which reflects\n *                                          the state of the application before being installed.\n */\n\n/**\n * Install the package from the local file system or upgrade it if an older\n * version of the same package is already installed.\n *\n * @param {string} appPath - The full path to the local package.\n * @param {?string} pkg - The name of the installed package. The method will\n *                        perform faster if it is set.\n * @param {?InstallOrUpgradeOptions} options - Set of install options.\n * @throws {Error} If an unexpected error happens during install.\n * @returns {InstallOrUpgradeResult}\n */\napkUtilsMethods.installOrUpgrade = async function installOrUpgrade (appPath, pkg = null, options = {}) {\n  if (!pkg) {\n    const apkInfo = await this.getApkInfo(appPath);\n    pkg = apkInfo.name;\n  }\n\n  const {\n    enforceCurrentBuild,\n  } = options;\n  const appState = await this.getApplicationInstallState(appPath, pkg);\n  let wasUninstalled = false;\n  const uninstallPackage = async () => {\n    if (!await this.uninstallApk(pkg)) {\n      throw new Error(`'${pkg}' package cannot be uninstalled`);\n    }\n    wasUninstalled = true;\n  };\n  switch (appState) {\n    case this.APP_INSTALL_STATE.NOT_INSTALLED:\n      log.debug(`Installing '${appPath}'`);\n      await this.install(appPath, Object.assign({}, options, {replace: false}));\n      return {\n        appState,\n        wasUninstalled,\n      };\n    case this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED:\n      if (enforceCurrentBuild) {\n        log.info(`Downgrading '${pkg}' as requested`);\n        await uninstallPackage();\n        break;\n      }\n      log.debug(`There is no need to downgrade '${pkg}'`);\n      return {\n        appState,\n        wasUninstalled,\n      };\n    case this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED:\n      if (enforceCurrentBuild) {\n        break;\n      }\n      log.debug(`There is no need to install/upgrade '${appPath}'`);\n      return {\n        appState,\n        wasUninstalled,\n      };\n    case this.APP_INSTALL_STATE.OLDER_VERSION_INSTALLED:\n      log.debug(`Executing upgrade of '${appPath}'`);\n      break;\n    default:\n      log.debug(`The current install state of '${appPath}' is unknown. Installing anyway`);\n      break;\n  }\n\n  try {\n    await this.install(appPath, Object.assign({}, options, {replace: true}));\n  } catch (err) {\n    log.warn(`Cannot install/upgrade '${pkg}' because of '${err.message}'. Trying full reinstall`);\n    await uninstallPackage();\n    await this.install(appPath, Object.assign({}, options, {replace: false}));\n  }\n  return {\n    appState,\n    wasUninstalled,\n  };\n};\n\n/**\n * Extract string resources from the given package on local file system.\n *\n * @param {string} appPath - The full path to the .apk(s) package.\n * @param {?string} language - The name of the language to extract the resources for.\n *                             The default language is used if this equals to `null`/`undefined`\n * @param {string} out - The name of the destination folder on the local file system to\n *                       store the extracted file to.\n * @return {Object} A mapping object, where properties are: 'apkStrings', containing\n *                  parsed resource file represented as JSON object, and 'localPath',\n *                  containing the path to the extracted file on the local file system.\n */\napkUtilsMethods.extractStringsFromApk = async function extractStringsFromApk (appPath, language, out) {\n  log.debug(`Extracting strings from for language: ${language || 'default'}`);\n  const originalAppPath = appPath;\n  if (appPath.endsWith(APKS_EXTENSION)) {\n    appPath = await this.extractLanguageApk(appPath, language);\n  }\n\n  let apkStrings = {};\n  let configMarker;\n  try {\n    await this.initAapt();\n\n    configMarker = await formatConfigMarker(async () => {\n      const {stdout} = await exec(this.binaries.aapt, [\n        'd', 'configurations', appPath,\n      ]);\n      return _.uniq(stdout.split(os.EOL));\n    }, language, '(default)');\n\n    const {stdout} = await exec(this.binaries.aapt, [\n      'd', '--values', 'resources', appPath,\n    ]);\n    apkStrings = parseAaptStrings(stdout, configMarker);\n  } catch (e) {\n    log.debug('Cannot extract resources using aapt. Trying aapt2. ' +\n      `Original error: ${e.stderr || e.message}`);\n\n    await this.initAapt2();\n\n    configMarker = await formatConfigMarker(async () => {\n      const {stdout} = await exec(this.binaries.aapt2, [\n        'd', 'configurations', appPath,\n      ]);\n      return _.uniq(stdout.split(os.EOL));\n    }, language, '');\n\n    try {\n      const {stdout} = await exec(this.binaries.aapt2, [\n        'd', 'resources', appPath,\n      ]);\n      apkStrings = parseAapt2Strings(stdout, configMarker);\n    } catch (e) {\n      throw new Error(`Cannot extract resources from '${originalAppPath}'. ` +\n        `Original error: ${e.message}`);\n    }\n  }\n\n  if (_.isEmpty(apkStrings)) {\n    log.warn(`No strings have been found in '${originalAppPath}' resources ` +\n      `for '${configMarker || 'default'}' configuration`);\n  } else {\n    log.info(`Successfully extracted ${_.keys(apkStrings).length} strings from ` +\n      `'${originalAppPath}' resources for '${configMarker || 'default'}' configuration`);\n  }\n\n  const localPath = path.resolve(out, 'strings.json');\n  await mkdirp(out);\n  await fs.writeFile(localPath, JSON.stringify(apkStrings, null, 2), 'utf-8');\n  return {apkStrings, localPath};\n};\n\n/**\n * Get the language name of the device under test.\n *\n * @return {string} The name of device language.\n */\napkUtilsMethods.getDeviceLanguage = async function getDeviceLanguage () {\n  let language;\n  if (await this.getApiLevel() < 23) {\n    language = await this.getDeviceSysLanguage();\n    if (!language) {\n      language = await this.getDeviceProductLanguage();\n    }\n  } else {\n    language = (await this.getDeviceLocale()).split('-')[0];\n  }\n  return language;\n};\n\n/**\n * Get the country name of the device under test.\n *\n * @return {string} The name of device country.\n */\napkUtilsMethods.getDeviceCountry = async function getDeviceCountry () {\n  // this method is only used in API < 23\n  let country = await this.getDeviceSysCountry();\n  if (!country) {\n    country = await this.getDeviceProductCountry();\n  }\n  return country;\n};\n\n/**\n * Get the locale name of the device under test.\n *\n * @return {string} The name of device locale.\n */\napkUtilsMethods.getDeviceLocale = async function getDeviceLocale () {\n  // this method is only used in API >= 23\n  let locale = await this.getDeviceSysLocale();\n  if (!locale) {\n    locale = await this.getDeviceProductLocale();\n  }\n  return locale;\n};\n\n/**\n * Set the locale name of the device under test and the format of the locale is en-US, for example.\n * This method call setDeviceLanguageCountry, so, please use setDeviceLanguageCountry as possible.\n *\n * @param {string} locale - Names of the device language and the country connected with `-`. e.g. en-US.\n */\napkUtilsMethods.setDeviceLocale = async function setDeviceLocale (locale) {\n  const validateLocale = new RegExp(/[a-zA-Z]+-[a-zA-Z0-9]+/);\n  if (!validateLocale.test(locale)) {\n    log.warn(`setDeviceLocale requires the following format: en-US or ja-JP`);\n    return;\n  }\n\n  let split_locale = locale.split('-');\n  await this.setDeviceLanguageCountry(split_locale[0], split_locale[1]);\n};\n\n/**\n * Make sure current device locale is expected or not.\n *\n * @param {string} language - Language. The language field is case insensitive, but Locale always canonicalizes to lower case.\n * @param {string} country - Country. The language field is case insensitive, but Locale always canonicalizes to lower case.\n * @param {?string} script - Script. The script field is case insensitive but Locale always canonicalizes to title case.\n *\n * @return {boolean} If current locale is language and country as arguments, return true.\n */\napkUtilsMethods.ensureCurrentLocale = async function ensureCurrentLocale (language, country, script = null) {\n  const hasLanguage = _.isString(language);\n  const hasCountry = _.isString(country);\n\n  if (!hasLanguage && !hasCountry) {\n    log.warn('ensureCurrentLocale requires language or country');\n    return false;\n  }\n\n  // get lower case versions of the strings\n  language = (language || '').toLowerCase();\n  country = (country || '').toLowerCase();\n\n  const apiLevel = await this.getApiLevel();\n\n  return await retryInterval(5, 1000, async () => {\n    try {\n      if (apiLevel < 23) {\n        let curLanguage, curCountry;\n        if (hasLanguage) {\n          curLanguage = (await this.getDeviceLanguage()).toLowerCase();\n          if (!hasCountry && language === curLanguage) {\n            return true;\n          }\n        }\n        if (hasCountry) {\n          curCountry = (await this.getDeviceCountry()).toLowerCase();\n          if (!hasLanguage && country === curCountry) {\n            return true;\n          }\n        }\n        if (language === curLanguage && country === curCountry) {\n          return true;\n        }\n      } else {\n        const curLocale = (await this.getDeviceLocale()).toLowerCase();\n        // zh-hans-cn : zh-cn\n        const localeCode = script ? `${language}-${script.toLowerCase()}-${country}` : `${language}-${country}`;\n\n        if (localeCode === curLocale) {\n          log.debug(`Requested locale is equal to current locale: '${curLocale}'`);\n          return true;\n        }\n      }\n      return false;\n    } catch (err) {\n      // if there has been an error, restart adb and retry\n      log.error(`Unable to check device localization: ${err.message}`);\n      try {\n        await this.reconnect();\n      } catch (ign) {\n        await this.restartAdb();\n      }\n      throw err;\n    }\n  });\n};\n\n/**\n * Set the locale name of the device under test.\n *\n * @param {string} language - Language. The language field is case insensitive, but Locale always canonicalizes to lower case.\n *                            format: [a-zA-Z]{2,8}. e.g. en, ja : https://developer.android.com/reference/java/util/Locale.html\n * @param {string} country - Country. The country (region) field is case insensitive, but Locale always canonicalizes to upper case.\n *                            format: [a-zA-Z]{2} | [0-9]{3}. e.g. US, JP : https://developer.android.com/reference/java/util/Locale.html\n * @param {?string} script - Script. The script field is case insensitive but Locale always canonicalizes to title case.\n *                            format: [a-zA-Z]{4}. e.g. Hans in zh-Hans-CN : https://developer.android.com/reference/java/util/Locale.html\n */\napkUtilsMethods.setDeviceLanguageCountry = async function setDeviceLanguageCountry (language, country, script = null) {\n  let hasLanguage = language && _.isString(language);\n  let hasCountry = country && _.isString(country);\n  if (!hasLanguage || !hasCountry) {\n    log.warn(`setDeviceLanguageCountry requires language and country at least`);\n    log.warn(`Got language: '${language}' and country: '${country}'`);\n    return;\n  }\n  let apiLevel = await this.getApiLevel();\n\n  language = (language || '').toLowerCase();\n  country = (country || '').toUpperCase();\n\n  if (apiLevel < 23) {\n    let curLanguage = (await this.getDeviceLanguage()).toLowerCase();\n    let curCountry = (await this.getDeviceCountry()).toUpperCase();\n\n    if (language !== curLanguage || country !== curCountry) {\n      await this.setDeviceSysLocaleViaSettingApp(language, country);\n    }\n  } else {\n    let curLocale = await this.getDeviceLocale();\n\n    // zh-Hans-CN : zh-CN\n    const localeCode = script ? `${language}-${script}-${country}` : `${language}-${country}`;\n    log.debug(`Current locale: '${curLocale}'; requested locale: '${localeCode}'`);\n    if (localeCode.toLowerCase() !== curLocale.toLowerCase()) {\n      await this.setDeviceSysLocaleViaSettingApp(language, country, script);\n    }\n  }\n};\n\n/**\n * @typedef {Object} AppInfo\n * @property {string} name - Package name, for example 'com.acme.app'.\n * @property {number} versionCode - Version code.\n * @property {string} versionName - Version name, for example '1.0'.\n */\n\n/**\n * Get the package info from local apk file.\n *\n * @param {string} appPath - The full path to existing .apk(s) package on the local\n *                           file system.\n * @return {?AppInfo} The parsed application information.\n */\napkUtilsMethods.getApkInfo = async function getApkInfo (appPath) {\n  if (!await fs.exists(appPath)) {\n    throw new Error(`The file at path ${appPath} does not exist or is not accessible`);\n  }\n\n  if (appPath.endsWith(APKS_EXTENSION)) {\n    appPath = await this.extractBaseApk(appPath);\n  }\n\n  try {\n    const apkReader = await ApkReader.open(appPath);\n    const manifest = await apkReader.readManifest();\n    const {pkg, versionName, versionCode} = parseManifest(manifest);\n    return {\n      name: pkg,\n      versionCode,\n      versionName,\n    };\n  } catch (e) {\n    log.warn(`Error '${e.message}' while getting badging info`);\n  }\n  return {};\n};\n\n/**\n * Get the package info from the installed application.\n *\n * @param {string} pkg - The name of the installed package.\n * @return {?AppInfo} The parsed application information.\n */\napkUtilsMethods.getPackageInfo = async function getPackageInfo (pkg) {\n  log.debug(`Getting package info for '${pkg}'`);\n  let result = {name: pkg};\n  try {\n    const stdout = await this.shell(['dumpsys', 'package', pkg]);\n    const versionNameMatch = new RegExp(/versionName=([\\d+.]+)/).exec(stdout);\n    if (versionNameMatch) {\n      result.versionName = versionNameMatch[1];\n    }\n    const versionCodeMatch = new RegExp(/versionCode=(\\d+)/).exec(stdout);\n    if (versionCodeMatch) {\n      result.versionCode = parseInt(versionCodeMatch[1], 10);\n    }\n    return result;\n  } catch (err) {\n    log.warn(`Error '${err.message}' while dumping package info`);\n  }\n  return result;\n};\n\n/**\n * Fetches base.apk of the given package to the local file system\n *\n * @param {string} pkg The package identifier (must be already installed on the device)\n * @param {string} tmpDir The destination folder path\n * @returns {string} Full path to the downloaded file\n * @throws {Error} If there was an error while fetching the .apk\n */\napkUtilsMethods.pullApk = async function pullApk (pkg, tmpDir) {\n  const stdout = _.trim(await this.shell(['pm', 'path', pkg]));\n  const packageMarker = 'package:';\n  if (!_.startsWith(stdout, packageMarker)) {\n    throw new Error(`Cannot pull the .apk package for '${pkg}'. Original error: ${stdout}`);\n  }\n\n  const remotePath = stdout.replace(packageMarker, '');\n  const tmpApp = path.resolve(tmpDir, `${pkg}.apk`);\n  await this.pull(remotePath, tmpApp);\n  log.debug(`Pulled app for package '${pkg}' to '${tmpApp}'`);\n  return tmpApp;\n};\n\n/**\n * Activates the given application or launches it if necessary.\n * The action literally simulates\n * clicking the corresponding application icon on the dashboard.\n *\n * @param {string} appId - Application package identifier\n * @throws {Error} If the app cannot be activated\n */\napkUtilsMethods.activateApp = async function activateApp (appId) {\n  log.debug(`Activating '${appId}'`);\n  const apiLevel = await this.getApiLevel();\n  // Fallback to Monkey in older APIs\n  if (apiLevel < 24) {\n    // The monkey command could raise an issue as https://stackoverflow.com/questions/44860475/how-to-use-the-monkey-command-with-an-android-system-that-doesnt-have-physical\n    // but '--pct-syskeys 0' could cause another background process issue. https://github.com/appium/appium/issues/16941#issuecomment-1129837285\n    const cmd = ['monkey',\n      '-p', appId,\n      '-c', 'android.intent.category.LAUNCHER',\n      '1'];\n    let output = '';\n    try {\n      output = await this.shell(cmd);\n      log.debug(`Command stdout: ${output}`);\n    } catch (e) {\n      log.errorAndThrow(`Cannot activate '${appId}'. Original error: ${e.message}`);\n    }\n    if (output.includes('monkey aborted')) {\n      log.errorAndThrow(`Cannot activate '${appId}'. Are you sure it is installed?`);\n    }\n    return;\n  }\n\n  let activityName = await this.resolveLaunchableActivity(appId);\n  if (activityName === RESOLVER_ACTIVITY_NAME) {\n    // https://github.com/appium/appium/issues/17128\n    log.debug(\n      `The launchable activity name of '${appId}' was resolved to '${activityName}'. ` +\n      `Switching the resolver to not use cmd`\n    );\n    activityName = await this.resolveLaunchableActivity(appId, {preferCmd: false});\n  }\n\n  const stdout = await this.shell([\n    'am', (apiLevel < 26) ? 'start' : 'start-activity',\n    '-a', 'android.intent.action.MAIN',\n    '-c', 'android.intent.category.LAUNCHER',\n    // FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_RESET_TASK_IF_NEEDED\n    // https://developer.android.com/reference/android/content/Intent#FLAG_ACTIVITY_NEW_TASK\n    // https://developer.android.com/reference/android/content/Intent#FLAG_ACTIVITY_RESET_TASK_IF_NEEDED\n    '-f', '0x10200000',\n    '-n', activityName,\n  ]);\n  log.debug(stdout);\n  if (/^error:/mi.test(stdout)) {\n    throw new Error(`Cannot activate '${appId}'. Original error: ${stdout}`);\n  }\n};\n\nexport { REMOTE_CACHE_ROOT };\nexport default apkUtilsMethods;\n"],"mappings":"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"}