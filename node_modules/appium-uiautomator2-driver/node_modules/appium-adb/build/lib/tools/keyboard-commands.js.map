{"version":3,"file":"keyboard-commands.js","names":["_logger","_interopRequireDefault","require","_asyncbox","KEYCODE_ESC","KEYCODE_BACK","keyboardCommands","hideKeyboard","timeoutMs","isKeyboardShown","canCloseKeyboard","isSoftKeyboardPresent","log","info","keyCode","keyevent","waitForCondition","waitMs","intervalMs","ign","Error","stdout","shell","inputShownMatch","exec","inputViewShownMatch","e","message","_default","exports","default"],"sources":["../../../lib/tools/keyboard-commands.js"],"sourcesContent":["import log from '../logger.js';\nimport { waitForCondition } from 'asyncbox';\n\nconst KEYCODE_ESC = 111;\nconst KEYCODE_BACK = 4;\n\nconst keyboardCommands = {};\n\n/**\n * Hides software keyboard if it is visible.\n * Noop if the keyboard is already hidden.\n *\n * @param {number} timeoutMs [1000] For how long to wait (in milliseconds)\n * until the keyboard is actually hidden.\n * @returns {boolean} `false` if the keyboard was already hidden\n * @throws {Error} If the keyboard cannot be hidden.\n */\nkeyboardCommands.hideKeyboard = async function hideKeyboard (timeoutMs = 1000) {\n  let {isKeyboardShown, canCloseKeyboard} = await this.isSoftKeyboardPresent();\n  if (!isKeyboardShown) {\n    log.info('Keyboard has no UI; no closing necessary');\n    return false;\n  }\n  // Try ESC then BACK if the first one fails\n  for (const keyCode of [KEYCODE_ESC, KEYCODE_BACK]) {\n    if (canCloseKeyboard) {\n      await this.keyevent(keyCode);\n    }\n    try {\n      return await waitForCondition(async () => {\n        ({isKeyboardShown} = await this.isSoftKeyboardPresent());\n        return !isKeyboardShown;\n      }, {waitMs: timeoutMs, intervalMs: 500});\n    } catch (ign) {}\n  }\n  throw new Error(`The software keyboard cannot be hidden`);\n};\n\n/**\n * @typedef {Object} KeyboardState\n * @property {boolean} isKeyboardShown - Whether soft keyboard is currently visible.\n * @property {boolean} canCloseKeyboard - Whether the keyboard can be closed.\n */\n\n/**\n * Retrieve the state of the software keyboard on the device under test.\n *\n * @return {KeyboardState} The keyboard state.\n */\nkeyboardCommands.isSoftKeyboardPresent = async function isSoftKeyboardPresent () {\n  try {\n    const stdout = await this.shell(['dumpsys', 'input_method']);\n    const inputShownMatch = /mInputShown=(\\w+)/.exec(stdout);\n    const inputViewShownMatch = /mIsInputViewShown=(\\w+)/.exec(stdout);\n    return {\n      isKeyboardShown: !!(inputShownMatch && inputShownMatch[1] === 'true'),\n      canCloseKeyboard: !!(inputViewShownMatch && inputViewShownMatch[1] === 'true'),\n    };\n  } catch (e) {\n    throw new Error(`Error finding softkeyboard. Original error: ${e.message}`);\n  }\n};\n\nexport default keyboardCommands;\n"],"mappings":";;;;;;;;AAAA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,SAAA,GAAAD,OAAA;AAEA,MAAME,WAAW,GAAG,GAAG;AACvB,MAAMC,YAAY,GAAG,CAAC;AAEtB,MAAMC,gBAAgB,GAAG,CAAC,CAAC;AAW3BA,gBAAgB,CAACC,YAAY,GAAG,eAAeA,YAAYA,CAAEC,SAAS,GAAG,IAAI,EAAE;EAC7E,IAAI;IAACC,eAAe;IAAEC;EAAgB,CAAC,GAAG,MAAM,IAAI,CAACC,qBAAqB,CAAC,CAAC;EAC5E,IAAI,CAACF,eAAe,EAAE;IACpBG,eAAG,CAACC,IAAI,CAAC,0CAA0C,CAAC;IACpD,OAAO,KAAK;EACd;EAEA,KAAK,MAAMC,OAAO,IAAI,CAACV,WAAW,EAAEC,YAAY,CAAC,EAAE;IACjD,IAAIK,gBAAgB,EAAE;MACpB,MAAM,IAAI,CAACK,QAAQ,CAACD,OAAO,CAAC;IAC9B;IACA,IAAI;MACF,OAAO,MAAM,IAAAE,0BAAgB,EAAC,YAAY;QACxC,CAAC;UAACP;QAAe,CAAC,GAAG,MAAM,IAAI,CAACE,qBAAqB,CAAC,CAAC;QACvD,OAAO,CAACF,eAAe;MACzB,CAAC,EAAE;QAACQ,MAAM,EAAET,SAAS;QAAEU,UAAU,EAAE;MAAG,CAAC,CAAC;IAC1C,CAAC,CAAC,OAAOC,GAAG,EAAE,CAAC;EACjB;EACA,MAAM,IAAIC,KAAK,CAAE,wCAAuC,CAAC;AAC3D,CAAC;AAaDd,gBAAgB,CAACK,qBAAqB,GAAG,eAAeA,qBAAqBA,CAAA,EAAI;EAC/E,IAAI;IACF,MAAMU,MAAM,GAAG,MAAM,IAAI,CAACC,KAAK,CAAC,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;IAC5D,MAAMC,eAAe,GAAG,mBAAmB,CAACC,IAAI,CAACH,MAAM,CAAC;IACxD,MAAMI,mBAAmB,GAAG,yBAAyB,CAACD,IAAI,CAACH,MAAM,CAAC;IAClE,OAAO;MACLZ,eAAe,EAAE,CAAC,EAAEc,eAAe,IAAIA,eAAe,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC;MACrEb,gBAAgB,EAAE,CAAC,EAAEe,mBAAmB,IAAIA,mBAAmB,CAAC,CAAC,CAAC,KAAK,MAAM;IAC/E,CAAC;EACH,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV,MAAM,IAAIN,KAAK,CAAE,+CAA8CM,CAAC,CAACC,OAAQ,EAAC,CAAC;EAC7E;AACF,CAAC;AAAC,IAAAC,QAAA,GAEatB,gBAAgB;AAAAuB,OAAA,CAAAC,OAAA,GAAAF,QAAA"}