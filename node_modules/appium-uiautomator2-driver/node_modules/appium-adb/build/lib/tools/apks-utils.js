"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _teen_process = require("teen_process");
var _logger = _interopRequireDefault(require("../logger.js"));
var _path = _interopRequireDefault(require("path"));
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("@appium/support");
var _lruCache = _interopRequireDefault(require("lru-cache"));
var _helpers = require("../helpers.js");
var _asyncLock = _interopRequireDefault(require("async-lock"));
var _bluebird = _interopRequireDefault(require("bluebird"));
const BASE_APK = 'base-master.apk';
const LANGUAGE_APK = lang => `base-${lang}.apk`;
const APKS_CACHE = new _lruCache.default({
  max: 10,
  dispose: (apksHash, extractedFilesRoot) => _support.fs.rimraf(extractedFilesRoot)
});
const APKS_CACHE_GUARD = new _asyncLock.default();
const BUNDLETOOL_TIMEOUT_MS = 4 * 60 * 1000;
const apksUtilsMethods = {};
process.on('exit', () => {
  if (!APKS_CACHE.size) {
    return;
  }
  const paths = [...APKS_CACHE.values()];
  _logger.default.debug(`Performing cleanup of ${paths.length} cached .apks ` + _support.util.pluralize('package', paths.length));
  for (const appPath of paths) {
    try {
      _support.fs.rimrafSync(appPath);
    } catch (e) {
      _logger.default.warn(e.message);
    }
  }
});
async function extractFromApks(apks, dstPath) {
  if (!_lodash.default.isArray(dstPath)) {
    dstPath = [dstPath];
  }
  return await APKS_CACHE_GUARD.acquire(apks, async () => {
    const apksHash = await _support.fs.hash(apks);
    _logger.default.debug(`Calculated '${apks}' hash: ${apksHash}`);
    if (APKS_CACHE.has(apksHash)) {
      const resultPath = _path.default.resolve(APKS_CACHE.get(apksHash), ...dstPath);
      if (await _support.fs.exists(resultPath)) {
        return resultPath;
      }
      APKS_CACHE.del(apksHash);
    }
    const tmpRoot = await _support.tempDir.openDir();
    _logger.default.debug(`Unpacking application bundle at '${apks}' to '${tmpRoot}'`);
    await (0, _helpers.unzipFile)(apks, tmpRoot);
    const resultPath = _path.default.resolve(tmpRoot, ...dstPath);
    if (!(await _support.fs.exists(resultPath))) {
      throw new Error(`${dstPath.join(_path.default.sep)} cannot be found in '${apks}' bundle. ` + `Does the archive contain a valid application bundle?`);
    }
    APKS_CACHE.set(apksHash, tmpRoot);
    return resultPath;
  });
}
apksUtilsMethods.execBundletool = async function execBundletool(args, errorMsg) {
  await this.initBundletool();
  args = ['-jar', this.binaries.bundletool, ...args];
  const env = process.env;
  if (this.adbPort) {
    env.ANDROID_ADB_SERVER_PORT = `${this.adbPort}`;
  }
  if (this.adbHost) {
    env.ANDROID_ADB_SERVER_HOST = this.adbHost;
  }
  _logger.default.debug(`Executing bundletool with arguments: ${JSON.stringify(args)}`);
  let stdout;
  try {
    ({
      stdout
    } = await (0, _teen_process.exec)(await (0, _helpers.getJavaForOs)(), args, {
      env,
      timeout: BUNDLETOOL_TIMEOUT_MS
    }));
    _logger.default.debug(`Command stdout: ${_lodash.default.truncate(stdout, {
      length: 300
    })}`);
    return stdout;
  } catch (e) {
    if (e.stdout) {
      _logger.default.debug(`Command stdout: ${e.stdout}`);
    }
    if (e.stderr) {
      _logger.default.debug(`Command stderr: ${e.stderr}`);
    }
    throw new Error(`${errorMsg}. Original error: ${e.message}`);
  }
};
apksUtilsMethods.getDeviceSpec = async function getDeviceSpec(specLocation) {
  const args = ['get-device-spec', '--adb', this.executable.path, '--device-id', this.curDeviceId, '--output', specLocation];
  _logger.default.debug(`Getting the spec for the device '${this.curDeviceId}'`);
  await this.execBundletool(args, 'Cannot retrieve the device spec');
  return specLocation;
};
apksUtilsMethods.installMultipleApks = async function installMultipleApks(apkPathsToInstall, options = {}) {
  const installArgs = (0, _helpers.buildInstallArgs)(await this.getApiLevel(), options);
  return await this.adbExec(['install-multiple', ...installArgs, ...apkPathsToInstall], {
    timeout: options.timeout,
    timeoutCapName: options.timeoutCapName
  });
};
apksUtilsMethods.installApks = async function installApks(apks, options = {}) {
  const {
    grantPermissions,
    allowTestPackages,
    timeout
  } = options;
  const args = ['install-apks', '--adb', this.executable.path, '--apks', apks, '--timeout-millis', timeout || _helpers.APKS_INSTALL_TIMEOUT, '--device-id', this.curDeviceId];
  if (allowTestPackages) {
    args.push('--allow-test-only');
  }
  const tasks = [this.execBundletool(args, `Cannot install '${_path.default.basename(apks)}' to the device ${this.curDeviceId}`)];
  if (grantPermissions) {
    tasks.push(this.getApkInfo(apks));
  }
  const [, apkInfo] = await _bluebird.default.all(tasks);
  if (grantPermissions && apkInfo) {
    await this.grantAllPermissions(apkInfo.name);
  }
};
apksUtilsMethods.extractBaseApk = async function extractBaseApk(apks) {
  return await extractFromApks(apks, ['splits', BASE_APK]);
};
apksUtilsMethods.extractLanguageApk = async function extractLanguageApk(apks, language = null) {
  if (language) {
    try {
      return await extractFromApks(apks, ['splits', LANGUAGE_APK(language)]);
    } catch (e) {
      _logger.default.debug(e.message);
      _logger.default.info(`Assuming that splitting by language is not enabled for the '${apks}' bundle ` + `and returning the main apk instead`);
      return await this.extractBaseApk(apks);
    }
  }
  const defaultLanguages = ['en', 'en_us'];
  for (const lang of defaultLanguages) {
    try {
      return await extractFromApks(apks, ['splits', LANGUAGE_APK(lang)]);
    } catch (ign) {}
  }
  _logger.default.info(`Cannot find any split apk for the default languages ${JSON.stringify(defaultLanguages)}. ` + `Returning the main apk instead.`);
  return await this.extractBaseApk(apks);
};
apksUtilsMethods.isTestPackageOnlyError = function isTestPackageOnlyError(output) {
  return /\[INSTALL_FAILED_TEST_ONLY\]/.test(output);
};
var _default = apksUtilsMethods;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdGVlbl9wcm9jZXNzIiwicmVxdWlyZSIsIl9sb2dnZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3BhdGgiLCJfbG9kYXNoIiwiX3N1cHBvcnQiLCJfbHJ1Q2FjaGUiLCJfaGVscGVycyIsIl9hc3luY0xvY2siLCJfYmx1ZWJpcmQiLCJCQVNFX0FQSyIsIkxBTkdVQUdFX0FQSyIsImxhbmciLCJBUEtTX0NBQ0hFIiwiTFJVIiwibWF4IiwiZGlzcG9zZSIsImFwa3NIYXNoIiwiZXh0cmFjdGVkRmlsZXNSb290IiwiZnMiLCJyaW1yYWYiLCJBUEtTX0NBQ0hFX0dVQVJEIiwiQXN5bmNMb2NrIiwiQlVORExFVE9PTF9USU1FT1VUX01TIiwiYXBrc1V0aWxzTWV0aG9kcyIsInByb2Nlc3MiLCJvbiIsInNpemUiLCJwYXRocyIsInZhbHVlcyIsImxvZyIsImRlYnVnIiwibGVuZ3RoIiwidXRpbCIsInBsdXJhbGl6ZSIsImFwcFBhdGgiLCJyaW1yYWZTeW5jIiwiZSIsIndhcm4iLCJtZXNzYWdlIiwiZXh0cmFjdEZyb21BcGtzIiwiYXBrcyIsImRzdFBhdGgiLCJfIiwiaXNBcnJheSIsImFjcXVpcmUiLCJoYXNoIiwiaGFzIiwicmVzdWx0UGF0aCIsInBhdGgiLCJyZXNvbHZlIiwiZ2V0IiwiZXhpc3RzIiwiZGVsIiwidG1wUm9vdCIsInRlbXBEaXIiLCJvcGVuRGlyIiwidW56aXBGaWxlIiwiRXJyb3IiLCJqb2luIiwic2VwIiwic2V0IiwiZXhlY0J1bmRsZXRvb2wiLCJhcmdzIiwiZXJyb3JNc2ciLCJpbml0QnVuZGxldG9vbCIsImJpbmFyaWVzIiwiYnVuZGxldG9vbCIsImVudiIsImFkYlBvcnQiLCJBTkRST0lEX0FEQl9TRVJWRVJfUE9SVCIsImFkYkhvc3QiLCJBTkRST0lEX0FEQl9TRVJWRVJfSE9TVCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdGRvdXQiLCJleGVjIiwiZ2V0SmF2YUZvck9zIiwidGltZW91dCIsInRydW5jYXRlIiwic3RkZXJyIiwiZ2V0RGV2aWNlU3BlYyIsInNwZWNMb2NhdGlvbiIsImV4ZWN1dGFibGUiLCJjdXJEZXZpY2VJZCIsImluc3RhbGxNdWx0aXBsZUFwa3MiLCJhcGtQYXRoc1RvSW5zdGFsbCIsIm9wdGlvbnMiLCJpbnN0YWxsQXJncyIsImJ1aWxkSW5zdGFsbEFyZ3MiLCJnZXRBcGlMZXZlbCIsImFkYkV4ZWMiLCJ0aW1lb3V0Q2FwTmFtZSIsImluc3RhbGxBcGtzIiwiZ3JhbnRQZXJtaXNzaW9ucyIsImFsbG93VGVzdFBhY2thZ2VzIiwiQVBLU19JTlNUQUxMX1RJTUVPVVQiLCJwdXNoIiwidGFza3MiLCJiYXNlbmFtZSIsImdldEFwa0luZm8iLCJhcGtJbmZvIiwiQiIsImFsbCIsImdyYW50QWxsUGVybWlzc2lvbnMiLCJuYW1lIiwiZXh0cmFjdEJhc2VBcGsiLCJleHRyYWN0TGFuZ3VhZ2VBcGsiLCJsYW5ndWFnZSIsImluZm8iLCJkZWZhdWx0TGFuZ3VhZ2VzIiwiaWduIiwiaXNUZXN0UGFja2FnZU9ubHlFcnJvciIsIm91dHB1dCIsInRlc3QiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3Rvb2xzL2Fwa3MtdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlci5qcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBmcywgdGVtcERpciwgdXRpbCB9IGZyb20gJ0BhcHBpdW0vc3VwcG9ydCc7XG5pbXBvcnQgTFJVIGZyb20gJ2xydS1jYWNoZSc7XG5pbXBvcnQge1xuICBnZXRKYXZhRm9yT3MsIHVuemlwRmlsZSwgYnVpbGRJbnN0YWxsQXJncywgQVBLU19JTlNUQUxMX1RJTUVPVVRcbn0gZnJvbSAnLi4vaGVscGVycy5qcyc7XG5pbXBvcnQgQXN5bmNMb2NrIGZyb20gJ2FzeW5jLWxvY2snO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuXG5jb25zdCBCQVNFX0FQSyA9ICdiYXNlLW1hc3Rlci5hcGsnO1xuY29uc3QgTEFOR1VBR0VfQVBLID0gKGxhbmcpID0+IGBiYXNlLSR7bGFuZ30uYXBrYDtcbmNvbnN0IEFQS1NfQ0FDSEUgPSBuZXcgTFJVKHtcbiAgbWF4OiAxMCxcbiAgZGlzcG9zZTogKGFwa3NIYXNoLCBleHRyYWN0ZWRGaWxlc1Jvb3QpID0+IGZzLnJpbXJhZihleHRyYWN0ZWRGaWxlc1Jvb3QpLFxufSk7XG5jb25zdCBBUEtTX0NBQ0hFX0dVQVJEID0gbmV3IEFzeW5jTG9jaygpO1xuY29uc3QgQlVORExFVE9PTF9USU1FT1VUX01TID0gNCAqIDYwICogMTAwMDtcblxuY29uc3QgYXBrc1V0aWxzTWV0aG9kcyA9IHt9O1xuXG5wcm9jZXNzLm9uKCdleGl0JywgKCkgPT4ge1xuICBpZiAoIUFQS1NfQ0FDSEUuc2l6ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHBhdGhzID0gWy4uLkFQS1NfQ0FDSEUudmFsdWVzKCldO1xuICBsb2cuZGVidWcoYFBlcmZvcm1pbmcgY2xlYW51cCBvZiAke3BhdGhzLmxlbmd0aH0gY2FjaGVkIC5hcGtzIGAgK1xuICAgIHV0aWwucGx1cmFsaXplKCdwYWNrYWdlJywgcGF0aHMubGVuZ3RoKSk7XG4gIGZvciAoY29uc3QgYXBwUGF0aCBvZiBwYXRocykge1xuICAgIHRyeSB7XG4gICAgICAvLyBBc3luY2hyb25vdXMgY2FsbHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gb25FeGl0IGhhbmRsZXJcbiAgICAgIGZzLnJpbXJhZlN5bmMoYXBwUGF0aCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nLndhcm4oZS5tZXNzYWdlKTtcbiAgICB9XG4gIH1cbn0pO1xuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSBwYXJ0aWN1bGFyIGFwa3MgcGFja2FnZSBpbnRvIGEgdGVtcG9yYXJ5IGZvbGRlcixcbiAqIGZpbmRzIGFuZCByZXR1cm5zIHRoZSBmdWxsIHBhdGggdG8gdGhlIGZpbGUgY29udGFpbmVkIGluIHRoaXMgYXBrLlxuICogVGhlIHJlc3VsdGluZyB0ZW1wb3JhcnkgcGF0aCwgd2hlcmUgdGhlIC5hcGtzIGZpbGUgaGFzIGJlZW4gZXh0cmFjdGVkLFxuICogd2lsbCBiZSBzdG9yZWQgaW50byB0aGUgaW50ZXJuYWwgTFJVIGNhY2hlIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFwa3MgLSBUaGUgZnVsbCBwYXRoIHRvIHRoZSAuYXBrcyBmaWxlXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxTdHJpbmc+fSBkc3RQYXRoIC0gVGhlIHJlbGF0aXZlIHBhdGggdG8gdGhlIGRlc3RpbmF0aW9uIGZpbGUsXG4gKiB3aGljaCBpcyBnb2luZyB0byBiZSBleHRyYWN0ZWQsIHdoZXJlIGVhY2ggcGF0aCBjb21wb25lbnQgaXMgYW4gYXJyYXkgaXRlbVxuICogQHJldHVybnMge3N0cmluZ30gRnVsbCBwYXRoIHRvIHRoZSBleHRyYWN0ZWQgZmlsZVxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSByZXF1ZXN0ZWQgaXRlbSBkb2VzIG5vdCBleGlzdCBpbiB0aGUgZXh0cmFjdGVkIGFyY2hpdmUgb3IgdGhlIHByb3ZpZGVzXG4gKiBhcGtzIGZpbGUgaXMgbm90IGEgdmFsaWQgYnVuZGxlXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGV4dHJhY3RGcm9tQXBrcyAoYXBrcywgZHN0UGF0aCkge1xuICBpZiAoIV8uaXNBcnJheShkc3RQYXRoKSkge1xuICAgIGRzdFBhdGggPSBbZHN0UGF0aF07XG4gIH1cblxuICByZXR1cm4gYXdhaXQgQVBLU19DQUNIRV9HVUFSRC5hY3F1aXJlKGFwa3MsIGFzeW5jICgpID0+IHtcbiAgICAvLyBJdCBtaWdodCBiZSB0aGF0IHRoZSBvcmlnaW5hbCBmaWxlIGhhcyBiZWVuIHJlcGxhY2VkLFxuICAgIC8vIHNvIHdlIG5lZWQgdG8ga2VlcCB0aGUgaGFzaCBzdW1zIGluc3RlYWQgb2YgdGhlIGFjdHVhbCBmaWxlIHBhdGhzXG4gICAgLy8gYXMgY2FjaGluZyBrZXlzXG4gICAgY29uc3QgYXBrc0hhc2ggPSBhd2FpdCBmcy5oYXNoKGFwa3MpO1xuICAgIGxvZy5kZWJ1ZyhgQ2FsY3VsYXRlZCAnJHthcGtzfScgaGFzaDogJHthcGtzSGFzaH1gKTtcblxuICAgIGlmIChBUEtTX0NBQ0hFLmhhcyhhcGtzSGFzaCkpIHtcbiAgICAgIGNvbnN0IHJlc3VsdFBhdGggPSBwYXRoLnJlc29sdmUoQVBLU19DQUNIRS5nZXQoYXBrc0hhc2gpLCAuLi5kc3RQYXRoKTtcbiAgICAgIGlmIChhd2FpdCBmcy5leGlzdHMocmVzdWx0UGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFBhdGg7XG4gICAgICB9XG4gICAgICBBUEtTX0NBQ0hFLmRlbChhcGtzSGFzaCk7XG4gICAgfVxuXG4gICAgY29uc3QgdG1wUm9vdCA9IGF3YWl0IHRlbXBEaXIub3BlbkRpcigpO1xuICAgIGxvZy5kZWJ1ZyhgVW5wYWNraW5nIGFwcGxpY2F0aW9uIGJ1bmRsZSBhdCAnJHthcGtzfScgdG8gJyR7dG1wUm9vdH0nYCk7XG4gICAgYXdhaXQgdW56aXBGaWxlKGFwa3MsIHRtcFJvb3QpO1xuICAgIGNvbnN0IHJlc3VsdFBhdGggPSBwYXRoLnJlc29sdmUodG1wUm9vdCwgLi4uZHN0UGF0aCk7XG4gICAgaWYgKCFhd2FpdCBmcy5leGlzdHMocmVzdWx0UGF0aCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtkc3RQYXRoLmpvaW4ocGF0aC5zZXApfSBjYW5ub3QgYmUgZm91bmQgaW4gJyR7YXBrc30nIGJ1bmRsZS4gYCArXG4gICAgICAgIGBEb2VzIHRoZSBhcmNoaXZlIGNvbnRhaW4gYSB2YWxpZCBhcHBsaWNhdGlvbiBidW5kbGU/YCk7XG4gICAgfVxuICAgIEFQS1NfQ0FDSEUuc2V0KGFwa3NIYXNoLCB0bXBSb290KTtcbiAgICByZXR1cm4gcmVzdWx0UGF0aDtcbiAgfSk7XG59XG5cbi8qKlxuICogRXhlY3V0ZXMgYnVuZGxldG9vbCB1dGlsaXR5IHdpdGggZ2l2ZW4gYXJndW1lbnRzIGFuZCByZXR1cm5zIHRoZSBhY3R1YWwgc3Rkb3V0XG4gKlxuICogQHBhcmFtIHtBcnJheTxTdHJpbmc+fSBhcmdzIC0gdGhlIGxpc3Qgb2YgYnVuZGxldG9vbCBhcmd1bWVudHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBlcnJvck1zZyAtIFRoZSBjdXN0b21pemVkIGVycm9yIG1lc3NhZ2Ugc3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgYWN0dWFsIGNvbW1hbmQgc3Rkb3V0XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgYnVuZGxldG9vbCBqYXIgZG9lcyBub3QgZXhpc3QgaW4gUEFUSCBvciB0aGVyZSB3YXMgYW4gZXJyb3Igd2hpbGVcbiAqIGV4ZWN1dGluZyBpdFxuICovXG5hcGtzVXRpbHNNZXRob2RzLmV4ZWNCdW5kbGV0b29sID0gYXN5bmMgZnVuY3Rpb24gZXhlY0J1bmRsZXRvb2wgKGFyZ3MsIGVycm9yTXNnKSB7XG4gIGF3YWl0IHRoaXMuaW5pdEJ1bmRsZXRvb2woKTtcbiAgYXJncyA9IFtcbiAgICAnLWphcicsIHRoaXMuYmluYXJpZXMuYnVuZGxldG9vbCxcbiAgICAuLi5hcmdzXG4gIF07XG4gIGNvbnN0IGVudiA9IHByb2Nlc3MuZW52O1xuICBpZiAodGhpcy5hZGJQb3J0KSB7XG4gICAgZW52LkFORFJPSURfQURCX1NFUlZFUl9QT1JUID0gYCR7dGhpcy5hZGJQb3J0fWA7XG4gIH1cbiAgaWYgKHRoaXMuYWRiSG9zdCkge1xuICAgIGVudi5BTkRST0lEX0FEQl9TRVJWRVJfSE9TVCA9IHRoaXMuYWRiSG9zdDtcbiAgfVxuICBsb2cuZGVidWcoYEV4ZWN1dGluZyBidW5kbGV0b29sIHdpdGggYXJndW1lbnRzOiAke0pTT04uc3RyaW5naWZ5KGFyZ3MpfWApO1xuICBsZXQgc3Rkb3V0O1xuICB0cnkge1xuICAgICh7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoYXdhaXQgZ2V0SmF2YUZvck9zKCksIGFyZ3MsIHtcbiAgICAgIGVudixcbiAgICAgIHRpbWVvdXQ6IEJVTkRMRVRPT0xfVElNRU9VVF9NUyxcbiAgICB9KSk7XG4gICAgbG9nLmRlYnVnKGBDb21tYW5kIHN0ZG91dDogJHtfLnRydW5jYXRlKHN0ZG91dCwge2xlbmd0aDogMzAwfSl9YCk7XG4gICAgcmV0dXJuIHN0ZG91dDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlLnN0ZG91dCkge1xuICAgICAgbG9nLmRlYnVnKGBDb21tYW5kIHN0ZG91dDogJHtlLnN0ZG91dH1gKTtcbiAgICB9XG4gICAgaWYgKGUuc3RkZXJyKSB7XG4gICAgICBsb2cuZGVidWcoYENvbW1hbmQgc3RkZXJyOiAke2Uuc3RkZXJyfWApO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZXJyb3JNc2d9LiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNwZWNMb2NhdGlvbiAtIFRoZSBmdWxsIHBhdGggdG8gdGhlIGdlbmVyYXRlZCBkZXZpY2Ugc3BlYyBsb2NhdGlvblxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHNhbWUgYHNwZWNMb2NhdGlvbmAgdmFsdWVcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBpdCBpcyBub3QgcG9zc2libGUgdG8gcmV0cmlldmUgdGhlIHNwZWMgZm9yIHRoZSBjdXJyZW50IGRldmljZVxuICovXG5hcGtzVXRpbHNNZXRob2RzLmdldERldmljZVNwZWMgPSBhc3luYyBmdW5jdGlvbiBnZXREZXZpY2VTcGVjIChzcGVjTG9jYXRpb24pIHtcbiAgY29uc3QgYXJncyA9IFtcbiAgICAnZ2V0LWRldmljZS1zcGVjJyxcbiAgICAnLS1hZGInLCB0aGlzLmV4ZWN1dGFibGUucGF0aCxcbiAgICAnLS1kZXZpY2UtaWQnLCB0aGlzLmN1ckRldmljZUlkLFxuICAgICctLW91dHB1dCcsIHNwZWNMb2NhdGlvbixcbiAgXTtcbiAgbG9nLmRlYnVnKGBHZXR0aW5nIHRoZSBzcGVjIGZvciB0aGUgZGV2aWNlICcke3RoaXMuY3VyRGV2aWNlSWR9J2ApO1xuICBhd2FpdCB0aGlzLmV4ZWNCdW5kbGV0b29sKGFyZ3MsICdDYW5ub3QgcmV0cmlldmUgdGhlIGRldmljZSBzcGVjJyk7XG4gIHJldHVybiBzcGVjTG9jYXRpb247XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEluc3RhbGxNdWx0aXBsZUFwa3NPcHRpb25zXG4gKiBAcHJvcGVydHkgez9udW1iZXJ8c3RyaW5nfSB0aW1lb3V0IFsyMDAwMF0gLSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IHVudGlsXG4gKiB0aGUgaW5zdGFsbGF0aW9uIGlzIGNvbXBsZXRlZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHRpbWVvdXRDYXBOYW1lIFthbmRyb2lkSW5zdGFsbFRpbWVvdXRdIC0gVGhlIHRpbWVvdXQgb3B0aW9uIG5hbWVcbiAqIHVzZXJzIGNhbiBpbmNyZWFzZSB0aGUgdGltZW91dC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gYWxsb3dUZXN0UGFja2FnZXMgW2ZhbHNlXSAtIFNldCB0byB0cnVlIGluIG9yZGVyIHRvIGFsbG93IHRlc3RcbiAqIHBhY2thZ2VzIGluc3RhbGxhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gdXNlU2RjYXJkIFtmYWxzZV0gLSBTZXQgdG8gdHJ1ZSB0byBpbnN0YWxsIHRoZSBhcHAgb24gc2RjYXJkXG4gKiBpbnN0ZWFkIG9mIHRoZSBkZXZpY2UgbWVtb3J5LlxuICogQHByb3BlcnR5IHtib29sZWFufSBncmFudFBlcm1pc3Npb25zIFtmYWxzZV0gLSBTZXQgdG8gdHJ1ZSBpbiBvcmRlciB0byBncmFudCBhbGwgdGhlXG4gKiBwZXJtaXNzaW9ucyByZXF1ZXN0ZWQgaW4gdGhlIGFwcGxpY2F0aW9uJ3MgbWFuaWZlc3QgYXV0b21hdGljYWxseSBhZnRlciB0aGUgaW5zdGFsbGF0aW9uXG4gKiBpcyBjb21wbGV0ZWQgdW5kZXIgQW5kcm9pZCA2Ky5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcGFydGlhbEluc3RhbGwgW2ZhbHNlXSAtIEluc3RhbGwgYXBrcyBwYXJ0aWFsbHkuIEl0IGlzIHVzZWQgZm9yICdpbnN0YWxsLW11bHRpcGxlJy5cbiAqIGh0dHBzOi8vYW5kcm9pZC5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvMTExMDY0L3doYXQtaXMtYS1wYXJ0aWFsLWFwcGxpY2F0aW9uLWluc3RhbGwtdmlhLWFkYlxuICovXG5cbi8qKlxuICogSW5zdGFsbHMgdGhlIGdpdmVuIGFwa3MgaW50byB0aGUgZGV2aWNlIHVuZGVyIHRlc3RcbiAqXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGFwa1BhdGhzVG9JbnN0YWxsIC0gVGhlIGZ1bGwgcGF0aHMgdG8gaW5zdGFsbCBhcGtzXG4gKiBAcGFyYW0gez9pbnN0YWxsTXVsdGlwbGVBcGtzT3B0aW9uc30gb3B0aW9ucyAtIEluc3RhbGxhdGlvbiBvcHRpb25zXG4gKi9cbmFwa3NVdGlsc01ldGhvZHMuaW5zdGFsbE11bHRpcGxlQXBrcyA9IGFzeW5jIGZ1bmN0aW9uIGluc3RhbGxNdWx0aXBsZUFwa3MgKGFwa1BhdGhzVG9JbnN0YWxsLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgaW5zdGFsbEFyZ3MgPSBidWlsZEluc3RhbGxBcmdzKGF3YWl0IHRoaXMuZ2V0QXBpTGV2ZWwoKSwgb3B0aW9ucyk7XG4gIHJldHVybiBhd2FpdCB0aGlzLmFkYkV4ZWMoWydpbnN0YWxsLW11bHRpcGxlJywgLi4uaW5zdGFsbEFyZ3MsIC4uLmFwa1BhdGhzVG9JbnN0YWxsXSwge1xuICAgIHRpbWVvdXQ6IG9wdGlvbnMudGltZW91dCxcbiAgICB0aW1lb3V0Q2FwTmFtZTogb3B0aW9ucy50aW1lb3V0Q2FwTmFtZSxcbiAgfSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEluc3RhbGxBcGtzT3B0aW9uc1xuICogQHByb3BlcnR5IHs/bnVtYmVyfHN0cmluZ30gdGltZW91dCBbMTIwMDAwXSAtIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgdW50aWxcbiAqIHRoZSBpbnN0YWxsYXRpb24gaXMgY29tcGxldGVkXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdGltZW91dENhcE5hbWUgW2FuZHJvaWRJbnN0YWxsVGltZW91dF0gLSBUaGUgdGltZW91dCBvcHRpb24gbmFtZVxuICogdXNlcnMgY2FuIGluY3JlYXNlIHRoZSB0aW1lb3V0LlxuICogQHByb3BlcnR5IHtib29sZWFufSBhbGxvd1Rlc3RQYWNrYWdlcyBbZmFsc2VdIC0gU2V0IHRvIHRydWUgaW4gb3JkZXIgdG8gYWxsb3cgdGVzdFxuICogcGFja2FnZXMgaW5zdGFsbGF0aW9uLlxuICogQHByb3BlcnR5IHtib29sZWFufSBncmFudFBlcm1pc3Npb25zIFtmYWxzZV0gLSBTZXQgdG8gdHJ1ZSBpbiBvcmRlciB0byBncmFudCBhbGwgdGhlXG4gKiBwZXJtaXNzaW9ucyByZXF1ZXN0ZWQgaW4gdGhlIGFwcGxpY2F0aW9uJ3MgbWFuaWZlc3QgYXV0b21hdGljYWxseSBhZnRlciB0aGUgaW5zdGFsbGF0aW9uXG4gKiBpcyBjb21wbGV0ZWQgdW5kZXIgQW5kcm9pZCA2Ky5cbiAqL1xuXG4vKipcbiAqIEluc3RhbGxzIHRoZSBnaXZlbiAuYXBrcyBwYWNrYWdlIGludG8gdGhlIGRldmljZSB1bmRlciB0ZXN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFwa3MgLSBUaGUgZnVsbCBwYXRoIHRvIHRoZSAuYXBrcyBmaWxlXG4gKiBAcGFyYW0gez9JbnN0YWxsQXBrc09wdGlvbnN9IG9wdGlvbnMgLSBJbnN0YWxsYXRpb24gb3B0aW9uc1xuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSAuYXBrcyBidW5kbGUgY2Fubm90IGJlIGluc3RhbGxlZFxuICovXG5hcGtzVXRpbHNNZXRob2RzLmluc3RhbGxBcGtzID0gYXN5bmMgZnVuY3Rpb24gaW5zdGFsbEFwa3MgKGFwa3MsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgZ3JhbnRQZXJtaXNzaW9ucyxcbiAgICBhbGxvd1Rlc3RQYWNrYWdlcyxcbiAgICB0aW1lb3V0LFxuICB9ID0gb3B0aW9ucztcblxuICBjb25zdCBhcmdzID0gW1xuICAgICdpbnN0YWxsLWFwa3MnLFxuICAgICctLWFkYicsIHRoaXMuZXhlY3V0YWJsZS5wYXRoLFxuICAgICctLWFwa3MnLCBhcGtzLFxuICAgICctLXRpbWVvdXQtbWlsbGlzJywgdGltZW91dCB8fCBBUEtTX0lOU1RBTExfVElNRU9VVCxcbiAgICAnLS1kZXZpY2UtaWQnLCB0aGlzLmN1ckRldmljZUlkLFxuICBdO1xuICBpZiAoYWxsb3dUZXN0UGFja2FnZXMpIHtcbiAgICBhcmdzLnB1c2goJy0tYWxsb3ctdGVzdC1vbmx5Jyk7XG4gIH1cbiAgY29uc3QgdGFza3MgPSBbXG4gICAgdGhpcy5leGVjQnVuZGxldG9vbChhcmdzLCBgQ2Fubm90IGluc3RhbGwgJyR7cGF0aC5iYXNlbmFtZShhcGtzKX0nIHRvIHRoZSBkZXZpY2UgJHt0aGlzLmN1ckRldmljZUlkfWApXG4gIF07XG4gIGlmIChncmFudFBlcm1pc3Npb25zKSB7XG4gICAgdGFza3MucHVzaCh0aGlzLmdldEFwa0luZm8oYXBrcykpO1xuICB9XG4gIGNvbnN0IFssIGFwa0luZm9dID0gYXdhaXQgQi5hbGwodGFza3MpO1xuICBpZiAoZ3JhbnRQZXJtaXNzaW9ucyAmJiBhcGtJbmZvKSB7XG4gICAgLy8gVE9ETzogU2ltcGxpZnkgaXQgYWZ0ZXIgaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9idW5kbGV0b29sL2lzc3Vlcy8yNDYgaXMgaW1wbGVtZW50ZWRcbiAgICBhd2FpdCB0aGlzLmdyYW50QWxsUGVybWlzc2lvbnMoYXBrSW5mby5uYW1lKTtcbiAgfVxufTtcblxuLyoqXG4gKiBFeHRyYWN0cyBhbmQgcmV0dXJucyB0aGUgZnVsbCBwYXRoIHRvIHRoZSBtYXN0ZXIgLmFwayBmaWxlIGluc2lkZSB0aGUgYnVuZGxlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcGtzIC0gVGhlIGZ1bGwgcGF0aCB0byB0aGUgLmFwa3MgZmlsZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZ1bGwgcGF0aCB0byB0aGUgbWFzdGVyIGJ1bmRsZSAuYXBrXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGV4dHJhY3RpbmcvZmluZGluZyB0aGUgZmlsZVxuICovXG5hcGtzVXRpbHNNZXRob2RzLmV4dHJhY3RCYXNlQXBrID0gYXN5bmMgZnVuY3Rpb24gZXh0cmFjdEJhc2VBcGsgKGFwa3MpIHtcbiAgcmV0dXJuIGF3YWl0IGV4dHJhY3RGcm9tQXBrcyhhcGtzLCBbJ3NwbGl0cycsIEJBU0VfQVBLXSk7XG59O1xuXG4vKipcbiAqIEV4dHJhY3RzIGFuZCByZXR1cm5zIHRoZSBmdWxsIHBhdGggdG8gdGhlIC5hcGssIHdoaWNoIGNvbnRhaW5zIHRoZSBjb3JyZXNwb25kaW5nXG4gKiByZXNvdXJjZXMgZm9yIHRoZSBnaXZlbiBsYW5ndWFnZSBpbiB0aGUgLmFwa3MgYnVuZGxlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcGtzIC0gVGhlIGZ1bGwgcGF0aCB0byB0aGUgLmFwa3MgZmlsZVxuICogQHBhcmFtIHs/c3RyaW5nfSBsYW5ndWFnZSAtIFRoZSBsYW5ndWFnZSBhYmJyZXZpYXRpb24uIFRoZSBkZWZhdWx0IGxhbmd1YWdlIGlzXG4gKiBnb2luZyB0byBiZSBzZWxlY3RlZCBpZiBpdCBpcyBub3Qgc2V0LlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZ1bGwgcGF0aCB0byB0aGUgY29ycmVzcG9uZGluZyBsYW5ndWFnZSAuYXBrIG9yIHRoZSBtYXN0ZXIgLmFwa1xuICogaWYgbGFuZ3VhZ2Ugc3BsaXQgaXMgbm90IGVuYWJsZWQgZm9yIHRoZSBidW5kbGUuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGV4dHJhY3RpbmcvZmluZGluZyB0aGUgZmlsZVxuICovXG5hcGtzVXRpbHNNZXRob2RzLmV4dHJhY3RMYW5ndWFnZUFwayA9IGFzeW5jIGZ1bmN0aW9uIGV4dHJhY3RMYW5ndWFnZUFwayAoYXBrcywgbGFuZ3VhZ2UgPSBudWxsKSB7XG4gIGlmIChsYW5ndWFnZSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgZXh0cmFjdEZyb21BcGtzKGFwa3MsIFsnc3BsaXRzJywgTEFOR1VBR0VfQVBLKGxhbmd1YWdlKV0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZy5kZWJ1ZyhlLm1lc3NhZ2UpO1xuICAgICAgbG9nLmluZm8oYEFzc3VtaW5nIHRoYXQgc3BsaXR0aW5nIGJ5IGxhbmd1YWdlIGlzIG5vdCBlbmFibGVkIGZvciB0aGUgJyR7YXBrc30nIGJ1bmRsZSBgICtcbiAgICAgICAgYGFuZCByZXR1cm5pbmcgdGhlIG1haW4gYXBrIGluc3RlYWRgKTtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmV4dHJhY3RCYXNlQXBrKGFwa3MpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGRlZmF1bHRMYW5ndWFnZXMgPSBbJ2VuJywgJ2VuX3VzJ107XG4gIGZvciAoY29uc3QgbGFuZyBvZiBkZWZhdWx0TGFuZ3VhZ2VzKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCBleHRyYWN0RnJvbUFwa3MoYXBrcywgWydzcGxpdHMnLCBMQU5HVUFHRV9BUEsobGFuZyldKTtcbiAgICB9IGNhdGNoIChpZ24pIHt9XG4gIH1cblxuICBsb2cuaW5mbyhgQ2Fubm90IGZpbmQgYW55IHNwbGl0IGFwayBmb3IgdGhlIGRlZmF1bHQgbGFuZ3VhZ2VzICR7SlNPTi5zdHJpbmdpZnkoZGVmYXVsdExhbmd1YWdlcyl9LiBgICtcbiAgICBgUmV0dXJuaW5nIHRoZSBtYWluIGFwayBpbnN0ZWFkLmApO1xuICByZXR1cm4gYXdhaXQgdGhpcy5leHRyYWN0QmFzZUFwayhhcGtzKTtcbn07XG5cbmFwa3NVdGlsc01ldGhvZHMuaXNUZXN0UGFja2FnZU9ubHlFcnJvciA9IGZ1bmN0aW9uIGlzVGVzdFBhY2thZ2VPbmx5RXJyb3IgKG91dHB1dCkge1xuICByZXR1cm4gL1xcW0lOU1RBTExfRkFJTEVEX1RFU1RfT05MWVxcXS8udGVzdChvdXRwdXQpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgYXBrc1V0aWxzTWV0aG9kcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxhQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxPQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxLQUFBLEdBQUFELHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBSSxPQUFBLEdBQUFGLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBSyxRQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxTQUFBLEdBQUFKLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBTyxRQUFBLEdBQUFQLE9BQUE7QUFHQSxJQUFBUSxVQUFBLEdBQUFOLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBUyxTQUFBLEdBQUFQLHNCQUFBLENBQUFGLE9BQUE7QUFFQSxNQUFNVSxRQUFRLEdBQUcsaUJBQWlCO0FBQ2xDLE1BQU1DLFlBQVksR0FBSUMsSUFBSSxJQUFNLFFBQU9BLElBQUssTUFBSztBQUNqRCxNQUFNQyxVQUFVLEdBQUcsSUFBSUMsaUJBQUcsQ0FBQztFQUN6QkMsR0FBRyxFQUFFLEVBQUU7RUFDUEMsT0FBTyxFQUFFQSxDQUFDQyxRQUFRLEVBQUVDLGtCQUFrQixLQUFLQyxXQUFFLENBQUNDLE1BQU0sQ0FBQ0Ysa0JBQWtCO0FBQ3pFLENBQUMsQ0FBQztBQUNGLE1BQU1HLGdCQUFnQixHQUFHLElBQUlDLGtCQUFTLENBQUMsQ0FBQztBQUN4QyxNQUFNQyxxQkFBcUIsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUk7QUFFM0MsTUFBTUMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO0FBRTNCQyxPQUFPLENBQUNDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTTtFQUN2QixJQUFJLENBQUNiLFVBQVUsQ0FBQ2MsSUFBSSxFQUFFO0lBQ3BCO0VBQ0Y7RUFFQSxNQUFNQyxLQUFLLEdBQUcsQ0FBQyxHQUFHZixVQUFVLENBQUNnQixNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQ3RDQyxlQUFHLENBQUNDLEtBQUssQ0FBRSx5QkFBd0JILEtBQUssQ0FBQ0ksTUFBTyxnQkFBZSxHQUM3REMsYUFBSSxDQUFDQyxTQUFTLENBQUMsU0FBUyxFQUFFTixLQUFLLENBQUNJLE1BQU0sQ0FBQyxDQUFDO0VBQzFDLEtBQUssTUFBTUcsT0FBTyxJQUFJUCxLQUFLLEVBQUU7SUFDM0IsSUFBSTtNQUVGVCxXQUFFLENBQUNpQixVQUFVLENBQUNELE9BQU8sQ0FBQztJQUN4QixDQUFDLENBQUMsT0FBT0UsQ0FBQyxFQUFFO01BQ1ZQLGVBQUcsQ0FBQ1EsSUFBSSxDQUFDRCxDQUFDLENBQUNFLE9BQU8sQ0FBQztJQUNyQjtFQUNGO0FBQ0YsQ0FBQyxDQUFDO0FBZUYsZUFBZUMsZUFBZUEsQ0FBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUU7RUFDN0MsSUFBSSxDQUFDQyxlQUFDLENBQUNDLE9BQU8sQ0FBQ0YsT0FBTyxDQUFDLEVBQUU7SUFDdkJBLE9BQU8sR0FBRyxDQUFDQSxPQUFPLENBQUM7RUFDckI7RUFFQSxPQUFPLE1BQU1yQixnQkFBZ0IsQ0FBQ3dCLE9BQU8sQ0FBQ0osSUFBSSxFQUFFLFlBQVk7SUFJdEQsTUFBTXhCLFFBQVEsR0FBRyxNQUFNRSxXQUFFLENBQUMyQixJQUFJLENBQUNMLElBQUksQ0FBQztJQUNwQ1gsZUFBRyxDQUFDQyxLQUFLLENBQUUsZUFBY1UsSUFBSyxXQUFVeEIsUUFBUyxFQUFDLENBQUM7SUFFbkQsSUFBSUosVUFBVSxDQUFDa0MsR0FBRyxDQUFDOUIsUUFBUSxDQUFDLEVBQUU7TUFDNUIsTUFBTStCLFVBQVUsR0FBR0MsYUFBSSxDQUFDQyxPQUFPLENBQUNyQyxVQUFVLENBQUNzQyxHQUFHLENBQUNsQyxRQUFRLENBQUMsRUFBRSxHQUFHeUIsT0FBTyxDQUFDO01BQ3JFLElBQUksTUFBTXZCLFdBQUUsQ0FBQ2lDLE1BQU0sQ0FBQ0osVUFBVSxDQUFDLEVBQUU7UUFDL0IsT0FBT0EsVUFBVTtNQUNuQjtNQUNBbkMsVUFBVSxDQUFDd0MsR0FBRyxDQUFDcEMsUUFBUSxDQUFDO0lBQzFCO0lBRUEsTUFBTXFDLE9BQU8sR0FBRyxNQUFNQyxnQkFBTyxDQUFDQyxPQUFPLENBQUMsQ0FBQztJQUN2QzFCLGVBQUcsQ0FBQ0MsS0FBSyxDQUFFLG9DQUFtQ1UsSUFBSyxTQUFRYSxPQUFRLEdBQUUsQ0FBQztJQUN0RSxNQUFNLElBQUFHLGtCQUFTLEVBQUNoQixJQUFJLEVBQUVhLE9BQU8sQ0FBQztJQUM5QixNQUFNTixVQUFVLEdBQUdDLGFBQUksQ0FBQ0MsT0FBTyxDQUFDSSxPQUFPLEVBQUUsR0FBR1osT0FBTyxDQUFDO0lBQ3BELElBQUksRUFBQyxNQUFNdkIsV0FBRSxDQUFDaUMsTUFBTSxDQUFDSixVQUFVLENBQUMsR0FBRTtNQUNoQyxNQUFNLElBQUlVLEtBQUssQ0FBRSxHQUFFaEIsT0FBTyxDQUFDaUIsSUFBSSxDQUFDVixhQUFJLENBQUNXLEdBQUcsQ0FBRSx3QkFBdUJuQixJQUFLLFlBQVcsR0FDOUUsc0RBQXFELENBQUM7SUFDM0Q7SUFDQTVCLFVBQVUsQ0FBQ2dELEdBQUcsQ0FBQzVDLFFBQVEsRUFBRXFDLE9BQU8sQ0FBQztJQUNqQyxPQUFPTixVQUFVO0VBQ25CLENBQUMsQ0FBQztBQUNKO0FBV0F4QixnQkFBZ0IsQ0FBQ3NDLGNBQWMsR0FBRyxlQUFlQSxjQUFjQSxDQUFFQyxJQUFJLEVBQUVDLFFBQVEsRUFBRTtFQUMvRSxNQUFNLElBQUksQ0FBQ0MsY0FBYyxDQUFDLENBQUM7RUFDM0JGLElBQUksR0FBRyxDQUNMLE1BQU0sRUFBRSxJQUFJLENBQUNHLFFBQVEsQ0FBQ0MsVUFBVSxFQUNoQyxHQUFHSixJQUFJLENBQ1I7RUFDRCxNQUFNSyxHQUFHLEdBQUczQyxPQUFPLENBQUMyQyxHQUFHO0VBQ3ZCLElBQUksSUFBSSxDQUFDQyxPQUFPLEVBQUU7SUFDaEJELEdBQUcsQ0FBQ0UsdUJBQXVCLEdBQUksR0FBRSxJQUFJLENBQUNELE9BQVEsRUFBQztFQUNqRDtFQUNBLElBQUksSUFBSSxDQUFDRSxPQUFPLEVBQUU7SUFDaEJILEdBQUcsQ0FBQ0ksdUJBQXVCLEdBQUcsSUFBSSxDQUFDRCxPQUFPO0VBQzVDO0VBQ0F6QyxlQUFHLENBQUNDLEtBQUssQ0FBRSx3Q0FBdUMwQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ1gsSUFBSSxDQUFFLEVBQUMsQ0FBQztFQUN6RSxJQUFJWSxNQUFNO0VBQ1YsSUFBSTtJQUNGLENBQUM7TUFBQ0E7SUFBTSxDQUFDLEdBQUcsTUFBTSxJQUFBQyxrQkFBSSxFQUFDLE1BQU0sSUFBQUMscUJBQVksRUFBQyxDQUFDLEVBQUVkLElBQUksRUFBRTtNQUNqREssR0FBRztNQUNIVSxPQUFPLEVBQUV2RDtJQUNYLENBQUMsQ0FBQztJQUNGTyxlQUFHLENBQUNDLEtBQUssQ0FBRSxtQkFBa0JZLGVBQUMsQ0FBQ29DLFFBQVEsQ0FBQ0osTUFBTSxFQUFFO01BQUMzQyxNQUFNLEVBQUU7SUFBRyxDQUFDLENBQUUsRUFBQyxDQUFDO0lBQ2pFLE9BQU8yQyxNQUFNO0VBQ2YsQ0FBQyxDQUFDLE9BQU90QyxDQUFDLEVBQUU7SUFDVixJQUFJQSxDQUFDLENBQUNzQyxNQUFNLEVBQUU7TUFDWjdDLGVBQUcsQ0FBQ0MsS0FBSyxDQUFFLG1CQUFrQk0sQ0FBQyxDQUFDc0MsTUFBTyxFQUFDLENBQUM7SUFDMUM7SUFDQSxJQUFJdEMsQ0FBQyxDQUFDMkMsTUFBTSxFQUFFO01BQ1psRCxlQUFHLENBQUNDLEtBQUssQ0FBRSxtQkFBa0JNLENBQUMsQ0FBQzJDLE1BQU8sRUFBQyxDQUFDO0lBQzFDO0lBQ0EsTUFBTSxJQUFJdEIsS0FBSyxDQUFFLEdBQUVNLFFBQVMscUJBQW9CM0IsQ0FBQyxDQUFDRSxPQUFRLEVBQUMsQ0FBQztFQUM5RDtBQUNGLENBQUM7QUFPRGYsZ0JBQWdCLENBQUN5RCxhQUFhLEdBQUcsZUFBZUEsYUFBYUEsQ0FBRUMsWUFBWSxFQUFFO0VBQzNFLE1BQU1uQixJQUFJLEdBQUcsQ0FDWCxpQkFBaUIsRUFDakIsT0FBTyxFQUFFLElBQUksQ0FBQ29CLFVBQVUsQ0FBQ2xDLElBQUksRUFDN0IsYUFBYSxFQUFFLElBQUksQ0FBQ21DLFdBQVcsRUFDL0IsVUFBVSxFQUFFRixZQUFZLENBQ3pCO0VBQ0RwRCxlQUFHLENBQUNDLEtBQUssQ0FBRSxvQ0FBbUMsSUFBSSxDQUFDcUQsV0FBWSxHQUFFLENBQUM7RUFDbEUsTUFBTSxJQUFJLENBQUN0QixjQUFjLENBQUNDLElBQUksRUFBRSxpQ0FBaUMsQ0FBQztFQUNsRSxPQUFPbUIsWUFBWTtBQUNyQixDQUFDO0FBeUJEMUQsZ0JBQWdCLENBQUM2RCxtQkFBbUIsR0FBRyxlQUFlQSxtQkFBbUJBLENBQUVDLGlCQUFpQixFQUFFQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDMUcsTUFBTUMsV0FBVyxHQUFHLElBQUFDLHlCQUFnQixFQUFDLE1BQU0sSUFBSSxDQUFDQyxXQUFXLENBQUMsQ0FBQyxFQUFFSCxPQUFPLENBQUM7RUFDdkUsT0FBTyxNQUFNLElBQUksQ0FBQ0ksT0FBTyxDQUFDLENBQUMsa0JBQWtCLEVBQUUsR0FBR0gsV0FBVyxFQUFFLEdBQUdGLGlCQUFpQixDQUFDLEVBQUU7SUFDcEZSLE9BQU8sRUFBRVMsT0FBTyxDQUFDVCxPQUFPO0lBQ3hCYyxjQUFjLEVBQUVMLE9BQU8sQ0FBQ0s7RUFDMUIsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQXNCRHBFLGdCQUFnQixDQUFDcUUsV0FBVyxHQUFHLGVBQWVBLFdBQVdBLENBQUVwRCxJQUFJLEVBQUU4QyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDN0UsTUFBTTtJQUNKTyxnQkFBZ0I7SUFDaEJDLGlCQUFpQjtJQUNqQmpCO0VBQ0YsQ0FBQyxHQUFHUyxPQUFPO0VBRVgsTUFBTXhCLElBQUksR0FBRyxDQUNYLGNBQWMsRUFDZCxPQUFPLEVBQUUsSUFBSSxDQUFDb0IsVUFBVSxDQUFDbEMsSUFBSSxFQUM3QixRQUFRLEVBQUVSLElBQUksRUFDZCxrQkFBa0IsRUFBRXFDLE9BQU8sSUFBSWtCLDZCQUFvQixFQUNuRCxhQUFhLEVBQUUsSUFBSSxDQUFDWixXQUFXLENBQ2hDO0VBQ0QsSUFBSVcsaUJBQWlCLEVBQUU7SUFDckJoQyxJQUFJLENBQUNrQyxJQUFJLENBQUMsbUJBQW1CLENBQUM7RUFDaEM7RUFDQSxNQUFNQyxLQUFLLEdBQUcsQ0FDWixJQUFJLENBQUNwQyxjQUFjLENBQUNDLElBQUksRUFBRyxtQkFBa0JkLGFBQUksQ0FBQ2tELFFBQVEsQ0FBQzFELElBQUksQ0FBRSxtQkFBa0IsSUFBSSxDQUFDMkMsV0FBWSxFQUFDLENBQUMsQ0FDdkc7RUFDRCxJQUFJVSxnQkFBZ0IsRUFBRTtJQUNwQkksS0FBSyxDQUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDRyxVQUFVLENBQUMzRCxJQUFJLENBQUMsQ0FBQztFQUNuQztFQUNBLE1BQU0sR0FBRzRELE9BQU8sQ0FBQyxHQUFHLE1BQU1DLGlCQUFDLENBQUNDLEdBQUcsQ0FBQ0wsS0FBSyxDQUFDO0VBQ3RDLElBQUlKLGdCQUFnQixJQUFJTyxPQUFPLEVBQUU7SUFFL0IsTUFBTSxJQUFJLENBQUNHLG1CQUFtQixDQUFDSCxPQUFPLENBQUNJLElBQUksQ0FBQztFQUM5QztBQUNGLENBQUM7QUFTRGpGLGdCQUFnQixDQUFDa0YsY0FBYyxHQUFHLGVBQWVBLGNBQWNBLENBQUVqRSxJQUFJLEVBQUU7RUFDckUsT0FBTyxNQUFNRCxlQUFlLENBQUNDLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRS9CLFFBQVEsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFhRGMsZ0JBQWdCLENBQUNtRixrQkFBa0IsR0FBRyxlQUFlQSxrQkFBa0JBLENBQUVsRSxJQUFJLEVBQUVtRSxRQUFRLEdBQUcsSUFBSSxFQUFFO0VBQzlGLElBQUlBLFFBQVEsRUFBRTtJQUNaLElBQUk7TUFDRixPQUFPLE1BQU1wRSxlQUFlLENBQUNDLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRTlCLFlBQVksQ0FBQ2lHLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDeEUsQ0FBQyxDQUFDLE9BQU92RSxDQUFDLEVBQUU7TUFDVlAsZUFBRyxDQUFDQyxLQUFLLENBQUNNLENBQUMsQ0FBQ0UsT0FBTyxDQUFDO01BQ3BCVCxlQUFHLENBQUMrRSxJQUFJLENBQUUsK0RBQThEcEUsSUFBSyxXQUFVLEdBQ3BGLG9DQUFtQyxDQUFDO01BQ3ZDLE9BQU8sTUFBTSxJQUFJLENBQUNpRSxjQUFjLENBQUNqRSxJQUFJLENBQUM7SUFDeEM7RUFDRjtFQUVBLE1BQU1xRSxnQkFBZ0IsR0FBRyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7RUFDeEMsS0FBSyxNQUFNbEcsSUFBSSxJQUFJa0csZ0JBQWdCLEVBQUU7SUFDbkMsSUFBSTtNQUNGLE9BQU8sTUFBTXRFLGVBQWUsQ0FBQ0MsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFOUIsWUFBWSxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUMsQ0FBQyxPQUFPbUcsR0FBRyxFQUFFLENBQUM7RUFDakI7RUFFQWpGLGVBQUcsQ0FBQytFLElBQUksQ0FBRSx1REFBc0RwQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ29DLGdCQUFnQixDQUFFLElBQUcsR0FDakcsaUNBQWdDLENBQUM7RUFDcEMsT0FBTyxNQUFNLElBQUksQ0FBQ0osY0FBYyxDQUFDakUsSUFBSSxDQUFDO0FBQ3hDLENBQUM7QUFFRGpCLGdCQUFnQixDQUFDd0Ysc0JBQXNCLEdBQUcsU0FBU0Esc0JBQXNCQSxDQUFFQyxNQUFNLEVBQUU7RUFDakYsT0FBTyw4QkFBOEIsQ0FBQ0MsSUFBSSxDQUFDRCxNQUFNLENBQUM7QUFDcEQsQ0FBQztBQUFDLElBQUFFLFFBQUEsR0FFYTNGLGdCQUFnQjtBQUFBNEYsT0FBQSxDQUFBQyxPQUFBLEdBQUFGLFFBQUEifQ==