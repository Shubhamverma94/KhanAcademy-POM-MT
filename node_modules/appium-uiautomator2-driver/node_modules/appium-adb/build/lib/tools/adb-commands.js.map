{"version":3,"file":"adb-commands.js","names":["_logger","_interopRequireDefault","require","_helpers","_path","_lodash","_support","_os","_logcat","_asyncbox","_teen_process","_bluebird","MAX_SHELL_BUFFER_LENGTH","NOT_CHANGEABLE_PERM_ERROR","IGNORED_PERM_ERRORS","MAX_PGREP_PATTERN_LEN","HIDDEN_API_POLICY_KEYS","PID_COLUMN_TITLE","PROCESS_NAME_COLUMN_TITLE","PS_TITLE_PATTERN","RegExp","MIN_API_LEVEL_WITH_PERMS_SUPPORT","methods","shellChunks","argTransformer","args","commands","cmdChunk","arg","nextCmd","_","isArray","Error","last","push","join","length","isEmpty","log","debug","JSON","stringify","lastError","cmd","shell","e","getAdbWithCorrectAdbPath","executable","path","getSdkBinaryPath","adb","initAapt","initAapt2","initZipAlign","initBundletool","binaries","bundletool","fs","which","err","getApiLevel","isInteger","_apiLevel","strOutput","getDeviceProperty","apiLevel","parseInt","trim","charCodeQ","charCodeAt","apiLevelDiff","codename","String","fromCharCode","getPlatformVersion","toLowerCase","toUpperCase","isNaN","message","info","isDeviceConnected","devices","getConnectedDevices","mkdir","remotePath","isValidClass","classString","matchComponentName","resolveLaunchableActivity","pkg","opts","preferCmd","stdout","names","parseLaunchableActivityNames","tmpRoot","tempDir","openDir","tmpApp","pullApk","apkActivity","packageAndLaunchActivityFromManifest","stack","warn","rimraf","stderr","outputFormat","EXEC_OUTPUT_FORMAT","FULL","line","split","map","forceStop","killPackage","clear","grantAllPermissions","apk","targetSdk","dumpsysOutput","targetSdkVersionUsingPKG","targetSdkVersionFromManifest","requestedPermissions","getReqPermissions","grantedPermissions","getGrantedPermissions","permissionsToGrant","difference","grantPermissions","permissions","perm","some","pattern","test","grantPermission","permission","revokePermission","cmdOutput","extractMatchingPermissions","getDeniedPermissions","getLocationProviders","getSetting","p","filter","Boolean","includes","toggleGPSLocationProvider","enabled","setSetting","setHiddenApiPolicy","value","ignoreError","k","setDefaultHiddenApiPolicy","stopAndClear","availableIMEs","getIMEListFromOutput","enabledIMEs","enableIME","imeId","disableIME","setIME","defaultIME","engine","keyevent","keycode","code","inputText","text","originalStr","escapedText","replace","adbInputEscapePattern","every","c","q","clearTextField","i","lock","isScreenLocked","timeoutMs","waitForCondition","waitMs","intervalMs","back","goToHome","getAdbPath","getScreenOrientation","getSurfaceOrientation","sendTelnetCommand","command","execEmuConsoleCommand","port","getEmulatorPort","isAirplaneModeOn","setAirplaneMode","on","broadcastAirplaneMode","privileged","ign","isWifiOn","isDataOn","setWifiAndData","wifi","data","isEmulator","util","hasValue","setWifiState","setDataState","isAnimationOn","animator_duration_scale","transition_animation_scale","window_animation_scale","setting","localPath","posix","dirname","adbExec","pull","timeout","processExists","processName","getPIDsByName","getForwardList","connections","EOL","forwardPort","systemPort","devicePort","removePortForward","getReverseList","reversePort","removePortReverse","forwardAbstractPort","ping","indexOf","restart","stopLogcat","restartAdb","waitForDevice","startLogcat","_logcatStartupParams","logcat","Logcat","debugTrace","clearDeviceLogsOnStart","startCapture","stopCapture","getLogcatLogs","getLogs","setLogcatListener","listener","removeLogcatListener","removeListener","listProcessStatus","isBoolean","_doesPsSupportAOption","getNameByPid","pid","titleMatch","exec","allTitles","pidIndex","nameOffset","pidRegex","matchedLine","items","name","_isPgrepAvailable","pgrepOutput","_canPgrepUseFullCmdLineSearch","_isPidofAvailable","shellCommand","escapeRegExp","slice","x","pids","processNameRegex","killProcessesByName","B","all","killProcessByPID","noProcessFlag","e1","broadcastProcessEnd","intent","broadcast","start","Date","now","sleep","endAndroidCoverage","instrumentProc","isRunning","stop","instrument","activity","instrumentWith","pkgActivity","androidCoverage","instrumentClass","waitPkg","waitActivity","resolve","reject","defaultArgs","concat","SubProcess","waitForActivity","property","val","setDeviceProperty","prop","getDeviceSysLanguage","getDeviceSysCountry","getDeviceSysLocale","getDeviceProductLanguage","getDeviceProductCountry","getDeviceProductLocale","getModel","getManufacturer","getScreenSize","size","getScreenDensity","density","densityNumber","setHttpProxy","proxyHost","proxyPort","proxy","isUndefined","httpProxySettins","settingKey","settingValue","deleteHttpProxy","namespace","bugreport","screenrecord","destination","options","videoSize","bitRate","timeLimit","bugReport","fullCmd","quote","runInImeContext","ime","fn","originalIme","delay","getTimeZone","listFeatures","_memoizedFeatures","memoize","curDeviceId","isStreamedInstallSupported","proto","Object","getPrototypeOf","_helpOutput","isIncrementalInstallSupported","binary","getVersion","compareVersions","version","getDeviceIdleWhitelist","output","addToDeviceIdleWhitelist","packages","pluralize","_default","exports","default"],"sources":["../../../lib/tools/adb-commands.js"],"sourcesContent":["import log from '../logger.js';\nimport {\n  getIMEListFromOutput, getSurfaceOrientation, extractMatchingPermissions,\n  parseLaunchableActivityNames, matchComponentName,\n} from '../helpers.js';\nimport path from 'path';\nimport _ from 'lodash';\nimport { fs, util, tempDir } from '@appium/support';\nimport { EOL } from 'os';\nimport Logcat from '../logcat';\nimport { sleep, waitForCondition } from 'asyncbox';\nimport { SubProcess } from 'teen_process';\nimport B from 'bluebird';\n\nconst MAX_SHELL_BUFFER_LENGTH = 1000;\nconst NOT_CHANGEABLE_PERM_ERROR = /not a changeable permission type/i;\nconst IGNORED_PERM_ERRORS = [\n  NOT_CHANGEABLE_PERM_ERROR,\n  /Unknown permission/i,\n];\nconst MAX_PGREP_PATTERN_LEN = 15;\nconst HIDDEN_API_POLICY_KEYS = [\n  'hidden_api_policy_pre_p_apps',\n  'hidden_api_policy_p_apps',\n  'hidden_api_policy'\n];\nconst PID_COLUMN_TITLE = 'PID';\nconst PROCESS_NAME_COLUMN_TITLE = 'NAME';\nconst PS_TITLE_PATTERN = new RegExp(`^(.*\\\\b${PID_COLUMN_TITLE}\\\\b.*\\\\b${PROCESS_NAME_COLUMN_TITLE}\\\\b.*)$`, 'm');\nconst MIN_API_LEVEL_WITH_PERMS_SUPPORT = 23;\n\nconst methods = {};\n\n/**\n * Creates chunks for the given arguments and executes them in `adb shell`.\n * This is faster than calling `adb shell` separately for each arg, however\n * there is a limit for a maximum length of a single adb command. that is why\n * we need all this complicated logic.\n *\n * @param {Function} argTransformer A function, that receives single argument\n * from the `args` array and transforms it into a shell command. The result\n * of the function must be an array, where each item is a part of a single command.\n * The last item of the array could be ';'. If this is not a semicolon then it is going to\n * be added automatically.\n * @param {Array<number|string>} args Array of argument values to create chunks for\n * @throws {Error} If any of the chunks returns non-zero exit code after being executed\n */\nmethods.shellChunks = async function shellChunks (argTransformer, args) {\n  const commands = [];\n  let cmdChunk = [];\n  for (const arg of args) {\n    const nextCmd = argTransformer(arg);\n    if (!_.isArray(nextCmd)) {\n      throw new Error('Argument transformer must result in an array');\n    }\n    if (_.last(nextCmd) !== ';') {\n      nextCmd.push(';');\n    }\n    if (nextCmd.join(' ').length + cmdChunk.join(' ').length >= MAX_SHELL_BUFFER_LENGTH) {\n      commands.push(cmdChunk);\n      cmdChunk = [];\n    }\n    cmdChunk = [...cmdChunk, ...nextCmd];\n  }\n  if (!_.isEmpty(cmdChunk)) {\n    commands.push(cmdChunk);\n  }\n  log.debug(`Got the following command chunks to execute: ${JSON.stringify(commands)}`);\n  let lastError = null;\n  for (const cmd of commands) {\n    try {\n      await this.shell(cmd);\n    } catch (e) {\n      lastError = e;\n    }\n  }\n  if (lastError) {\n    throw lastError;\n  }\n};\n\n/**\n * Get the path to adb executable amd assign it\n * to this.executable.path and this.binaries.adb properties.\n *\n * @return {ADB} ADB instance.\n */\nmethods.getAdbWithCorrectAdbPath = async function getAdbWithCorrectAdbPath () {\n  this.executable.path = await this.getSdkBinaryPath('adb');\n  return this.adb;\n};\n\n/**\n * Get the full path to aapt tool and assign it to\n * this.binaries.aapt property\n */\nmethods.initAapt = async function initAapt () {\n  await this.getSdkBinaryPath('aapt');\n};\n\n/**\n * Get the full path to aapt2 tool and assign it to\n * this.binaries.aapt2 property\n */\nmethods.initAapt2 = async function initAapt2 () {\n  await this.getSdkBinaryPath('aapt2');\n};\n\n/**\n * Get the full path to zipalign tool and assign it to\n * this.binaries.zipalign property\n */\nmethods.initZipAlign = async function initZipAlign () {\n  await this.getSdkBinaryPath('zipalign');\n};\n\n/**\n * Get the full path to bundletool binary and assign it to\n * this.binaries.bundletool property\n */\nmethods.initBundletool = async function initBundletool () {\n  try {\n    this.binaries.bundletool = await fs.which('bundletool.jar');\n  } catch (err) {\n    throw new Error('bundletool.jar binary is expected to be present in PATH. ' +\n      'Visit https://github.com/google/bundletool for more details.');\n  }\n};\n\n/**\n * Retrieve the API level of the device under test.\n *\n * @return {number} The API level as integer number, for example 21 for\n *                  Android Lollipop. The result of this method is cached, so all the further\n * calls return the same value as the first one.\n */\nmethods.getApiLevel = async function getApiLevel () {\n  if (!_.isInteger(this._apiLevel)) {\n    try {\n      const strOutput = await this.getDeviceProperty('ro.build.version.sdk');\n      let apiLevel = parseInt(strOutput.trim(), 10);\n\n      // Workaround for preview/beta platform API level\n      const charCodeQ = 'q'.charCodeAt(0);\n      // 28 is the first API Level, where Android SDK started returning letters in response to getPlatformVersion\n      const apiLevelDiff = apiLevel - 28;\n      const codename = String.fromCharCode(charCodeQ + apiLevelDiff);\n      if (apiLevelDiff >= 0 && (await this.getPlatformVersion()).toLowerCase() === codename) {\n        log.debug(`Release version is ${codename.toUpperCase()} but found API Level ${apiLevel}. Setting API Level to ${apiLevel + 1}`);\n        apiLevel++;\n      }\n\n      this._apiLevel = apiLevel;\n      log.debug(`Device API level: ${this._apiLevel}`);\n      if (isNaN(this._apiLevel)) {\n        throw new Error(`The actual output '${strOutput}' cannot be converted to an integer`);\n      }\n    } catch (e) {\n      throw new Error(`Error getting device API level. Original error: ${e.message}`);\n    }\n  }\n  return this._apiLevel;\n};\n\n/**\n * Retrieve the platform version of the device under test.\n *\n * @return {string} The platform version as a string, for example '5.0' for\n * Android Lollipop.\n */\nmethods.getPlatformVersion = async function getPlatformVersion () {\n  log.info('Getting device platform version');\n  try {\n    return await this.getDeviceProperty('ro.build.version.release');\n  } catch (e) {\n    throw new Error(`Error getting device platform version. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Verify whether a device is connected.\n *\n * @return {boolean} True if at least one device is visible to adb.\n */\nmethods.isDeviceConnected = async function isDeviceConnected () {\n  let devices = await this.getConnectedDevices();\n  return devices.length > 0;\n};\n\n/**\n * Recursively create a new folder on the device under test.\n *\n * @param {string} remotePath - The new path to be created.\n * @return {string} mkdir command output.\n */\nmethods.mkdir = async function mkdir (remotePath) {\n  return await this.shell(['mkdir', '-p', remotePath]);\n};\n\n/**\n * Verify whether the given argument is a\n * valid class name.\n *\n * @param {string} classString - The actual class name to be verified.\n * @return {?Array.<Match>} The result of Regexp.exec operation\n *                          or _null_ if no matches are found.\n */\nmethods.isValidClass = function isValidClass (classString) {\n  // some.package/some.package.Activity\n  return matchComponentName(classString);\n};\n\n/**\n * @typedef {Object} ResolveActivityOptions\n * @property {boolean?} preferCmd [true] Whether to prefer `cmd` tool usage for\n * launchable activity name detection. It might be useful to disable it if\n * `cmd package resolve-activity` returns 'android/com.android.internal.app.ResolverActivity',\n * which means the app has no default handler set in system settings.\n * See https://github.com/appium/appium/issues/17128 for more details.\n * This option has no effect if the target Android version is below 24 as there\n * the corresponding `cmd` subcommand is not implemented and dumpsys usage is the only\n * possible way to detect the launchable activity name.\n */\n\n/**\n * Fetches the fully qualified name of the launchable activity for the\n * given package. It is expected the package is already installed on\n * the device under test.\n *\n * @param {string} pkg - The target package identifier\n * @param {ResolveActivityOptions?} opts\n * @return {string} Fully qualified name of the launchable activity\n * @throws {Error} If there was an error while resolving the activity name\n */\nmethods.resolveLaunchableActivity = async function resolveLaunchableActivity (pkg, opts = {}) {\n  const { preferCmd = true } = opts;\n  if (!preferCmd || await this.getApiLevel() < 24) {\n    const stdout = await this.shell(['dumpsys', 'package', pkg]);\n    const names = parseLaunchableActivityNames(stdout);\n    if (_.isEmpty(names)) {\n      log.debug(stdout);\n      throw new Error(`Unable to resolve the launchable activity of '${pkg}'. Is it installed on the device?`);\n    }\n    if (names.length === 1) {\n      return names[0];\n    }\n\n    const tmpRoot = await tempDir.openDir();\n    try {\n      const tmpApp = await this.pullApk(pkg, tmpRoot);\n      const {apkActivity} = await this.packageAndLaunchActivityFromManifest(tmpApp);\n      return apkActivity;\n    } catch (e) {\n      log.debug(e.stack);\n      log.warn(`Unable to resolve the launchable activity of '${pkg}'. ` +\n        `The very first match of the dumpsys output is going to be used. ` +\n        `Original error: ${e.message}`);\n      return names[0];\n    } finally {\n      await fs.rimraf(tmpRoot);\n    }\n  }\n  const {stdout, stderr} = await this.shell(['cmd', 'package', 'resolve-activity', '--brief', pkg], {\n    outputFormat: this.EXEC_OUTPUT_FORMAT.FULL\n  });\n  for (const line of (stdout || '').split('\\n').map(_.trim)) {\n    if (this.isValidClass(line)) {\n      return line;\n    }\n  }\n  throw new Error(`Unable to resolve the launchable activity of '${pkg}'. Original error: ${stderr || stdout}`);\n};\n\n/**\n * Force application to stop on the device under test.\n *\n * @param {string} pkg - The package name to be stopped.\n * @return {string} The output of the corresponding adb command.\n */\nmethods.forceStop = async function forceStop (pkg) {\n  return await this.shell(['am', 'force-stop', pkg]);\n};\n\n/*\n * Kill application\n *\n * @param {string} pkg - The package name to be stopped.\n * @return {string} The output of the corresponding adb command.\n */\nmethods.killPackage = async function killPackage (pkg) {\n  return await this.shell(['am', 'kill', pkg]);\n};\n\n/**\n * Clear the user data of the particular application on the device\n * under test.\n *\n * @param {string} pkg - The package name to be cleared.\n * @return {string} The output of the corresponding adb command.\n */\nmethods.clear = async function clear (pkg) {\n  return await this.shell(['pm', 'clear', pkg]);\n};\n\n/**\n * Grant all permissions requested by the particular package.\n * This method is only useful on Android 6.0+ and for applications\n * that support components-based permissions setting.\n *\n * @param {string} pkg - The package name to be processed.\n * @param {string} apk - The path to the actual apk file.\n * @throws {Error} If there was an error while granting permissions\n */\nmethods.grantAllPermissions = async function grantAllPermissions (pkg, apk) {\n  const apiLevel = await this.getApiLevel();\n  let targetSdk = 0;\n  let dumpsysOutput = null;\n  try {\n    if (!apk) {\n      /**\n       * If apk not provided, considering apk already installed on the device\n       * and fetching targetSdk using package name.\n       */\n      dumpsysOutput = await this.shell(['dumpsys', 'package', pkg]);\n      targetSdk = await this.targetSdkVersionUsingPKG(pkg, dumpsysOutput);\n    } else {\n      targetSdk = await this.targetSdkVersionFromManifest(apk);\n    }\n  } catch (e) {\n    //avoiding logging error stack, as calling library function would have logged\n    log.warn(`Ran into problem getting target SDK version; ignoring...`);\n  }\n  if (apiLevel >= MIN_API_LEVEL_WITH_PERMS_SUPPORT && targetSdk >= MIN_API_LEVEL_WITH_PERMS_SUPPORT) {\n    /**\n     * If the device is running Android 6.0(API 23) or higher, and your app's target SDK is 23 or higher:\n     * The app has to list the permissions in the manifest.\n     * refer: https://developer.android.com/training/permissions/requesting.html\n     */\n    dumpsysOutput = dumpsysOutput || await this.shell(['dumpsys', 'package', pkg]);\n    const requestedPermissions = await this.getReqPermissions(pkg, dumpsysOutput);\n    const grantedPermissions = await this.getGrantedPermissions(pkg, dumpsysOutput);\n    const permissionsToGrant = _.difference(requestedPermissions, grantedPermissions);\n    if (_.isEmpty(permissionsToGrant)) {\n      log.info(`${pkg} contains no permissions available for granting`);\n    } else {\n      await this.grantPermissions(pkg, permissionsToGrant);\n    }\n  } else if (targetSdk < MIN_API_LEVEL_WITH_PERMS_SUPPORT) {\n    log.info(`It is only possible to grant permissions in runtime for ` +\n      `apps whose targetSdkVersion in the manifest is set to ${MIN_API_LEVEL_WITH_PERMS_SUPPORT} or above. ` +\n      `The current ${pkg} targetSdkVersion is ${targetSdk || 'unset'}.`);\n  } else if (apiLevel < MIN_API_LEVEL_WITH_PERMS_SUPPORT) {\n    log.info(`The device's OS API level is ${apiLevel}. ` +\n      `It is only possible to grant permissions on devices running Android 6 or above.`);\n  }\n};\n\n/**\n * Grant multiple permissions for the particular package.\n * This call is more performant than `grantPermission` one, since it combines\n * multiple `adb shell` calls into a single command.\n *\n * @param {string} pkg - The package name to be processed.\n * @param {Array<string>} permissions - The list of permissions to be granted.\n * @throws {Error} If there was an error while changing permissions.\n */\nmethods.grantPermissions = async function grantPermissions (pkg, permissions) {\n  // As it consumes more time for granting each permission,\n  // trying to grant all permission by forming equivalent command.\n  // Also, it is necessary to split long commands into chunks, since the maximum length of\n  // adb shell buffer is limited\n  log.debug(`Granting permissions ${JSON.stringify(permissions)} to '${pkg}'`);\n  try {\n    await this.shellChunks((perm) => ['pm', 'grant', pkg, perm], permissions);\n  } catch (e) {\n    if (!IGNORED_PERM_ERRORS.some((pattern) => pattern.test(e.stderr || e.message))) {\n      throw e;\n    }\n  }\n};\n\n/**\n * Grant single permission for the particular package.\n *\n * @param {string} pkg - The package name to be processed.\n * @param {string} permission - The full name of the permission to be granted.\n * @throws {Error} If there was an error while changing permissions.\n */\nmethods.grantPermission = async function grantPermission (pkg, permission) {\n  try {\n    await this.shell(['pm', 'grant', pkg, permission]);\n  } catch (e) {\n    if (!NOT_CHANGEABLE_PERM_ERROR.test(e.stderr || e.message)) {\n      throw e;\n    }\n  }\n};\n\n/**\n * Revoke single permission from the particular package.\n *\n * @param {string} pkg - The package name to be processed.\n * @param {string} permission - The full name of the permission to be revoked.\n * @throws {Error} If there was an error while changing permissions.\n */\nmethods.revokePermission = async function revokePermission (pkg, permission) {\n  try {\n    await this.shell(['pm', 'revoke', pkg, permission]);\n  } catch (e) {\n    if (!NOT_CHANGEABLE_PERM_ERROR.test(e.stderr || e.message)) {\n      throw e;\n    }\n  }\n};\n\n/**\n * Retrieve the list of granted permissions for the particular package.\n *\n * @param {string} pkg - The package name to be processed.\n * @param {string} cmdOutput [null] - Optional parameter containing command output of\n *                                    _dumpsys package_ command. It may speed up the method execution.\n * @return {Array<String>} The list of granted permissions or an empty list.\n * @throws {Error} If there was an error while changing permissions.\n */\nmethods.getGrantedPermissions = async function getGrantedPermissions (pkg, cmdOutput = null) {\n  log.debug('Retrieving granted permissions');\n  const stdout = cmdOutput || await this.shell(['dumpsys', 'package', pkg]);\n  return extractMatchingPermissions(stdout, ['install', 'runtime'], true);\n};\n\n/**\n * Retrieve the list of denied permissions for the particular package.\n *\n * @param {string} pkg - The package name to be processed.\n * @param {string} cmdOutput [null] - Optional parameter containing command output of\n *                                    _dumpsys package_ command. It may speed up the method execution.\n * @return {Array<String>} The list of denied permissions or an empty list.\n */\nmethods.getDeniedPermissions = async function getDeniedPermissions (pkg, cmdOutput = null) {\n  log.debug('Retrieving denied permissions');\n  const stdout = cmdOutput || await this.shell(['dumpsys', 'package', pkg]);\n  return extractMatchingPermissions(stdout, ['install', 'runtime'], false);\n};\n\n/**\n * Retrieve the list of requested permissions for the particular package.\n *\n * @param {string} pkg - The package name to be processed.\n * @param {string} cmdOutput [null] - Optional parameter containing command output of\n *                                    _dumpsys package_ command. It may speed up the method execution.\n * @return {Array<String>} The list of requested permissions or an empty list.\n */\nmethods.getReqPermissions = async function getReqPermissions (pkg, cmdOutput = null) {\n  log.debug('Retrieving requested permissions');\n  const stdout = cmdOutput || await this.shell(['dumpsys', 'package', pkg]);\n  return extractMatchingPermissions(stdout, ['requested']);\n};\n\n/**\n * Retrieve the list of location providers for the device under test.\n *\n * @return {Promise<string[]>} The list of available location providers or an empty list.\n */\nmethods.getLocationProviders = async function getLocationProviders () {\n  if (await this.getApiLevel() < 31) {\n    // https://stackoverflow.com/questions/70939503/settings-secure-location-providers-allowed-returns-null-in-android-12\n    const stdout = await this.getSetting('secure', 'location_providers_allowed');\n    return stdout.trim().split(',')\n      .map((p) => p.trim())\n      .filter(Boolean);\n  }\n\n  // To emulate the legacy behavior\n  return _.includes(await this.shell(['cmd', 'location', 'is-location-enabled']), 'true')\n    ? ['gps']\n    : [];\n};\n\n/**\n * Toggle the state of GPS location provider.\n *\n * @param {boolean} enabled - Whether to enable (true) or disable (false) the GPS provider.\n */\nmethods.toggleGPSLocationProvider = async function toggleGPSLocationProvider (enabled) {\n  if (await this.getApiLevel() < 31) {\n    // https://stackoverflow.com/questions/70939503/settings-secure-location-providers-allowed-returns-null-in-android-12\n    await this.setSetting('secure', 'location_providers_allowed', `${enabled ? '+' : '-'}gps`);\n    return;\n  }\n  await this.shell(['cmd', 'location', 'set-location-enabled', enabled ? 'true' : 'false']);\n};\n\n/**\n * Set hidden api policy to manage access to non-SDK APIs.\n * https://developer.android.com/preview/restrictions-non-sdk-interfaces\n *\n * @param {number|string} value - The API enforcement policy.\n *     For Android P\n *     0: Disable non-SDK API usage detection. This will also disable logging, and also break the strict mode API,\n *        detectNonSdkApiUsage(). Not recommended.\n *     1: \"Just warn\" - permit access to all non-SDK APIs, but keep warnings in the log.\n *        The strict mode API will keep working.\n *     2: Disallow usage of dark grey and black listed APIs.\n *     3: Disallow usage of blacklisted APIs, but allow usage of dark grey listed APIs.\n *\n *     For Android Q\n *     https://developer.android.com/preview/non-sdk-q#enable-non-sdk-access\n *     0: Disable all detection of non-SDK interfaces. Using this setting disables all log messages for non-SDK interface usage\n *        and prevents you from testing your app using the StrictMode API. This setting is not recommended.\n *     1: Enable access to all non-SDK interfaces, but print log messages with warnings for any non-SDK interface usage.\n *        Using this setting also allows you to test your app using the StrictMode API.\n *     2: Disallow usage of non-SDK interfaces that belong to either the black list\n *        or to a restricted greylist for your target API level.\n *\n * @param {boolean} ignoreError [false] Whether to ignore an exception in 'adb shell settings put global' command\n * @throws {error} If there was an error and ignoreError was true while executing 'adb shell settings put global'\n *                 command on the device under test.\n */\nmethods.setHiddenApiPolicy = async function setHiddenApiPolicy (value, ignoreError = false) {\n  try {\n    await this.shell(HIDDEN_API_POLICY_KEYS.map((k) => `settings put global ${k} ${value}`).join(';'));\n  } catch (e) {\n    if (!ignoreError) {\n      throw e;\n    }\n    log.info(`Failed to set setting keys '${HIDDEN_API_POLICY_KEYS}' to '${value}'. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Reset access to non-SDK APIs to its default setting.\n * https://developer.android.com/preview/restrictions-non-sdk-interfaces\n *\n * @param {boolean} ignoreError [false] Whether to ignore an exception in 'adb shell settings delete global' command\n * @throws {error} If there was an error and ignoreError was true while executing 'adb shell settings delete global'\n *                 command on the device under test.\n */\nmethods.setDefaultHiddenApiPolicy = async function setDefaultHiddenApiPolicy (ignoreError = false) {\n  try {\n    await this.shell(HIDDEN_API_POLICY_KEYS.map((k) => `settings delete global ${k}`).join(';'));\n  } catch (e) {\n    if (!ignoreError) {\n      throw e;\n    }\n    log.info(`Failed to delete keys '${HIDDEN_API_POLICY_KEYS}'. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Stop the particular package if it is running and clears its application data.\n *\n * @param {string} pkg - The package name to be processed.\n */\nmethods.stopAndClear = async function stopAndClear (pkg) {\n  try {\n    await this.forceStop(pkg);\n    await this.clear(pkg);\n  } catch (e) {\n    throw new Error(`Cannot stop and clear ${pkg}. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Retrieve the list of available input methods (IMEs) for the device under test.\n *\n * @return {Array.<String>} The list of IME names or an empty list.\n */\nmethods.availableIMEs = async function availableIMEs () {\n  try {\n    return getIMEListFromOutput(await this.shell(['ime', 'list', '-a']));\n  } catch (e) {\n    throw new Error(`Error getting available IME's. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Retrieve the list of enabled input methods (IMEs) for the device under test.\n *\n * @return {Array.<String>} The list of enabled IME names or an empty list.\n */\nmethods.enabledIMEs = async function enabledIMEs () {\n  try {\n    return getIMEListFromOutput(await this.shell(['ime', 'list']));\n  } catch (e) {\n    throw new Error(`Error getting enabled IME's. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Enable the particular input method on the device under test.\n *\n * @param {string} imeId - One of existing IME ids.\n */\nmethods.enableIME = async function enableIME (imeId) {\n  await this.shell(['ime', 'enable', imeId]);\n};\n\n/**\n * Disable the particular input method on the device under test.\n *\n * @param {string} imeId - One of existing IME ids.\n */\nmethods.disableIME = async function disableIME (imeId) {\n  await this.shell(['ime', 'disable', imeId]);\n};\n\n/**\n * Set the particular input method on the device under test.\n *\n * @param {string} imeId - One of existing IME ids.\n */\nmethods.setIME = async function setIME (imeId) {\n  await this.shell(['ime', 'set', imeId]);\n};\n\n/**\n * Get the default input method on the device under test.\n *\n * @return {?string} The name of the default input method\n */\nmethods.defaultIME = async function defaultIME () {\n  try {\n    let engine = await this.getSetting('secure', 'default_input_method');\n    if (engine === 'null') {\n      return null;\n    }\n    return engine.trim();\n  } catch (e) {\n    throw new Error(`Error getting default IME. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Send the particular keycode to the device under test.\n *\n * @param {string|number} keycode - The actual key code to be sent.\n */\nmethods.keyevent = async function keyevent (keycode) {\n  // keycode must be an int.\n  let code = parseInt(keycode, 10);\n  await this.shell(['input', 'keyevent', code]);\n};\n\n/**\n * Send the particular text or a number to the device under test.\n * The text gets properly escaped before being passed to ADB.\n * Noop if the text is empty.\n *\n * @param {string|number} text - The actual text to be sent.\n * @throws {Error} If it is impossible to escape the given string\n */\nmethods.inputText = async function inputText (text) {\n  if (text === '') {\n    return;\n  }\n\n  const originalStr = `${text}`;\n  const escapedText = originalStr.replace(/\\$/g, '\\\\$').replace(/ /g, '%s');\n  let args = ['input', 'text', originalStr];\n  // https://stackoverflow.com/questions/25791423/adb-shell-input-text-does-not-take-ampersand-character/25791498\n  const adbInputEscapePattern = /[()<>|;&*\\\\~^\"']/g;\n  if (escapedText !== originalStr || adbInputEscapePattern.test(originalStr)) {\n    if (_.every(['\"', `'`], (c) => originalStr.includes(c))) {\n      throw new Error(\n        `Did not know how to escape a string that contains both types of quotes (\" and ')`\n      );\n    }\n    const q = originalStr.includes('\"') ? `'` : '\"';\n    args = [`input text ${q}${escapedText}${q}`];\n  }\n  await this.shell(args);\n};\n\n/**\n * Clear the active text field on the device under test by sending\n * special keyevents to it.\n *\n * @param {number} length [100] - The maximum length of the text in the field to be cleared.\n */\nmethods.clearTextField = async function clearTextField (length = 100) {\n  // assumes that the EditText field already has focus\n  log.debug(`Clearing up to ${length} characters`);\n  if (length === 0) {\n    return;\n  }\n  let args = ['input', 'keyevent'];\n  for (let i = 0; i < length; i++) {\n    // we cannot know where the cursor is in the text field, so delete both before\n    // and after so that we get rid of everything\n    // https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DEL\n    // https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_FORWARD_DEL\n    args.push('67', '112');\n  }\n  await this.shell(args);\n};\n\n/**\n * Send the special keycode to the device under test in order to lock it.\n */\nmethods.lock = async function lock () {\n  if (await this.isScreenLocked()) {\n    log.debug('Screen is already locked. Doing nothing.');\n    return;\n  }\n  log.debug('Pressing the KEYCODE_POWER button to lock screen');\n  await this.keyevent(26);\n\n  const timeoutMs = 5000;\n  try {\n    await waitForCondition(async () => await this.isScreenLocked(), {\n      waitMs: timeoutMs,\n      intervalMs: 500,\n    });\n  } catch (e) {\n    throw new Error(`The device screen is still locked after ${timeoutMs}ms timeout`);\n  }\n};\n\n/**\n * Send the special keycode to the device under test in order to emulate\n * Back button tap.\n */\nmethods.back = async function back () {\n  log.debug('Pressing the BACK button');\n  await this.keyevent(4);\n};\n\n/**\n * Send the special keycode to the device under test in order to emulate\n * Home button tap.\n */\nmethods.goToHome = async function goToHome () {\n  log.debug('Pressing the HOME button');\n  await this.keyevent(3);\n};\n\n/**\n * @return {string} the actual path to adb executable.\n */\nmethods.getAdbPath = function getAdbPath () {\n  return this.executable.path;\n};\n\n/**\n * Retrieve current screen orientation of the device under test.\n *\n * @return {number} The current orientation encoded as an integer number.\n */\nmethods.getScreenOrientation = async function getScreenOrientation () {\n  let stdout = await this.shell(['dumpsys', 'input']);\n  return getSurfaceOrientation(stdout);\n};\n\n/**\n * Send an arbitrary Telnet command to the device under test.\n *\n * @param {string} command - The command to be sent.\n *\n * @return {string} The actual output of the given command.\n */\nmethods.sendTelnetCommand = async function sendTelnetCommand (command) {\n  return await this.execEmuConsoleCommand(command, {port: await this.getEmulatorPort()});\n};\n\n/**\n * Check the state of Airplane mode on the device under test.\n *\n * @return {boolean} True if Airplane mode is enabled.\n */\nmethods.isAirplaneModeOn = async function isAirplaneModeOn () {\n  const stdout = await this.getSetting('global', 'airplane_mode_on');\n  return parseInt(stdout, 10) !== 0;\n  // Alternatively for Android 11+:\n  // return (await this.shell(['cmd', 'connectivity', 'airplane-mode'])).stdout.trim() === 'enabled';\n};\n\n/**\n * Change the state of Airplane mode in Settings on the device under test.\n *\n * @param {boolean} on - True to enable the Airplane mode in Settings and false to disable it.\n */\nmethods.setAirplaneMode = async function setAirplaneMode (on) {\n  if (await this.getApiLevel() < 30) {\n    // This requires to call broadcastAirplaneMode afterwards to apply\n    await this.setSetting('global', 'airplane_mode_on', on ? 1 : 0);\n    return;\n  }\n\n  await this.shell(['cmd', 'connectivity', 'airplane-mode', on ? 'enable' : 'disable']);\n};\n\n/**\n * Broadcast the state of Airplane mode on the device under test.\n * This method should be called after {@link #setAirplaneMode}, otherwise\n * the mode change is not going to be applied for the device.\n * ! This API requires root since Android API 24. Since API 30\n * there is a dedicated adb command to change airplane mode state, which\n * does not require to call this one afterwards.\n *\n * @param {boolean} on - True to broadcast enable and false to broadcast disable.\n */\nmethods.broadcastAirplaneMode = async function broadcastAirplaneMode (on) {\n  const args = [\n    'am', 'broadcast',\n    '-a', 'android.intent.action.AIRPLANE_MODE',\n    '--ez', 'state', on ? 'true' : 'false',\n  ];\n  try {\n    await this.shell(args);\n  } catch (e) {\n    // https://github.com/appium/appium/issues/17422\n    if (_.includes(e.stderr, 'SecurityException')) {\n      try {\n        await this.shell(args, {privileged: true});\n        return;\n      } catch (ign) {}\n    }\n    throw e;\n  }\n};\n\n/**\n * Check the state of WiFi on the device under test.\n *\n * @return {boolean} True if WiFi is enabled.\n */\nmethods.isWifiOn = async function isWifiOn () {\n  const stdout = await this.getSetting('global', 'wifi_on');\n  return (parseInt(stdout, 10) !== 0);\n  // Alternative for Android 11+:\n  // return (await this.shell(['cmd', 'wifi', 'status']).stdout.includes('Wifi is enabled'));\n};\n\n/**\n * Check the state of Data transfer on the device under test.\n *\n * @return {boolean} True if Data transfer is enabled.\n */\nmethods.isDataOn = async function isDataOn () {\n  const stdout = await this.getSetting('global', 'mobile_data');\n  return (parseInt(stdout, 10) !== 0);\n};\n\n/**\n * Change the state of WiFi and/or Data transfer on the device under test.\n *\n * @param {boolean} wifi - True to enable and false to disable WiFi.\n * @param {boolean} data - True to enable and false to disable Data transfer.\n * @param {boolean} isEmulator [false] - Set it to true if the device under test\n *                                       is an emulator rather than a real device.\n */\nmethods.setWifiAndData = async function setWifiAndData ({wifi, data}, isEmulator = false) {\n  if (util.hasValue(wifi)) {\n    await this.setWifiState(wifi, isEmulator);\n  }\n  if (util.hasValue(data)) {\n    await this.setDataState(data, isEmulator);\n  }\n};\n\n/**\n * Check the state of animation on the device under test.\n *\n * @return {boolean} True if at least one of animation scale settings\n *                   is not equal to '0.0'.\n */\nmethods.isAnimationOn = async function isAnimationOn () {\n  let animator_duration_scale = await this.getSetting('global', 'animator_duration_scale');\n  let transition_animation_scale = await this.getSetting('global', 'transition_animation_scale');\n  let window_animation_scale = await this.getSetting('global', 'window_animation_scale');\n  return _.some([animator_duration_scale, transition_animation_scale, window_animation_scale],\n                (setting) => setting !== '0.0');\n};\n\n/**\n * Forcefully recursively remove a path on the device under test.\n * Be careful while calling this method.\n *\n * @param {string} path - The path to be removed recursively.\n */\nmethods.rimraf = async function rimraf (path) {\n  await this.shell(['rm', '-rf', path]);\n};\n\n/**\n * Send a file to the device under test.\n *\n * @param {string} localPath - The path to the file on the local file system.\n * @param {string} remotePath - The destination path on the remote device.\n * @param {object} opts - Additional options mapping. See\n *                        https://github.com/appium/node-teen_process,\n *                        _exec_ method options, for more information about available\n *                        options.\n */\nmethods.push = async function push (localPath, remotePath, opts) {\n  await this.mkdir(path.posix.dirname(remotePath));\n  await this.adbExec(['push', localPath, remotePath], opts);\n};\n\n/**\n * Receive a file from the device under test.\n *\n * @param {string} remotePath - The source path on the remote device.\n * @param {string} localPath - The destination path to the file on the local file system.\n * @param {object} opts - Additional options mapping. See\n *                        https://github.com/appium/node-teen_process,\n *                        _exec_ method options, for more information about available\n *                        options.\n */\nmethods.pull = async function pull (remotePath, localPath, opts = {}) {\n  // pull folder can take more time, increasing time out to 60 secs\n  await this.adbExec(['pull', remotePath, localPath], {...opts, timeout: opts.timeout ?? 60000});\n};\n\n/**\n * Check whether the process with the particular name is running on the device\n * under test.\n *\n * @param {string} processName - The name of the process to be checked.\n * @return {boolean} True if the given process is running.\n * @throws {Error} If the given process name is not a valid class name.\n */\nmethods.processExists = async function processExists (processName) {\n  return !_.isEmpty(await this.getPIDsByName(processName));\n};\n\n/**\n * Get TCP port forwarding with adb on the device under test.\n * @return {Array.<String>} The output of the corresponding adb command. An array contains each forwarding line of output\n */\nmethods.getForwardList = async function getForwardList () {\n  log.debug(`List forwarding ports`);\n  const connections = await this.adbExec(['forward', '--list']);\n  return connections.split(EOL).filter((line) => Boolean(line.trim()));\n};\n\n/**\n * Setup TCP port forwarding with adb on the device under test.\n *\n * @param {string|number} systemPort - The number of the local system port.\n * @param {string|number} devicePort - The number of the remote device port.\n */\nmethods.forwardPort = async function forwardPort (systemPort, devicePort) {\n  log.debug(`Forwarding system: ${systemPort} to device: ${devicePort}`);\n  await this.adbExec(['forward', `tcp:${systemPort}`, `tcp:${devicePort}`]);\n};\n\n/**\n * Remove TCP port forwarding with adb on the device under test. The forwarding\n * for the given port should be setup with {@link #forwardPort} first.\n *\n * @param {string|number} systemPort - The number of the local system port\n *                                     to remove forwarding on.\n */\nmethods.removePortForward = async function removePortForward (systemPort) {\n  log.debug(`Removing forwarded port socket connection: ${systemPort} `);\n  await this.adbExec(['forward', `--remove`, `tcp:${systemPort}`]);\n};\n\n/**\n * Get TCP port forwarding with adb on the device under test.\n * @return {Array.<String>} The output of the corresponding adb command. An array contains each forwarding line of output\n */\nmethods.getReverseList = async function getReverseList () {\n  log.debug(`List reverse forwarding ports`);\n  const connections = await this.adbExec(['reverse', '--list']);\n  return connections.split(EOL).filter((line) => Boolean(line.trim()));\n};\n\n/**\n * Setup TCP port forwarding with adb on the device under test.\n * Only available for API 21+.\n *\n * @param {string|number} devicePort - The number of the remote device port.\n * @param {string|number} systemPort - The number of the local system port.\n */\nmethods.reversePort = async function reversePort (devicePort, systemPort) {\n  log.debug(`Forwarding device: ${devicePort} to system: ${systemPort}`);\n  await this.adbExec(['reverse', `tcp:${devicePort}`, `tcp:${systemPort}`]);\n};\n\n/**\n * Remove TCP port forwarding with adb on the device under test. The forwarding\n * for the given port should be setup with {@link #forwardPort} first.\n *\n * @param {string|number} devicePort - The number of the remote device port\n *                                     to remove forwarding on.\n */\nmethods.removePortReverse = async function removePortReverse (devicePort) {\n  log.debug(`Removing reverse forwarded port socket connection: ${devicePort} `);\n  await this.adbExec(['reverse', `--remove`, `tcp:${devicePort}`]);\n};\n\n/**\n * Setup TCP port forwarding with adb on the device under test. The difference\n * between {@link #forwardPort} is that this method does setup for an abstract\n * local port.\n *\n * @param {string|number} systemPort - The number of the local system port.\n * @param {string|number} devicePort - The number of the remote device port.\n */\nmethods.forwardAbstractPort = async function forwardAbstractPort (systemPort, devicePort) {\n  log.debug(`Forwarding system: ${systemPort} to abstract device: ${devicePort}`);\n  await this.adbExec(['forward', `tcp:${systemPort}`, `localabstract:${devicePort}`]);\n};\n\n/**\n * Execute ping shell command on the device under test.\n *\n * @return {boolean} True if the command output contains 'ping' substring.\n * @throws {error} If there was an error while executing 'ping' command on the\n *                 device under test.\n */\nmethods.ping = async function ping () {\n  let stdout = await this.shell(['echo', 'ping']);\n  if (stdout.indexOf('ping') === 0) {\n    return true;\n  }\n  throw new Error(`ADB ping failed, returned ${stdout}`);\n};\n\n/**\n * Restart the device under test using adb commands.\n *\n * @throws {error} If start fails.\n */\nmethods.restart = async function restart () {\n  try {\n    await this.stopLogcat();\n    await this.restartAdb();\n    await this.waitForDevice(60);\n    await this.startLogcat(this._logcatStartupParams);\n  } catch (e) {\n    throw new Error(`Restart failed. Original error: ${e.message}`);\n  }\n};\n\n/**\n * @typedef {Object} LogcatOpts\n * @property {string} format The log print format, where <format> is one of:\n *   brief process tag thread raw time threadtime long\n * `threadtime` is the default value.\n * @property {Array<string>} filterSpecs Series of <tag>[:priority]\n * where <tag> is a log component tag (or * for all) and priority is:\n *  V    Verbose\n *  D    Debug\n *  I    Info\n *  W    Warn\n *  E    Error\n *  F    Fatal\n *  S    Silent (supress all output)\n *\n * '*' means '*:d' and <tag> by itself means <tag>:v\n *\n * If not specified on the commandline, filterspec is set from ANDROID_LOG_TAGS.\n * If no filterspec is found, filter defaults to '*:I'\n */\n\n/**\n * Start the logcat process to gather logs.\n *\n * @param {?LogcatOpts} opts\n * @throws {Error} If restart fails.\n */\nmethods.startLogcat = async function startLogcat (opts = {}) {\n  if (!_.isEmpty(this.logcat)) {\n    throw new Error(\"Trying to start logcat capture but it's already started!\");\n  }\n\n  this.logcat = new Logcat({\n    adb: this.executable,\n    debug: false,\n    debugTrace: false,\n    clearDeviceLogsOnStart: !!this.clearDeviceLogsOnStart,\n  });\n  await this.logcat.startCapture(opts);\n  this._logcatStartupParams = opts;\n};\n\n/**\n * Stop the active logcat process which gathers logs.\n * The call will be ignored if no logcat process is running.\n */\nmethods.stopLogcat = async function stopLogcat () {\n  if (_.isEmpty(this.logcat)) {\n    return;\n  }\n  try {\n    await this.logcat.stopCapture();\n  } finally {\n    this.logcat = null;\n  }\n};\n\n/**\n * Retrieve the output from the currently running logcat process.\n * The logcat process should be executed by {2link #startLogcat} method.\n *\n * @return {string} The collected logcat output.\n * @throws {Error} If logcat process is not running.\n */\nmethods.getLogcatLogs = function getLogcatLogs () {\n  if (_.isEmpty(this.logcat)) {\n    throw new Error(\"Can't get logcat logs since logcat hasn't started\");\n  }\n  return this.logcat.getLogs();\n};\n\n/**\n * Set the callback for the logcat output event.\n *\n * @param {Function} listener - The listener function, which accepts one argument. The argument is\n *                              a log record object with `timestamp`, `level` and `message` properties.\n * @throws {Error} If logcat process is not running.\n */\nmethods.setLogcatListener = function setLogcatListener (listener) {\n  if (_.isEmpty(this.logcat)) {\n    throw new Error(\"Logcat process hasn't been started\");\n  }\n  this.logcat.on('output', listener);\n};\n\n/**\n * Removes the previously set callback for the logcat output event.\n *\n * @param {Function} listener - The listener function, which has been previously\n *                              passed to `setLogcatListener`\n * @throws {Error} If logcat process is not running.\n */\nmethods.removeLogcatListener = function removeLogcatListener (listener) {\n  if (_.isEmpty(this.logcat)) {\n    throw new Error(\"Logcat process hasn't been started\");\n  }\n  this.logcat.removeListener('output', listener);\n};\n\n/**\n * At some point of time Google has changed the default `ps` behaviour, so it only\n * lists processes that belong to the current shell user rather to all\n * users. It is necessary to execute ps with -A command line argument\n * to mimic the previous behaviour.\n *\n * @returns {string} the output of `ps` command where all processes are included\n */\nmethods.listProcessStatus = async function listProcessStatus () {\n  if (!_.isBoolean(this._doesPsSupportAOption)) {\n    try {\n      this._doesPsSupportAOption = /^-A\\b/m.test(await this.shell(['ps', '--help']));\n    } catch (e) {\n      log.debug(e.stack);\n      this._doesPsSupportAOption = false;\n    }\n  }\n  return await this.shell(this._doesPsSupportAOption ? ['ps', '-A'] : ['ps']);\n};\n\n/**\n * Returns process name for the given process identifier\n *\n * @param {string|number} pid - The valid process identifier\n * @throws {Error} If the given PID is either invalid or is not present\n * in the active processes list\n * @returns {string} The process name\n */\nmethods.getNameByPid = async function getNameByPid (pid) {\n  if (isNaN(pid)) {\n    throw new Error(`The PID value must be a valid number. '${pid}' is given instead`);\n  }\n  pid = parseInt(pid, 10);\n\n  const stdout = await this.listProcessStatus();\n  const titleMatch = PS_TITLE_PATTERN.exec(stdout);\n  if (!titleMatch) {\n    log.debug(stdout);\n    throw new Error(`Could not get the process name for PID '${pid}'`);\n  }\n  const allTitles = titleMatch[1].trim().split(/\\s+/);\n  const pidIndex = allTitles.indexOf(PID_COLUMN_TITLE);\n  // it might not be stable to take NAME by index, because depending on the\n  // actual SDK the ps output might not contain an abbreviation for the S flag:\n  // USER     PID   PPID  VSIZE  RSS     WCHAN    PC        NAME\n  // USER     PID   PPID  VSIZE  RSS     WCHAN    PC   S    NAME\n  const nameOffset = allTitles.indexOf(PROCESS_NAME_COLUMN_TITLE) - allTitles.length;\n  const pidRegex = new RegExp(`^(.*\\\\b${pid}\\\\b.*)$`, 'gm');\n  let matchedLine;\n  while ((matchedLine = pidRegex.exec(stdout))) {\n    const items = matchedLine[1].trim().split(/\\s+/);\n    if (parseInt(items[pidIndex], 10) === pid && items[items.length + nameOffset]) {\n      return items[items.length + nameOffset];\n    }\n  }\n  log.debug(stdout);\n  throw new Error(`Could not get the process name for PID '${pid}'`);\n};\n\n/**\n * Get the list of process ids for the particular process on the device under test.\n *\n * @param {string} name - The part of process name.\n * @return {Array.<number>} The list of matched process IDs or an empty list.\n * @throws {Error} If the passed process name is not a valid one\n */\nmethods.getPIDsByName = async function getPIDsByName (name) {\n  log.debug(`Getting IDs of all '${name}' processes`);\n  if (!this.isValidClass(name)) {\n    throw new Error(`Invalid process name: '${name}'`);\n  }\n  // https://github.com/appium/appium/issues/13567\n  if (await this.getApiLevel() >= 23) {\n    if (!_.isBoolean(this._isPgrepAvailable)) {\n      // pgrep is in priority, since pidof has been reported of having bugs on some platforms\n      const pgrepOutput = _.trim(await this.shell(['pgrep --help; echo $?']));\n      this._isPgrepAvailable = parseInt(_.last(pgrepOutput.split(/\\s+/)), 10) === 0;\n      if (this._isPgrepAvailable) {\n        this._canPgrepUseFullCmdLineSearch = /^-f\\b/m.test(pgrepOutput);\n      } else {\n        this._isPidofAvailable = parseInt(await this.shell(['pidof --help > /dev/null; echo $?']), 10) === 0;\n      }\n    }\n    if (this._isPgrepAvailable || this._isPidofAvailable) {\n      const shellCommand = this._isPgrepAvailable\n        ? (this._canPgrepUseFullCmdLineSearch\n          ? ['pgrep', '-f', _.escapeRegExp(`([[:blank:]]|^)${name}([[:blank:]]|$)`)]\n          // https://github.com/appium/appium/issues/13872\n          : [`pgrep ^${_.escapeRegExp(name.slice(-MAX_PGREP_PATTERN_LEN))}$ ` +\n              `|| pgrep ^${_.escapeRegExp(name.slice(0, MAX_PGREP_PATTERN_LEN))}$`])\n        : ['pidof', name];\n      try {\n        return (await this.shell(shellCommand))\n          .split(/\\s+/)\n          .map((x) => parseInt(x, 10))\n          .filter((x) => _.isInteger(x));\n      } catch (e) {\n        // error code 1 is returned if the utility did not find any processes\n        // with the given name\n        if (e.code !== 1) {\n          throw new Error(`Could not extract process ID of '${name}': ${e.message}`);\n        }\n        if (_.includes(e.stderr || e.stdout, 'syntax error')) {\n          log.warn(`Got an unexpected response from the shell interpreter: ${e.stderr || e.stdout}`);\n        } else {\n          return [];\n        }\n      }\n    }\n  }\n\n  log.debug('Using ps-based PID detection');\n  const stdout = await this.listProcessStatus();\n  const titleMatch = PS_TITLE_PATTERN.exec(stdout);\n  if (!titleMatch) {\n    log.debug(stdout);\n    throw new Error(`Could not extract PID of '${name}' from ps output`);\n  }\n  const allTitles = titleMatch[1].trim().split(/\\s+/);\n  const pidIndex = allTitles.indexOf(PID_COLUMN_TITLE);\n  const pids = [];\n  const processNameRegex = new RegExp(`^(.*\\\\b\\\\d+\\\\b.*\\\\b${_.escapeRegExp(name)}\\\\b.*)$`, 'gm');\n  let matchedLine;\n  while ((matchedLine = processNameRegex.exec(stdout))) {\n    const items = matchedLine[1].trim().split(/\\s+/);\n    if (pidIndex >= allTitles.length || isNaN(items[pidIndex])) {\n      log.debug(stdout);\n      throw new Error(`Could not extract PID of '${name}' from '${matchedLine[1].trim()}'`);\n    }\n    pids.push(parseInt(items[pidIndex], 10));\n  }\n  return pids;\n};\n\n/**\n * Get the list of process ids for the particular process on the device under test.\n *\n * @param {string} name - The part of process name.\n * @return {Array.<number>} The list of matched process IDs or an empty list.\n */\nmethods.killProcessesByName = async function killProcessesByName (name) {\n  try {\n    log.debug(`Attempting to kill all ${name} processes`);\n    const pids = await this.getPIDsByName(name);\n    if (_.isEmpty(pids)) {\n      log.info(`No '${name}' process has been found`);\n    } else {\n      await B.all(pids.map((p) => this.killProcessByPID(p)));\n    }\n  } catch (e) {\n    throw new Error(`Unable to kill ${name} processes. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Kill the particular process on the device under test.\n * The current user is automatically switched to root if necessary in order\n * to properly kill the process.\n *\n * @param {string|number} pid - The ID of the process to be killed.\n * @throws {Error} If the process cannot be killed.\n */\nmethods.killProcessByPID = async function killProcessByPID (pid) {\n  log.debug(`Attempting to kill process ${pid}`);\n  const noProcessFlag = 'No such process';\n  try {\n    // Check if the process exists and throw an exception otherwise\n    await this.shell(['kill', pid]);\n  } catch (e) {\n    if (_.includes(e.stderr, noProcessFlag)) {\n      return;\n    }\n    if (!_.includes(e.stderr, 'Operation not permitted')) {\n      throw e;\n    }\n    log.info(`Cannot kill PID ${pid} due to insufficient permissions. Retrying as root`);\n    try {\n      await this.shell(['kill', pid], {\n        privileged: true\n      });\n    } catch (e1) {\n      if (_.includes(e1.stderr, noProcessFlag)) {\n        return;\n      }\n      throw e1;\n    }\n  }\n};\n\n/**\n * Broadcast process killing on the device under test.\n *\n * @param {string} intent - The name of the intent to broadcast to.\n * @param {string} processName - The name of the killed process.\n * @throws {error} If the process was not killed.\n */\nmethods.broadcastProcessEnd = async function broadcastProcessEnd (intent, processName) {\n  // start the broadcast without waiting for it to finish.\n  this.broadcast(intent);\n  // wait for the process to end\n  let start = Date.now();\n  let timeoutMs = 40000;\n  try {\n    while ((Date.now() - start) < timeoutMs) {\n      if (await this.processExists(processName)) {\n        // cool down\n        await sleep(400);\n        continue;\n      }\n      return;\n    }\n    throw new Error(`Process never died within ${timeoutMs} ms`);\n  } catch (e) {\n    throw new Error(`Unable to broadcast process end. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Broadcast a message to the given intent.\n *\n * @param {string} intent - The name of the intent to broadcast to.\n * @throws {error} If intent name is not a valid class name.\n */\nmethods.broadcast = async function broadcast (intent) {\n  if (!this.isValidClass(intent)) {\n    throw new Error(`Invalid intent ${intent}`);\n  }\n  log.debug(`Broadcasting: ${intent}`);\n  await this.shell(['am', 'broadcast', '-a', intent]);\n};\n\n/**\n * Kill Android instruments if they are currently running.\n */\nmethods.endAndroidCoverage = async function endAndroidCoverage () {\n  if (this.instrumentProc && this.instrumentProc.isRunning) {\n    await this.instrumentProc.stop();\n  }\n};\n\n/**\n * Instrument the particular activity.\n *\n * @param {string} pkg - The name of the package to be instrumented.\n * @param {string} activity - The name of the main activity in this package.\n * @param {string} instrumentWith - The name of the package to instrument\n *                                  the activity with.\n * @throws {error} If any exception is reported by adb shell.\n */\nmethods.instrument = async function instrument (pkg, activity, instrumentWith) {\n  if (activity[0] !== '.') {\n    pkg = '';\n  }\n  let pkgActivity = (pkg + activity).replace(/\\.+/g, '.'); // Fix pkg..activity error\n  let stdout = await this.shell([\n    'am', 'instrument',\n    '-e', 'main_activity',\n    pkgActivity,\n    instrumentWith,\n  ]);\n  if (stdout.indexOf('Exception') !== -1) {\n    throw new Error(`Unknown exception during instrumentation. Original error ${stdout.split('\\n')[0]}`);\n  }\n};\n\n/**\n * Collect Android coverage by instrumenting the particular activity.\n *\n * @param {string} instrumentClass - The name of the instrumentation class.\n * @param {string} waitPkg - The name of the package to be instrumented.\n * @param {string} waitActivity - The name of the main activity in this package.\n *\n * @return {promise} The promise is successfully resolved if the instrumentation starts\n *                   without errors.\n */\nmethods.androidCoverage = async function androidCoverage (instrumentClass, waitPkg, waitActivity) {\n  if (!this.isValidClass(instrumentClass)) {\n    throw new Error(`Invalid class ${instrumentClass}`);\n  }\n  return await new B(async (resolve, reject) => {\n    let args = this.executable.defaultArgs\n      .concat(['shell', 'am', 'instrument', '-e', 'coverage', 'true', '-w'])\n      .concat([instrumentClass]);\n    log.debug(`Collecting coverage data with: ${[this.executable.path].concat(args).join(' ')}`);\n    try {\n      // am instrument runs for the life of the app process.\n      this.instrumentProc = new SubProcess(this.executable.path, args);\n      await this.instrumentProc.start(0);\n      this.instrumentProc.on('output', (stdout, stderr) => {\n        if (stderr) {\n          reject(new Error(`Failed to run instrumentation. Original error: ${stderr}`));\n        }\n      });\n      await this.waitForActivity(waitPkg, waitActivity);\n      resolve();\n    } catch (e) {\n      reject(new Error(`Android coverage failed. Original error: ${e.message}`));\n    }\n  });\n};\n\n/**\n * Get the particular property of the device under test.\n *\n * @param {string} property - The name of the property. This name should\n *                            be known to _adb shell getprop_ tool.\n *\n * @return {string} The value of the given property.\n */\nmethods.getDeviceProperty = async function getDeviceProperty (property) {\n  let stdout = await this.shell(['getprop', property]);\n  let val = stdout.trim();\n  log.debug(`Current device property '${property}': ${val}`);\n  return val;\n};\n\n/**\n * @typedef {object} setPropOpts\n * @property {boolean} privileged - Do we run setProp as a privileged command? Default true.\n */\n\n/**\n * Set the particular property of the device under test.\n *\n * @param {string} property - The name of the property. This name should\n *                            be known to _adb shell setprop_ tool.\n * @param {string} val - The new property value.\n * @param {setPropOpts} opts\n *\n * @throws {error} If _setprop_ utility fails to change property value.\n */\nmethods.setDeviceProperty = async function setDeviceProperty (prop, val, opts = {}) {\n  const {privileged = true} = opts;\n  log.debug(`Setting device property '${prop}' to '${val}'`);\n  await this.shell(['setprop', prop, val], {\n    privileged,\n  });\n};\n\n/**\n * @return {string} Current system language on the device under test.\n */\nmethods.getDeviceSysLanguage = async function getDeviceSysLanguage () {\n  return await this.getDeviceProperty('persist.sys.language');\n};\n\n/**\n * @return {string} Current country name on the device under test.\n */\nmethods.getDeviceSysCountry = async function getDeviceSysCountry () {\n  return await this.getDeviceProperty('persist.sys.country');\n};\n\n/**\n * @return {string} Current system locale name on the device under test.\n */\nmethods.getDeviceSysLocale = async function getDeviceSysLocale () {\n  return await this.getDeviceProperty('persist.sys.locale');\n};\n\n/**\n * @return {string} Current product language name on the device under test.\n */\nmethods.getDeviceProductLanguage = async function getDeviceProductLanguage () {\n  return await this.getDeviceProperty('ro.product.locale.language');\n};\n\n/**\n * @return {string} Current product country name on the device under test.\n */\nmethods.getDeviceProductCountry = async function getDeviceProductCountry () {\n  return await this.getDeviceProperty('ro.product.locale.region');\n};\n\n/**\n * @return {string} Current product locale name on the device under test.\n */\nmethods.getDeviceProductLocale = async function getDeviceProductLocale () {\n  return await this.getDeviceProperty('ro.product.locale');\n};\n\n/**\n * @return {string} The model name of the device under test.\n */\nmethods.getModel = async function getModel () {\n  return await this.getDeviceProperty('ro.product.model');\n};\n\n/**\n * @return {string} The manufacturer name of the device under test.\n */\nmethods.getManufacturer = async function getManufacturer () {\n  return await this.getDeviceProperty('ro.product.manufacturer');\n};\n\n/**\n * Get the current screen size.\n *\n * @return {string} Device screen size as string in format 'WxH' or\n *                  _null_ if it cannot be determined.\n */\nmethods.getScreenSize = async function getScreenSize () {\n  let stdout = await this.shell(['wm', 'size']);\n  let size = new RegExp(/Physical size: ([^\\r?\\n]+)*/g).exec(stdout);\n  if (size && size.length >= 2) {\n    return size[1].trim();\n  }\n  return null;\n};\n\n/**\n * Get the current screen density in dpi\n *\n * @return {?number} Device screen density as a number or _null_ if it\n *                  cannot be determined\n */\nmethods.getScreenDensity = async function getScreenDensity () {\n  let stdout = await this.shell(['wm', 'density']);\n  let density = new RegExp(/Physical density: ([^\\r?\\n]+)*/g).exec(stdout);\n  if (density && density.length >= 2) {\n    let densityNumber = parseInt(density[1].trim(), 10);\n    return isNaN(densityNumber) ? null : densityNumber;\n  }\n  return null;\n};\n\n/**\n * Setup HTTP proxy in device global settings.\n * Read https://android.googlesource.com/platform/frameworks/base/+/android-9.0.0_r21/core/java/android/provider/Settings.java for each property\n *\n * @param {string} proxyHost - The host name of the proxy.\n * @param {string|number} proxyPort - The port number to be set.\n */\nmethods.setHttpProxy = async function setHttpProxy (proxyHost, proxyPort) {\n  let proxy = `${proxyHost}:${proxyPort}`;\n  if (_.isUndefined(proxyHost)) {\n    throw new Error(`Call to setHttpProxy method with undefined proxy_host: ${proxy}`);\n  }\n  if (_.isUndefined(proxyPort)) {\n    throw new Error(`Call to setHttpProxy method with undefined proxy_port ${proxy}`);\n  }\n\n  const httpProxySettins = [\n    ['http_proxy', proxy],\n    ['global_http_proxy_host', proxyHost],\n    ['global_http_proxy_port', proxyPort]\n  ];\n  for (const [settingKey, settingValue] of httpProxySettins) {\n    await this.setSetting('global', settingKey, settingValue);\n  }\n};\n\n/**\n * Delete HTTP proxy in device global settings.\n * Rebooting the test device is necessary to apply the change.\n */\nmethods.deleteHttpProxy = async function deleteHttpProxy () {\n  const httpProxySettins = [\n    'http_proxy',\n    'global_http_proxy_host',\n    'global_http_proxy_port',\n    'global_http_proxy_exclusion_list' // `global_http_proxy_exclusion_list=` was generated by `settings global htto_proxy xxxx`\n  ];\n  for (const setting of httpProxySettins) {\n    await this.shell(['settings', 'delete', 'global', setting]);\n  }\n};\n\n/**\n * Set device property.\n * [android.provider.Settings]{@link https://developer.android.com/reference/android/provider/Settings.html}\n *\n * @param {string} namespace - one of {system, secure, global}, case-insensitive.\n * @param {string} setting - property name.\n * @param {string|number} value - property value.\n * @return {string} command output.\n */\nmethods.setSetting = async function setSetting (namespace, setting, value) {\n  return await this.shell(['settings', 'put', namespace, setting, value]);\n};\n\n/**\n * Get device property.\n * [android.provider.Settings]{@link https://developer.android.com/reference/android/provider/Settings.html}\n *\n * @param {string} namespace - one of {system, secure, global}, case-insensitive.\n * @param {string} setting - property name.\n * @return {string} property value.\n */\nmethods.getSetting = async function getSetting (namespace, setting) {\n  return await this.shell(['settings', 'get', namespace, setting]);\n};\n\n/**\n * Retrieve the `adb bugreport` command output. This\n * operation may take up to several minutes.\n *\n * @param {?number} timeout [120000] - Command timeout in milliseconds\n * @returns {string} Command stdout\n */\nmethods.bugreport = async function bugreport (timeout = 120000) {\n  return await this.adbExec(['bugreport'], {timeout});\n};\n\n/**\n * @typedef {Object} ScreenrecordOptions\n * @property {?string} videoSize - The format is widthxheight.\n *                  The default value is the device's native display resolution (if supported),\n *                  1280x720 if not. For best results,\n *                  use a size supported by your device's Advanced Video Coding (AVC) encoder.\n *                  For example, \"1280x720\"\n * @property {?boolean} bugReport - Set it to `true` in order to display additional information on the video overlay,\n *                                  such as a timestamp, that is helpful in videos captured to illustrate bugs.\n *                                  This option is only supported since API level 27 (Android P).\n * @property {?string|number} timeLimit - The maximum recording time, in seconds.\n *                                        The default (and maximum) value is 180 (3 minutes).\n * @property {?string|number} bitRate - The video bit rate for the video, in megabits per second.\n *                The default value is 4. You can increase the bit rate to improve video quality,\n *                but doing so results in larger movie files.\n */\n\n/**\n * Initiate screenrecord utility on the device\n *\n * @param {string} destination - Full path to the writable media file destination\n *                               on the device file system.\n * @param {?ScreenrecordOptions} options [{}]\n * @returns {SubProcess} screenrecord process, which can be then controlled by the client code\n */\nmethods.screenrecord = function screenrecord (destination, options = {}) {\n  const cmd = ['screenrecord'];\n  const {\n    videoSize,\n    bitRate,\n    timeLimit,\n    bugReport,\n  } = options;\n  if (util.hasValue(videoSize)) {\n    cmd.push('--size', videoSize);\n  }\n  if (util.hasValue(timeLimit)) {\n    cmd.push('--time-limit', timeLimit);\n  }\n  if (util.hasValue(bitRate)) {\n    cmd.push('--bit-rate', bitRate);\n  }\n  if (bugReport) {\n    cmd.push('--bugreport');\n  }\n  cmd.push(destination);\n\n  const fullCmd = [\n    ...this.executable.defaultArgs,\n    'shell',\n    ...cmd\n  ];\n  log.debug(`Building screenrecord process with the command line: adb ${util.quote(fullCmd)}`);\n  return new SubProcess(this.executable.path, fullCmd);\n};\n\n/**\n * Executes the given function with the given input method context\n * and then restores the IME to the original value\n *\n * @param {string} ime - Valid IME identifier\n * @param {Function} fn - Function to execute\n * @returns {*} The result of the given function\n */\nmethods.runInImeContext = async function runInImeContext (ime, fn) {\n  const originalIme = await this.defaultIME();\n  if (originalIme === ime) {\n    log.debug(`The original IME is the same as '${ime}'. There is no need to reset it`);\n  } else {\n    await this.enableIME(ime);\n    await this.setIME(ime);\n    // https://github.com/appium/appium/issues/15943\n    await B.delay(500);\n  }\n  try {\n    return await fn();\n  } finally {\n    if (originalIme !== ime) {\n      await this.setIME(originalIme);\n    }\n  }\n};\n\n/**\n * Get tz database time zone formatted timezone\n *\n * @returns {string} TZ database Time Zones format\n *\n * @throws {error} If any exception is reported by adb shell.\n */\nmethods.getTimeZone = async function getTimeZone () {\n  log.debug('Getting current timezone');\n  try {\n    return await this.getDeviceProperty('persist.sys.timezone');\n  } catch (e) {\n    throw new Error(`Error getting timezone. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Retrieves the list of features supported by the device under test\n *\n * @returns {Array<string>} the list of supported feature names or an empty list.\n * An example adb command output:\n * ```\n * cmd\n * ls_v2\n * fixed_push_mkdir\n * shell_v2\n * abb\n * stat_v2\n * apex\n * abb_exec\n * remount_shell\n * fixed_push_symlink_timestamp\n * ```\n * @throws {Error} if there was an error while retrieving the list\n */\nmethods.listFeatures = async function listFeatures () {\n  this._memoizedFeatures = this._memoizedFeatures\n    || _.memoize(async () => await this.adbExec(['features']), () => this.curDeviceId);\n  try {\n    return (await this._memoizedFeatures())\n      .split(/\\s+/)\n      .map((x) => x.trim())\n      .filter(Boolean);\n  } catch (e) {\n    if (_.includes(e.stderr, 'unknown command')) {\n      return [];\n    }\n    throw e;\n  }\n};\n\n/**\n * Checks the state of streamed install feature.\n * This feature allows to speed up apk installation\n * since it does not require the original apk to be pushed to\n * the device under test first, which also saves space.\n * Although, it is required that both the device under test\n * and the adb server have the mentioned functionality.\n * See https://github.com/aosp-mirror/platform_system_core/blob/master/adb/client/adb_install.cpp\n * for more details\n *\n * @returns {boolean} `true` if the feature is supported by both adb and the\n * device under test\n */\nmethods.isStreamedInstallSupported = async function isStreamedInstallSupported () {\n  const proto = Object.getPrototypeOf(this);\n  proto._helpOutput = proto._helpOutput || await this.adbExec(['help']);\n  return proto._helpOutput.includes('--streaming')\n    && (await this.listFeatures()).includes('cmd');\n};\n\n/**\n * Checks whether incremental install feature is supported by ADB.\n * Read https://developer.android.com/preview/features#incremental\n * for more details on it.\n *\n * @returns {boolean} `true` if the feature is supported by both adb and the\n * device under test\n */\nmethods.isIncrementalInstallSupported = async function isIncrementalInstallSupported () {\n  const {binary} = await this.getVersion();\n  if (!binary) {\n    return false;\n  }\n  return util.compareVersions(binary.version, '>=', '30.0.1')\n    && (await this.listFeatures()).includes('abb_exec');\n};\n\n/**\n * Retrieves the list of packages from Doze whitelist on Android 8+\n *\n * @returns {Array<string>} The list of whitelisted packages. An example output:\n * system,com.android.shell,2000\n * system,com.google.android.cellbroadcastreceiver,10143\n * user,io.appium.settings,10157\n */\nmethods.getDeviceIdleWhitelist = async function getDeviceIdleWhitelist () {\n  if (await this.getApiLevel() < 23) {\n    // Doze mode has only been added since Android 6\n    return [];\n  }\n\n  log.info('Listing packages in Doze whitelist');\n  const output = await this.shell(['dumpsys', 'deviceidle', 'whitelist']);\n  return _.trim(output).split(/\\n/)\n    .map((line) => _.trim(line))\n    .filter(Boolean);\n};\n\n/**\n * Adds an existing package(s) into the Doze whitelist on Android 8+\n *\n * @param  {...string} packages One or more packages to add. If the package\n * already exists in the whitelist then it is only going to be added once.\n * If the package with the given name is not installed/not known then an error\n * will be thrown.\n * @returns {Boolean} `true` if the command to add package(s) has been executed\n */\nmethods.addToDeviceIdleWhitelist = async function addToDeviceIdleWhitelist (...packages) {\n  if (_.isEmpty(packages) || await this.getApiLevel() < 23) {\n    // Doze mode has only been added since Android 6\n    return false;\n  }\n\n  log.info(`Adding ${util.pluralize('package', packages.length)} ${JSON.stringify(packages)} to Doze whitelist`);\n  await this.shellChunks((pkg) => ['dumpsys', 'deviceidle', 'whitelist', `+${pkg}`], packages);\n  return true;\n};\n\nexport default methods;\n"],"mappings":"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"}