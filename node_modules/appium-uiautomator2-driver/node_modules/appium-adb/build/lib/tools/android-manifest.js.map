{"version":3,"file":"android-manifest.js","names":["_teen_process","require","_logger","_interopRequireDefault","_helpers","_support","_lodash","_path","_adbkitApkreader","manifestMethods","packageAndLaunchActivityFromManifest","appPath","endsWith","APKS_EXTENSION","extractBaseApk","manifest","apkReader","ApkReader","open","readManifest","e","log","debug","Error","pkg","activity","parseManifest","info","apkPackage","apkActivity","targetSdkVersionFromManifest","originalAppPath","getTargetSdkViaApkReader","usesSdk","_","isInteger","targetSdkVersion","getTargetSdkViaAapt","initAapt","args","stdout","exec","binaries","aapt","parseInt","versionGetters","toolName","versionGetter","message","JSON","stringify","map","pair","targetSdkVersionUsingPKG","cmdOutput","shell","RegExp","length","compileManifest","manifestPackage","targetPackage","platform","platformPath","getAndroidPlatformAndPath","sdkRoot","resultPath","androidJarPath","path","resolve","fs","exists","rimraf","initAapt2","util","quote","aapt2","stderr","e1","insertManifest","srcApk","dstApk","zip","assertValidZip","unzipFile","manifestName","basename","copyFile","ign","cwd","dirname","tmpRoot","tempDir","openDir","extractAllTo","mv","toArchive","hasInternetPermissionFromManifest","usesPermissions","some","name","_default","exports","default"],"sources":["../../../lib/tools/android-manifest.js"],"sourcesContent":["import { exec } from 'teen_process';\nimport log from '../logger.js';\nimport {\n  getAndroidPlatformAndPath, unzipFile,\n  APKS_EXTENSION, parseManifest } from '../helpers.js';\nimport { fs, zip, tempDir, util } from '@appium/support';\nimport _ from 'lodash';\nimport path from 'path';\nimport ApkReader from 'adbkit-apkreader';\n\nlet manifestMethods = {};\n\n/**\n * @typedef {Object} APKInfo\n * @property {string} apkPackage - The name of application package, for example 'com.acme.app'.\n * @property {string} apkActivity - The name of main application activity.\n */\n\n/**\n * Extract package and main activity name from application manifest.\n *\n * @param {string} appPath - The full path to application .apk(s) package\n * @return {APKInfo} The parsed application info.\n * @throws {error} If there was an error while getting the data from the given\n *                 application package.\n */\nmanifestMethods.packageAndLaunchActivityFromManifest = async function packageAndLaunchActivityFromManifest (appPath) {\n  if (appPath.endsWith(APKS_EXTENSION)) {\n    appPath = await this.extractBaseApk(appPath);\n  }\n\n  let manifest;\n  try {\n    const apkReader = await ApkReader.open(appPath);\n    manifest = await apkReader.readManifest();\n  } catch (e) {\n    log.debug(e);\n    throw new Error(`Cannot extract a manifest from '${appPath}'. ` +\n      `Is it a valid Android application?`);\n  }\n  const {pkg, activity} = parseManifest(manifest);\n  log.info(`Package name: '${pkg}'`);\n  log.info(`Main activity name: '${activity}'`);\n  return {\n    apkPackage: pkg,\n    apkActivity: activity,\n  };\n};\n\n/**\n * Extract target SDK version from application manifest.\n *\n * @param {string} appPath - The full path to .apk(s) package.\n * @return {number} The version of the target SDK.\n * @throws {error} If there was an error while getting the data from the given\n *                 application package.\n */\nmanifestMethods.targetSdkVersionFromManifest = async function targetSdkVersionFromManifest (appPath) {\n  log.debug(`Extracting target SDK version of '${appPath}'`);\n  const originalAppPath = appPath;\n  if (appPath.endsWith(APKS_EXTENSION)) {\n    appPath = await this.extractBaseApk(appPath);\n  }\n\n  const getTargetSdkViaApkReader = async () => {\n    const apkReader = await ApkReader.open(appPath);\n    const manifest = await apkReader.readManifest();\n    if (manifest.usesSdk && _.isInteger(manifest.usesSdk.targetSdkVersion)) {\n      return manifest.usesSdk.targetSdkVersion;\n    }\n    throw new Error('Cannot find the information about targetSdkVersion in the manifest');\n  };\n  const getTargetSdkViaAapt = async () => {\n    await this.initAapt();\n    const args = ['dump', 'badging', appPath];\n    const {stdout} = await exec(this.binaries.aapt, args);\n    const targetSdkVersion = /targetSdkVersion:'([^']+)'/g.exec(stdout);\n    if (!targetSdkVersion) {\n      log.debug(stdout);\n      throw new Error('Cannot parse the command output');\n    }\n    return parseInt(targetSdkVersion[1], 10);\n  };\n  const versionGetters = [\n    ['ApkReader', getTargetSdkViaApkReader],\n    ['aapt', getTargetSdkViaAapt],\n  ];\n  for (const [toolName, versionGetter] of versionGetters) {\n    try {\n      return await versionGetter();\n    } catch (e) {\n      log.info(`Cannot extract targetSdkVersion of '${originalAppPath}' using ${toolName}. ` +\n        `Original error: ${e.message}`);\n    }\n  }\n  throw new Error(`Cannot extract the target SDK version number of '${originalAppPath}' using either of ` +\n    `${JSON.stringify(versionGetters.map((pair) => pair[0]))} tools. ` +\n    `Check the server log for more details`);\n};\n\n/**\n * Extract target SDK version from package information.\n *\n * @param {string} pkg - The class name of the package installed on the device under test.\n * @param {?string} cmdOutput - Optional parameter containing the output of\n *                              _dumpsys package_ command. It may speed up the method execution.\n * @return {number} The version of the target SDK.\n */\nmanifestMethods.targetSdkVersionUsingPKG = async function targetSdkVersionUsingPKG (pkg, cmdOutput = null) {\n  let stdout = cmdOutput || await this.shell(['dumpsys', 'package', pkg]);\n  let targetSdkVersion = new RegExp(/targetSdk=([^\\s\\s]+)/g).exec(stdout);\n  if (targetSdkVersion && targetSdkVersion.length >= 2) {\n    targetSdkVersion = targetSdkVersion[1];\n  } else {\n    // targetSdk not found in the dump, assigning 0 to targetSdkVersion\n    targetSdkVersion = 0;\n  }\n  return parseInt(targetSdkVersion, 10);\n};\n\n/**\n * Create binary representation of package manifest (usually AndroidManifest.xml).\n * `${manifest}.apk` file will be created as the result of this method\n * containing the compiled manifest.\n *\n * @param {string} manifest - Full path to the initial manifest template\n * @param {string} manifestPackage - The name of the manifest package\n * @param {string} targetPackage - The name of the destination package\n */\nmanifestMethods.compileManifest = async function compileManifest (manifest, manifestPackage, targetPackage) {\n  const {platform, platformPath} = await getAndroidPlatformAndPath(this.sdkRoot);\n  if (!platform) {\n    throw new Error('Cannot compile the manifest. The required platform does not exist (API level >= 17)');\n  }\n  const resultPath = `${manifest}.apk`;\n  const androidJarPath = path.resolve(platformPath, 'android.jar');\n  if (await fs.exists(resultPath)) {\n    await fs.rimraf(resultPath);\n  }\n  try {\n    await this.initAapt2();\n    // https://developer.android.com/studio/command-line/aapt2\n    const args = [\n      'link',\n      '-o', resultPath,\n      '--manifest', manifest,\n      '--rename-manifest-package', manifestPackage,\n      '--rename-instrumentation-target-package', targetPackage,\n      '-I', androidJarPath,\n      '-v',\n    ];\n    log.debug(`Compiling the manifest using '${util.quote([this.binaries.aapt2, ...args])}'`);\n    await exec(this.binaries.aapt2, args);\n  } catch (e) {\n    log.debug('Cannot compile the manifest using aapt2. Defaulting to aapt. ' +\n      `Original error: ${e.stderr || e.message}`);\n    await this.initAapt();\n    const args = [\n      'package',\n      '-M', manifest,\n      '--rename-manifest-package', manifestPackage,\n      '--rename-instrumentation-target-package', targetPackage,\n      '-I', androidJarPath,\n      '-F', resultPath,\n      '-f',\n    ];\n    log.debug(`Compiling the manifest using '${util.quote([this.binaries.aapt, ...args])}'`);\n    try {\n      await exec(this.binaries.aapt, args);\n    } catch (e1) {\n      throw new Error(`Cannot compile the manifest. Original error: ${e1.stderr || e1.message}`);\n    }\n  }\n  log.debug(`Compiled the manifest at '${resultPath}'`);\n};\n\n/**\n * Replace/insert the specially precompiled manifest file into the\n * particular package.\n *\n * @param {string} manifest - Full path to the precompiled manifest\n *                            created by `compileManifest` method call\n *                            without .apk extension\n * @param {string} srcApk - Full path to the existing valid application package, where\n *                          this manifest has to be insetred to. This package\n *                          will NOT be modified.\n * @param {string} dstApk - Full path to the resulting package.\n *                          The file will be overridden if it already exists.\n */\nmanifestMethods.insertManifest = async function insertManifest (manifest, srcApk, dstApk) {\n  log.debug(`Inserting manifest '${manifest}', src: '${srcApk}', dst: '${dstApk}'`);\n  await zip.assertValidZip(srcApk);\n  await unzipFile(`${manifest}.apk`);\n  const manifestName = path.basename(manifest);\n  try {\n    await this.initAapt();\n    await fs.copyFile(srcApk, dstApk);\n    log.debug('Moving manifest');\n    try {\n      await exec(this.binaries.aapt, [\n        'remove', dstApk, manifestName\n      ]);\n    } catch (ign) {}\n    await exec(this.binaries.aapt, [\n      'add', dstApk, manifestName\n    ], {cwd: path.dirname(manifest)});\n  } catch (e) {\n    log.debug('Cannot insert manifest using aapt. Defaulting to zip. ' +\n      `Original error: ${e.stderr || e.message}`);\n    const tmpRoot = await tempDir.openDir();\n    try {\n      // Unfortunately NodeJS does not provide any reliable methods\n      // to replace files inside zip archives without loading the\n      // whole archive content into RAM\n      log.debug(`Extracting the source apk at '${srcApk}'`);\n      await zip.extractAllTo(srcApk, tmpRoot);\n      log.debug('Moving manifest');\n      await fs.mv(manifest, path.resolve(tmpRoot, manifestName));\n      log.debug(`Collecting the destination apk at '${dstApk}'`);\n      await zip.toArchive(dstApk, {\n        cwd: tmpRoot,\n      });\n    } finally {\n      await fs.rimraf(tmpRoot);\n    }\n  }\n  log.debug(`Manifest insertion into '${dstApk}' is completed`);\n};\n\n/**\n * Check whether package manifest contains Internet permissions.\n *\n * @param {string} appPath - The full path to .apk(s) package.\n * @return {boolean} True if the manifest requires Internet access permission.\n */\nmanifestMethods.hasInternetPermissionFromManifest = async function hasInternetPermissionFromManifest (appPath) {\n  log.debug(`Checking if '${appPath}' requires internet access permission in the manifest`);\n  if (appPath.endsWith(APKS_EXTENSION)) {\n    appPath = await this.extractBaseApk(appPath);\n  }\n\n  const apkReader = await ApkReader.open(appPath);\n  const manifest = await apkReader.readManifest();\n  return (manifest.usesPermissions || []).some(({name}) => name === 'android.permission.INTERNET');\n};\n\nexport default manifestMethods;\n"],"mappings":"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"}