"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _logger = _interopRequireDefault(require("../logger.js"));
var _path = _interopRequireDefault(require("path"));
var _support = require("@appium/support");
var _lruCache = _interopRequireDefault(require("lru-cache"));
var _helpers = require("../helpers.js");
var _asyncLock = _interopRequireDefault(require("async-lock"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _crypto = _interopRequireDefault(require("crypto"));
const AAB_CACHE = new _lruCache.default({
  max: 10,
  dispose: (hash, extractedFilesRoot) => _support.fs.rimraf(extractedFilesRoot)
});
const AAB_CACHE_GUARD = new _asyncLock.default();
const UNIVERSAL_APK = 'universal.apk';
const aabUtilsMethods = {};
process.on('exit', () => {
  if (!AAB_CACHE.size) {
    return;
  }
  const paths = [...AAB_CACHE.values()];
  _logger.default.debug(`Performing cleanup of ${paths.length} cached .aab ` + _support.util.pluralize('package', paths.length));
  for (const appPath of paths) {
    try {
      _support.fs.rimrafSync(appPath);
    } catch (e) {
      _logger.default.warn(e.message);
    }
  }
});
aabUtilsMethods.extractUniversalApk = async function extractUniversalApk(aabPath, opts = {}) {
  if (!(await _support.fs.exists(aabPath))) {
    throw new Error(`The file at '${aabPath}' either does not exist or is not accessible`);
  }
  const aabName = _path.default.basename(aabPath);
  const apkName = aabName.substring(0, aabName.length - _path.default.extname(aabName).length) + '.apk';
  const tmpRoot = await _support.tempDir.openDir();
  const tmpApksPath = _path.default.join(tmpRoot, `${aabName}.apks`);
  try {
    return await AAB_CACHE_GUARD.acquire(aabPath, async () => {
      const aabHash = await _support.fs.hash(aabPath);
      const {
        keystore,
        keystorePassword,
        keyAlias,
        keyPassword
      } = opts;
      let cacheHash = aabHash;
      if (keystore) {
        if (!(await _support.fs.exists(keystore))) {
          throw new Error(`The keystore file at '${keystore}' either does not exist ` + `or is not accessible`);
        }
        if (!keystorePassword || !keyAlias || !keyPassword) {
          throw new Error('It is mandatory to also provide keystore password, key alias, ' + 'and key password if the keystore path is set');
        }
        const keystoreHash = await _support.fs.hash(keystore);
        const keyAliasHash = _crypto.default.createHash('sha1');
        keyAliasHash.update(keyAlias);
        cacheHash = [cacheHash, keystoreHash, keyAliasHash.digest('hex')].join(':');
      }
      _logger.default.debug(`Calculated the cache key for '${aabPath}': ${cacheHash}`);
      if (AAB_CACHE.has(cacheHash)) {
        const resultPath = _path.default.resolve(AAB_CACHE.get(cacheHash), apkName);
        if (await _support.fs.exists(resultPath)) {
          return resultPath;
        }
        AAB_CACHE.del(cacheHash);
      }
      await this.initAapt2();
      const args = ['build-apks', '--aapt2', this.binaries.aapt2, '--bundle', aabPath, '--output', tmpApksPath, ...(keystore ? ['--ks', keystore, '--ks-pass', `pass:${keystorePassword}`, '--ks-key-alias', keyAlias, '--key-pass', `pass:${keyPassword}`] : []), '--mode=universal'];
      _logger.default.debug(`Preparing universal .apks bundle from '${aabPath}'`);
      await this.execBundletool(args, `Cannot build a universal .apks bundle from '${aabPath}'`);
      _logger.default.debug(`Unpacking universal application bundle at '${tmpApksPath}' to '${tmpRoot}'`);
      await (0, _helpers.unzipFile)(tmpApksPath, tmpRoot);
      let universalApkPath;
      const fileDeletionPromises = [];
      const allFileNames = await _support.fs.readdir(tmpRoot);
      for (const fileName of allFileNames) {
        const fullPath = _path.default.join(tmpRoot, fileName);
        if (fileName === UNIVERSAL_APK) {
          universalApkPath = fullPath;
        } else {
          fileDeletionPromises.push(_support.fs.rimraf(fullPath));
        }
      }
      try {
        await _bluebird.default.all(fileDeletionPromises);
      } catch (ign) {}
      if (!universalApkPath) {
        _logger.default.debug(`The following items were extracted from the .aab bundle: ${allFileNames}`);
        throw new Error(`${UNIVERSAL_APK} cannot be found in '${aabPath}' bundle. ` + `Does the archive contain a valid application bundle?`);
      }
      const resultPath = _path.default.join(tmpRoot, apkName);
      _logger.default.debug(`Found ${UNIVERSAL_APK} at '${universalApkPath}'. Caching it to '${resultPath}'`);
      await _support.fs.mv(universalApkPath, resultPath);
      AAB_CACHE.set(cacheHash, tmpRoot);
      return resultPath;
    });
  } catch (e) {
    await _support.fs.rimraf(tmpRoot);
    throw e;
  }
};
var _default = aabUtilsMethods;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,