"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureOptions = exports.declarations = void 0;
const reader_1 = require("./reader");
const declarations_1 = require("./declarations");
Object.defineProperty(exports, "declarations", { enumerable: true, get: function () { return declarations_1.declarations; } });
const logger_1 = require("../logger");
__exportStar(require("./reader"), exports);
/**
 * Configures how this plugin handles TypeDoc options.
 * @param app TypeDoc Application
 */
function configureOptions(app) {
    const log = new logger_1.AppiumPluginLogger(app.logger, 'options');
    // for evil
    app.options.addReader(new reader_1.AppiumPluginOptionsReader(log));
    // add our custom options
    for (const declaration of Object.values(declarations_1.declarations)) {
        app.options.addDeclaration(declaration);
    }
    return app;
}
exports.configureOptions = configureOptions;
//# sourceMappingURL=index.js.map