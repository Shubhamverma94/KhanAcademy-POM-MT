"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const guards_1 = require("../../guards");
const utils_1 = require("../../utils");
const types_1 = require("../types");
exports.default = [
    {
        getter({ refl }) {
            if (!(0, guards_1.isParameterReflection)(refl)) {
                return;
            }
            return refl.comment?.hasVisibleComponent() ? refl.comment : undefined;
        },
        commentSource: types_1.CommentSource.Parameter,
    },
    {
        /**
         * @returns The comment from some method that this one implements or overwrites or w/e;
         * typically coming from interfaces in `@appium/types`
         */
        getter({ refl, knownBuiltinMethods }) {
            if (!(0, guards_1.isParameterReflection)(refl) || !knownBuiltinMethods) {
                return;
            }
            const signatureRefl = refl.parent;
            if (!(0, guards_1.isCallSignatureReflection)(signatureRefl)) {
                return;
            }
            const methodRefl = signatureRefl.parent;
            const paramIdx = signatureRefl.parameters?.indexOf(refl);
            if (paramIdx === undefined || paramIdx < 0) {
                return;
            }
            const builtinMethodRefl = knownBuiltinMethods.get(methodRefl.name);
            if (!builtinMethodRefl) {
                return;
            }
            const builtinParams = (0, utils_1.findCallSignature)(builtinMethodRefl)?.parameters;
            if (!builtinParams?.[paramIdx]) {
                return;
            }
            const builtinParam = builtinParams[paramIdx];
            if (builtinParam.comment?.hasVisibleComponent()) {
                return builtinParam.comment;
            }
        },
        commentSource: types_1.CommentSource.BuiltinParameter,
    },
];
//# sourceMappingURL=parameter.js.map