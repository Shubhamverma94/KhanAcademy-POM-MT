"use strict";
/**
 * Strategies to derive a comment from a `SignatureReflection`
 * @module
 */
Object.defineProperty(exports, "__esModule", { value: true });
const guards_1 = require("../../guards");
const utils_1 = require("../../utils");
const types_1 = require("../types");
exports.default = [
    {
        getter({ refl }) {
            if (!(0, guards_1.isCallSignatureReflection)(refl)) {
                return;
            }
            if (refl.comment?.hasVisibleComponent()) {
                return refl.comment;
            }
        },
        commentSource: types_1.CommentSource.Signature,
    },
    {
        /**
         * @returns The comment from some method that this one implements or overwrites or w/e;
         * typically coming from interfaces in `@appium/types`
         */
        getter({ refl, knownBuiltinMethods }) {
            if (!(0, guards_1.isCallSignatureReflection)(refl)) {
                return;
            }
            const methodRefl = refl.parent;
            const builtinMethodRefl = knownBuiltinMethods?.get(methodRefl.name);
            if (!builtinMethodRefl) {
                return;
            }
            const builtinSig = (0, utils_1.findCallSignature)(builtinMethodRefl);
            if (!builtinSig) {
                return;
            }
            if (builtinSig.comment?.hasVisibleComponent()) {
                return builtinSig.comment;
            }
        },
        commentSource: types_1.CommentSource.BuiltinSignature,
    },
];
//# sourceMappingURL=signature.js.map