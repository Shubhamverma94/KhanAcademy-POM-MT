import { Context, DeclarationReflection } from 'typedoc';
import { AppiumPluginLogger } from '../logger';
import { ExecMethodDataSet, ModuleCommands, RouteMap } from '../model';
import { KnownMethods } from './types';
/**
 * Returns routes pulled from `builtinCommands` if the driver implements them as methods.
 *
 * This makes up for the fact that `newMethodMap` only defines _new_ methods, not ones that already
 * exist in `@appium/base-driver`.
 *
 * Sorry about all the arguments!
 * @param args Required arguments
 * @returns More routes pulled from `builtinCommands`, if the driver implements them
 */
export declare function convertOverrides({ ctx, log, parentRefl, classMethods, builtinMethods, newRouteMap, newExecMethodMap, builtinCommands, }: ConvertOverridesOpts): RouteMap;
/**
 * Options for {@link convertOverrides}
 */
export interface ConvertOverridesOpts {
    ctx: Context;
    /**
     * Logger
     */
    log: AppiumPluginLogger;
    /**
     * Project/module reflection
     */
    parentRefl: DeclarationReflection;
    /**
     * Methods in the class
     */
    classMethods: KnownMethods;
    /**
     * Methods in `@appium/base-driver`
     */
    builtinMethods: KnownMethods;
    /**
     * New routes in the class via `newMethodMap`
     */
    newRouteMap: RouteMap;
    /**
     * Execute methods in the class via `executeMethodMap`
     */
    newExecMethodMap: ExecMethodDataSet;
    /**
     * Routes in `@appium/base-driver`
     */
    builtinCommands: ModuleCommands;
}
//# sourceMappingURL=overrides.d.ts.map