/**
 * @deprecated Use the `deploy` export from `@appium/docutils`
 */
export class Mike {
    constructor(opts: MikeOpts);
    /** @type {string} */ remote: string;
    /** @type {string} */ branch: string;
    /** @type {string?} */ prefix: string | null;
    /** @type {string} */ configFile: string;
    /** @type {boolean} */ _mikeVerified: boolean;
    /**
     * Throw an error if the 'mike' binary cannot be found
     *
     * @throws {Error}
     */
    verifyMike(): Promise<void>;
    /**
     * Get an array of args based on the class members that can be used with Mike-related subprocess
     * execution
     *
     * @param {string} cmdName - the name of the mike command to run
     * @param {string[]} cmdArgs - an array of command-specific arguments
     *
     * @returns {string[]}
     */
    getMikeArgs(cmdName: string, cmdArgs: string[]): string[];
    /**
     * Exec mike as a subprocess
     *
     * @param {string} mikeCmd - the mike command to run
     * @param {string[]} [mikeArgs=[]] - the arguments to pass to the mike command
     * @param {boolean?} [verify=true] - whether to verify mike exists first
     *
     * @returns {Promise<import('teen_process').ExecResult<string>>}
     */
    exec(mikeCmd: string, mikeArgs?: string[] | undefined, verify?: boolean | null | undefined): Promise<import('teen_process').ExecResult<string>>;
    /**
     * Return the list of mike deploys
     *
     * @returns {string[]}
     */
    list(): string[];
    /**
     * Set the default version or alias
     *
     * @param {string} alias - the version or alias
     */
    setDefault(alias: string): Promise<void>;
    /**
     * Deploy docs to the branch
     *
     * @param {MikeDeployOpts} opts - the deploy options
     */
    deploy(opts: any): Promise<void>;
}
/**
 * - options for instantiating a Mike object
 */
export type MikeOpts = {
    /**
     * - the git remote to push docs to
     */
    remote?: string | undefined;
    /**
     * - the git branch to push docs to
     */
    branch?: string | undefined;
    /**
     * - the path prefix on the branch if any
     */
    prefix: string | null;
    /**
     * - the mkdocs config file to use
     */
    configFile: string;
};
/**
 * - options for deploying docs with Mike
 */
export type MikeDeployOpts = any;
//# sourceMappingURL=mike.d.ts.map