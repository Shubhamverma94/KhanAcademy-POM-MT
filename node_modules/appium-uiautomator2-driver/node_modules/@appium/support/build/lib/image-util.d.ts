/// <reference types="node" />
export type AppiumJimp = Omit<Jimp, 'getBuffer'> & {
    getBuffer: Jimp['getBufferAsync'];
};
export type Region = {
    left: number;
    top: number;
    width: number;
    height: number;
};
/**
 * Crop the image by given rectangle (use base64 string as input and output)
 *
 * @param {string} base64Image The string with base64 encoded image
 * @param {Region} rect The selected region of image
 * @return {Promise<string>} base64 encoded string of cropped image
 */
export function cropBase64Image(base64Image: string, rect: Region): Promise<string>;
/**
 * Create a pngjs image from given base64 image
 *
 * @param {string} base64Image The string with base64 encoded image
 * @return {Promise<PNG>} The image object
 */
export function base64ToImage(base64Image: string): Promise<PNG>;
/**
 * Create a base64 string for given image object
 *
 * @param {PNG} image The image object
 * @return {Promise<string>} The string with base64 encoded image
 */
export function imageToBase64(image: PNG): Promise<string>;
/**
 * Crop the image by given rectangle
 *
 * @param {PNG} image The image to mutate by cropping
 * @param {Region} rect The selected region of image
 */
export function cropImage(image: PNG, rect: Region): PNG;
/**
 * Utility function to get a Jimp image object from buffer or base64 data. Jimp
 * is a great library however it does IO in the constructor so it's not
 * convenient for our async/await model.
 *
 * @param {Buffer|string} data - binary image buffer or base64-encoded image
 * string
 * @returns {Promise<AppiumJimp>} - the jimp image object
 */
export function getJimpImage(data: Buffer | string): Promise<AppiumJimp>;
export const MIME_JPEG: "image/jpeg";
export const MIME_PNG: "image/png";
export const MIME_BMP: "image/bmp";
import Jimp from "jimp";
import { PNG } from "pngjs";
import { Buffer } from "buffer";
//# sourceMappingURL=image-util.d.ts.map