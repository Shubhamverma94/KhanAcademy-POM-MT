"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _asyncbox = require("asyncbox");
var _support = require("@appium/support");
var _androidHelpers = require("../android-helpers");
var _driver = require("appium/driver");
var _utils = require("../utils");
const APP_EXTENSIONS = ['.apk', '.apks'];
const RESOLVER_ACTIVITY_NAME = 'android/com.android.internal.app.ResolverActivity';
const commands = {};
exports.commands = commands;
commands.isAppInstalled = async function isAppInstalled(appId) {
  return await this.adb.isAppInstalled(appId);
};
commands.mobileIsAppInstalled = async function mobileIsAppInstalled(opts = {}) {
  const {
    appId
  } = (0, _utils.requireArgs)('appId', opts);
  return await this.isAppInstalled(appId);
};
commands.queryAppState = async function queryAppState(appId) {
  this.log.info(`Querying the state of '${appId}'`);
  if (!(await this.adb.isAppInstalled(appId))) {
    return _androidHelpers.APP_STATE.NOT_INSTALLED;
  }
  if (!(await this.adb.processExists(appId))) {
    return _androidHelpers.APP_STATE.NOT_RUNNING;
  }
  const appIdRe = new RegExp(`\\b${_lodash.default.escapeRegExp(appId)}/`);
  for (const line of (await this.adb.dumpWindows()).split('\n')) {
    if (appIdRe.test(line) && ['mCurrentFocus', 'mFocusedApp'].some(x => line.includes(x))) {
      return _androidHelpers.APP_STATE.RUNNING_IN_FOREGROUND;
    }
  }
  return _androidHelpers.APP_STATE.RUNNING_IN_BACKGROUND;
};
commands.mobileQueryAppState = async function mobileQueryAppState(opts = {}) {
  const {
    appId
  } = (0, _utils.requireArgs)('appId', opts);
  return await this.queryAppState(appId);
};
commands.activateApp = async function activateApp(appId) {
  this.log.debug(`Activating '${appId}'`);
  const apiLevel = await this.adb.getApiLevel();
  if (apiLevel < 24) {
    const cmd = ['monkey', '-p', appId, '-c', 'android.intent.category.LAUNCHER', '1'];
    let output = '';
    try {
      output = await this.adb.shell(cmd);
      this.log.debug(`Command stdout: ${output}`);
    } catch (e) {
      this.log.errorAndThrow(`Cannot activate '${appId}'. Original error: ${e.message}`);
    }
    if (output.includes('monkey aborted')) {
      this.log.errorAndThrow(`Cannot activate '${appId}'. Are you sure it is installed?`);
    }
    return;
  }
  let activityName = await this.adb.resolveLaunchableActivity(appId);
  if (activityName === RESOLVER_ACTIVITY_NAME) {
    this.log.debug(`The launchable activity name of '${appId}' was resolved to '${activityName}'. ` + `Switching the resolver to not use cmd`);
    activityName = await this.adb.resolveLaunchableActivity(appId, {
      preferCmd: false
    });
  }
  const stdout = await this.adb.shell(['am', apiLevel < 26 ? 'start' : 'start-activity', '-a', 'android.intent.action.MAIN', '-c', 'android.intent.category.LAUNCHER', '-f', '0x10200000', '-n', activityName]);
  this.log.debug(stdout);
  if (/^error:/mi.test(stdout)) {
    throw new Error(`Cannot activate '${appId}'. Original error: ${stdout}`);
  }
};
commands.mobileActivateApp = async function mobileActivateApp(opts = {}) {
  const {
    appId
  } = (0, _utils.requireArgs)('appId', opts);
  return await this.activateApp(appId);
};
commands.removeApp = async function removeApp(appId, options = {}) {
  return await this.adb.uninstallApk(appId, options);
};
commands.mobileRemoveApp = async function mobileRemoveApp(opts = {}) {
  const {
    appId
  } = (0, _utils.requireArgs)('appId', opts);
  return await this.removeApp(appId, opts);
};
commands.terminateApp = async function terminateApp(appId, options = {}) {
  this.log.info(`Terminating '${appId}'`);
  if (!(await this.adb.processExists(appId))) {
    this.log.info(`The app '${appId}' is not running`);
    return false;
  }
  await this.adb.forceStop(appId);
  const timeout = _support.util.hasValue(options.timeout) && !isNaN(options.timeout) ? parseInt(options.timeout, 10) : 500;
  if (timeout <= 0) {
    this.log.info(`'${appId}' has been terminated. Skip checking the application process state ` + `since the timeout was set as ${timeout}ms`);
    return true;
  }
  try {
    await (0, _asyncbox.waitForCondition)(async () => (await this.queryAppState(appId)) <= _androidHelpers.APP_STATE.NOT_RUNNING, {
      waitMs: timeout,
      intervalMs: 100
    });
  } catch (e) {
    this.log.errorAndThrow(`'${appId}' is still running after ${timeout}ms timeout`);
  }
  this.log.info(`'${appId}' has been successfully terminated`);
  return true;
};
commands.mobileTerminateApp = async function mobileTerminateApp(opts = {}) {
  const {
    appId
  } = (0, _utils.requireArgs)('appId', opts);
  return await this.terminateApp(appId, opts);
};
commands.installApp = async function installApp(appPath, options = {}) {
  const localPath = await this.helpers.configureApp(appPath, APP_EXTENSIONS);
  await this.adb.install(localPath, options);
};
commands.mobileInstallApp = async function mobileInstallApp(opts = {}) {
  const {
    appPath
  } = (0, _utils.requireArgs)('appPath', opts);
  return await this.installApp(appPath, opts);
};
commands.mobileClearApp = async function mobileClearApp(opts = {}) {
  const {
    appId
  } = opts;
  if (!appId) {
    throw new _driver.errors.InvalidArgumentError(`The 'appId' argument is required`);
  }
  await this.adb.clear(appId);
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,