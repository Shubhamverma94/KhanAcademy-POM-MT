{"version":3,"file":"permissions.js","names":["_lodash","_interopRequireDefault","require","_driver","_bluebird","_utils","commands","exports","ALL_PERMISSIONS_MAGIC","PM_ACTION","Object","freeze","GRANT","REVOKE","APPOPS_ACTION","ALLOW","DENY","IGNORE","DEFAULT","PERMISSION_TARGET","PM","APPOPS","PERMISSIONS_TYPE","DENIED","GRANTED","REQUESTED","changePermissionsViaPm","permissions","appPackage","action","_","values","includes","errors","InvalidArgumentError","JSON","stringify","affectedPermissions","isArray","toLower","dumpsys","adb","shell","grantedPermissions","getGrantedPermissions","reqPermissons","getReqPermissions","difference","isEmpty","log","info","grantPermissions","B","all","map","name","revokePermission","changePermissionsViaAppops","promises","permission","mobileChangePermissions","opts","target","isNil","bind","ensureFeatureEnabled","ADB_SHELL_FEATURE","mobileGetPermissions","type","actionFunc","pkg","getDeniedPermissions","_default","default"],"sources":["../../../lib/commands/permissions.js"],"sourcesContent":["import _ from 'lodash';\nimport { errors } from 'appium/driver';\nimport B from 'bluebird';\nimport { ADB_SHELL_FEATURE } from '../utils';\n\nconst commands = {};\n\nconst ALL_PERMISSIONS_MAGIC = 'all';\nconst PM_ACTION = Object.freeze({\n  GRANT: 'grant',\n  REVOKE: 'revoke',\n});\nconst APPOPS_ACTION = Object.freeze({\n  ALLOW: 'allow',\n  DENY: 'deny',\n  IGNORE: 'ignore',\n  DEFAULT: 'default',\n});\nconst PERMISSION_TARGET = Object.freeze({\n  PM: 'pm',\n  APPOPS: 'appops',\n});\nconst PERMISSIONS_TYPE = Object.freeze({\n  DENIED: 'denied',\n  GRANTED: 'granted',\n  REQUESTED: 'requested',\n});\n\nasync function changePermissionsViaPm (permissions, appPackage, action) {\n  if (!_.values(PM_ACTION).includes(action)) {\n    throw new errors.InvalidArgumentError(`Unknown action '${action}'. ` +\n      `Only ${JSON.stringify(_.values(PM_ACTION))} actions are supported`);\n  }\n\n  let affectedPermissions = _.isArray(permissions) ? permissions : [permissions];\n  if (_.toLower(permissions) === ALL_PERMISSIONS_MAGIC) {\n    const dumpsys = await this.adb.shell(['dumpsys', 'package', appPackage]);\n    const grantedPermissions = await this.adb.getGrantedPermissions(appPackage, dumpsys);\n    if (action === PM_ACTION.GRANT) {\n      const reqPermissons = await this.adb.getReqPermissions(appPackage, dumpsys);\n      affectedPermissions = _.difference(reqPermissons, grantedPermissions);\n    } else {\n      affectedPermissions = grantedPermissions;\n    }\n    if (_.isEmpty(affectedPermissions)) {\n      this.log.info(`'${appPackage}' contains no permissions to ${action}`);\n      return;\n    }\n  }\n\n  if (action === PM_ACTION.GRANT) {\n    await this.adb.grantPermissions(appPackage, affectedPermissions);\n  } else {\n    await B.all(affectedPermissions.map((name) => this.adb.revokePermission(appPackage, name)));\n  }\n}\n\nasync function changePermissionsViaAppops (permissions, appPackage, action) {\n  if (!_.values(APPOPS_ACTION).includes(action)) {\n    throw new errors.InvalidArgumentError(`Unknown action '${action}'. ` +\n      `Only ${JSON.stringify(_.values(APPOPS_ACTION))} actions are supported`);\n  }\n  if (_.toLower(permissions) === ALL_PERMISSIONS_MAGIC) {\n    throw new errors.InvalidArgumentError(`'${ALL_PERMISSIONS_MAGIC}' permission is only supported for ` +\n      `'${PERMISSION_TARGET.PM}' target. ` +\n      `Check AppOpsManager.java from Android platform sources to get the full list of supported AppOps permissions`);\n  }\n\n  const promises = (_.isArray(permissions) ? permissions : [permissions])\n    .map((permission) => this.adb.shell(['appops', 'set', appPackage, permission, action]));\n  await B.all(promises);\n}\n\n/**\n * @typedef {Object} ChangePermissionsOptions\n * @property {!string|Array<string>} permissions\n * If `target` is set to 'pm':\n *   The full name of the permission to be changed\n * or a list of permissions. Check https://developer.android.com/reference/android/Manifest.permission\n * to get the full list of standard Android permssion names. Mandatory argument.\n * If 'all' magic string is passed then the chosen action is going to be applied to all\n * permisisons requested/granted by 'appPackage'.\n * If `target` is set to 'appops':\n *   The full name of the appops permission to be changed\n * or a list of permissions. Check AppOpsManager.java sources to get the full list of\n * supported appops permission names for the given Android pklatform.\n * Examples: 'ACTIVITY_RECOGNITION', 'SMS_FINANCIAL_TRANSACTIONS', 'READ_SMS', 'ACCESS_NOTIFICATIONS'.\n * The 'all' magic string is unsupported.\n * @property {string} appPackage [this.opts.appPackage] The application package to set change\n * permissions on. Defaults to the package name under test.\n * @property {string} action [grant|allow] One of `PM_ACTION` values if `target` is set to 'pm',\n * otherwise one of `APPOPS_ACTION` values\n * @property {string} target [pm] Either 'pm' or 'appops'. The 'appops' one requires\n * 'adb_shell' server security option to be enabled.\n */\n\n/**\n * Changes package permissions in runtime.\n *\n * @param {?ChangePermissionsOptions} opts - Available options mapping.\n * @throws {Error} if there was a failure while changing permissions\n */\ncommands.mobileChangePermissions = async function mobileChangePermissions (opts = {}) {\n  const {\n    permissions,\n    appPackage = this.opts.appPackage,\n    action = _.toLower(opts.target) === PERMISSION_TARGET.APPOPS ? APPOPS_ACTION.ALLOW : PM_ACTION.GRANT,\n    target = PERMISSION_TARGET.PM,\n  } = opts;\n  if (_.isNil(permissions)) {\n    throw new errors.InvalidArgumentError(`'permissions' argument is required`);\n  }\n  if (_.isEmpty(permissions)) {\n    throw new errors.InvalidArgumentError(`'permissions' argument must not be empty`);\n  }\n\n  switch (_.toLower(target)) {\n    case PERMISSION_TARGET.PM:\n      return await changePermissionsViaPm.bind(this)(permissions, appPackage, _.toLower(action));\n    case PERMISSION_TARGET.APPOPS:\n      this.ensureFeatureEnabled(ADB_SHELL_FEATURE);\n      return await changePermissionsViaAppops.bind(this)(permissions, appPackage, _.toLower(action));\n    default:\n      throw new errors.InvalidArgumentError(`'target' argument must be one of: ${_.values(PERMISSION_TARGET)}`);\n  }\n};\n\n/**\n * @typedef {Object} GetPermissionsOptions\n * @property {string} type [requested] - One of possible permission types to get.\n * Can be any of `PERMISSIONS_TYPE` values.\n * @property {string} appPackage [this.opts.appPackage] - The application package to set change\n * permissions on. Defaults to the package name under test.\n */\n\n/**\n * Gets runtime permissions list for the given application package.\n *\n * @param {GetPermissionsOptions} opts - Available options mapping.\n * @returns {Array<string>} The list of retrieved permissions for the given type\n * (can also be empty).\n * @throws {Error} if there was an error while getting permissions.\n */\ncommands.mobileGetPermissions = async function mobileGetPermissions (opts = {}) {\n  const {\n    type = PERMISSIONS_TYPE.REQUESTED,\n    appPackage = this.opts.appPackage,\n  } = opts;\n\n  let actionFunc;\n  switch (_.toLower(type)) {\n    case PERMISSIONS_TYPE.REQUESTED:\n      actionFunc = (pkg) => this.adb.getReqPermissions(pkg);\n      break;\n    case PERMISSIONS_TYPE.GRANTED:\n      actionFunc = (pkg) => this.adb.getGrantedPermissions(pkg);\n      break;\n    case PERMISSIONS_TYPE.DENIED:\n      actionFunc = (pkg) => this.adb.getDeniedPermissions(pkg);\n      break;\n    default:\n      throw new errors.InvalidArgumentError(`Unknown permissions type '${type}'. ` +\n        `Only ${JSON.stringify(_.values(PERMISSIONS_TYPE))} types are supported`);\n  }\n  return await actionFunc(appPackage);\n};\n\nexport { commands };\nexport default commands;\n"],"mappings":"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"}