"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _teen_process = require("teen_process");
var _support = require("@appium/support");
var _driver = require("appium/driver");
var _utils = require("../utils");
const commands = {};
exports.commands = commands;
commands.mobileShell = async function mobileShell(opts = {}) {
  this.ensureFeatureEnabled(_utils.ADB_SHELL_FEATURE);
  const {
    command,
    args = [],
    timeout = 20000,
    includeStderr
  } = opts;
  if (!_lodash.default.isString(command)) {
    throw new _driver.errors.InvalidArgumentError(`The 'command' argument is mandatory`);
  }
  const adbArgs = [...this.adb.executable.defaultArgs, 'shell', command, ...(_lodash.default.isArray(args) ? args : [args])];
  this.log.debug(`Running '${this.adb.executable.path} ${_support.util.quote(adbArgs)}'`);
  try {
    const {
      stdout,
      stderr
    } = await (0, _teen_process.exec)(this.adb.executable.path, adbArgs, {
      timeout
    });
    if (includeStderr) {
      return {
        stdout,
        stderr
      };
    }
    return stdout;
  } catch (err) {
    this.log.errorAndThrow(`Cannot execute the '${command}' shell command. ` + `Original error: ${err.message}. ` + `StdOut: ${err.stdout}. StdErr: ${err.stderr}`);
  }
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdGVlbl9wcm9jZXNzIiwiX3N1cHBvcnQiLCJfZHJpdmVyIiwiX3V0aWxzIiwiY29tbWFuZHMiLCJleHBvcnRzIiwibW9iaWxlU2hlbGwiLCJvcHRzIiwiZW5zdXJlRmVhdHVyZUVuYWJsZWQiLCJBREJfU0hFTExfRkVBVFVSRSIsImNvbW1hbmQiLCJhcmdzIiwidGltZW91dCIsImluY2x1ZGVTdGRlcnIiLCJfIiwiaXNTdHJpbmciLCJlcnJvcnMiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsImFkYkFyZ3MiLCJhZGIiLCJleGVjdXRhYmxlIiwiZGVmYXVsdEFyZ3MiLCJpc0FycmF5IiwibG9nIiwiZGVidWciLCJwYXRoIiwidXRpbCIsInF1b3RlIiwic3Rkb3V0Iiwic3RkZXJyIiwiZXhlYyIsImVyciIsImVycm9yQW5kVGhyb3ciLCJtZXNzYWdlIiwiX2RlZmF1bHQiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2NvbW1hbmRzL3NoZWxsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB7IHV0aWwgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtL2RyaXZlcic7XG5pbXBvcnQgeyBBREJfU0hFTExfRkVBVFVSRSB9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgY29tbWFuZHMgPSB7fTtcblxuY29tbWFuZHMubW9iaWxlU2hlbGwgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVTaGVsbCAob3B0cyA9IHt9KSB7XG4gIHRoaXMuZW5zdXJlRmVhdHVyZUVuYWJsZWQoQURCX1NIRUxMX0ZFQVRVUkUpO1xuXG4gIGNvbnN0IHtcbiAgICBjb21tYW5kLFxuICAgIGFyZ3MgPSBbXSxcbiAgICB0aW1lb3V0ID0gMjAwMDAsXG4gICAgaW5jbHVkZVN0ZGVycixcbiAgfSA9IG9wdHM7XG5cbiAgaWYgKCFfLmlzU3RyaW5nKGNvbW1hbmQpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihgVGhlICdjb21tYW5kJyBhcmd1bWVudCBpcyBtYW5kYXRvcnlgKTtcbiAgfVxuXG4gIGNvbnN0IGFkYkFyZ3MgPSBbXG4gICAgLi4udGhpcy5hZGIuZXhlY3V0YWJsZS5kZWZhdWx0QXJncyxcbiAgICAnc2hlbGwnLFxuICAgIGNvbW1hbmQsXG4gICAgLi4uKF8uaXNBcnJheShhcmdzKSA/IGFyZ3MgOiBbYXJnc10pXG4gIF07XG4gIHRoaXMubG9nLmRlYnVnKGBSdW5uaW5nICcke3RoaXMuYWRiLmV4ZWN1dGFibGUucGF0aH0gJHt1dGlsLnF1b3RlKGFkYkFyZ3MpfSdgKTtcbiAgdHJ5IHtcbiAgICBjb25zdCB7c3Rkb3V0LCBzdGRlcnJ9ID0gYXdhaXQgZXhlYyh0aGlzLmFkYi5leGVjdXRhYmxlLnBhdGgsIGFkYkFyZ3MsIHt0aW1lb3V0fSk7XG4gICAgaWYgKGluY2x1ZGVTdGRlcnIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0ZG91dCxcbiAgICAgICAgc3RkZXJyXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gc3Rkb3V0O1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aGlzLmxvZy5lcnJvckFuZFRocm93KGBDYW5ub3QgZXhlY3V0ZSB0aGUgJyR7Y29tbWFuZH0nIHNoZWxsIGNvbW1hbmQuIGAgK1xuICAgICAgYE9yaWdpbmFsIGVycm9yOiAke2Vyci5tZXNzYWdlfS4gYCArXG4gICAgICBgU3RkT3V0OiAke2Vyci5zdGRvdXR9LiBTdGRFcnI6ICR7ZXJyLnN0ZGVycn1gKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFFBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLE9BQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLE1BQUEsR0FBQUosT0FBQTtBQUVBLE1BQU1LLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFBQ0MsT0FBQSxDQUFBRCxRQUFBLEdBQUFBLFFBQUE7QUFFcEJBLFFBQVEsQ0FBQ0UsV0FBVyxHQUFHLGVBQWVBLFdBQVdBLENBQUVDLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRTtFQUM1RCxJQUFJLENBQUNDLG9CQUFvQixDQUFDQyx3QkFBaUIsQ0FBQztFQUU1QyxNQUFNO0lBQ0pDLE9BQU87SUFDUEMsSUFBSSxHQUFHLEVBQUU7SUFDVEMsT0FBTyxHQUFHLEtBQUs7SUFDZkM7RUFDRixDQUFDLEdBQUdOLElBQUk7RUFFUixJQUFJLENBQUNPLGVBQUMsQ0FBQ0MsUUFBUSxDQUFDTCxPQUFPLENBQUMsRUFBRTtJQUN4QixNQUFNLElBQUlNLGNBQU0sQ0FBQ0Msb0JBQW9CLENBQUUscUNBQW9DLENBQUM7RUFDOUU7RUFFQSxNQUFNQyxPQUFPLEdBQUcsQ0FDZCxHQUFHLElBQUksQ0FBQ0MsR0FBRyxDQUFDQyxVQUFVLENBQUNDLFdBQVcsRUFDbEMsT0FBTyxFQUNQWCxPQUFPLEVBQ1AsSUFBSUksZUFBQyxDQUFDUSxPQUFPLENBQUNYLElBQUksQ0FBQyxHQUFHQSxJQUFJLEdBQUcsQ0FBQ0EsSUFBSSxDQUFDLENBQUMsQ0FDckM7RUFDRCxJQUFJLENBQUNZLEdBQUcsQ0FBQ0MsS0FBSyxDQUFFLFlBQVcsSUFBSSxDQUFDTCxHQUFHLENBQUNDLFVBQVUsQ0FBQ0ssSUFBSyxJQUFHQyxhQUFJLENBQUNDLEtBQUssQ0FBQ1QsT0FBTyxDQUFFLEdBQUUsQ0FBQztFQUM5RSxJQUFJO0lBQ0YsTUFBTTtNQUFDVSxNQUFNO01BQUVDO0lBQU0sQ0FBQyxHQUFHLE1BQU0sSUFBQUMsa0JBQUksRUFBQyxJQUFJLENBQUNYLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDSyxJQUFJLEVBQUVQLE9BQU8sRUFBRTtNQUFDTjtJQUFPLENBQUMsQ0FBQztJQUNqRixJQUFJQyxhQUFhLEVBQUU7TUFDakIsT0FBTztRQUNMZSxNQUFNO1FBQ05DO01BQ0YsQ0FBQztJQUNIO0lBQ0EsT0FBT0QsTUFBTTtFQUNmLENBQUMsQ0FBQyxPQUFPRyxHQUFHLEVBQUU7SUFDWixJQUFJLENBQUNSLEdBQUcsQ0FBQ1MsYUFBYSxDQUFFLHVCQUFzQnRCLE9BQVEsbUJBQWtCLEdBQ3JFLG1CQUFrQnFCLEdBQUcsQ0FBQ0UsT0FBUSxJQUFHLEdBQ2pDLFdBQVVGLEdBQUcsQ0FBQ0gsTUFBTyxhQUFZRyxHQUFHLENBQUNGLE1BQU8sRUFBQyxDQUFDO0VBQ25EO0FBQ0YsQ0FBQztBQUFDLElBQUFLLFFBQUEsR0FHYTlCLFFBQVE7QUFBQUMsT0FBQSxDQUFBOEIsT0FBQSxHQUFBRCxRQUFBIn0=