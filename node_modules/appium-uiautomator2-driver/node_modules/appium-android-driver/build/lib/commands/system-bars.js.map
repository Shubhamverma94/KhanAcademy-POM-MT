{"version":3,"file":"system-bars.js","names":["_lodash","_interopRequireDefault","require","WINDOW_TITLE_PATTERN","FRAME_PATTERN","VIEW_VISIBILITY_PATTERN","VIEW_VISIBLE","STATUS_BAR_WINDOW_NAME_PREFIX","NAVIGATION_BAR_WINDOW_NAME_PREFIX","DEFAULT_WINDOW_PROPERTIES","visible","x","y","width","height","commands","parseWindowProperties","name","props","log","result","_","cloneDeep","propLines","join","frameMatch","exec","debug","Error","parseFloat","visibilityMatch","parseInt","parseWindows","lines","windows","currentWindowName","line","split","map","trimEnd","match","trim","length","isArray","push","isEmpty","statusBar","navigationBar","toPairs","startsWith","unmatchedWindows","filter","isNil","window","namePrefix","info","keys","getSystemBars","stdout","adb","shell","e","message","_default","exports","default"],"sources":["../../../lib/commands/system-bars.js"],"sourcesContent":["import _ from 'lodash';\n\nconst WINDOW_TITLE_PATTERN = /^\\s+Window\\s#\\d+\\sWindow\\{[0-9a-f]+\\s\\w+\\s([\\w-]+)\\}:$/;\nconst FRAME_PATTERN = /\\bm?[Ff]rame=\\[([0-9.-]+),([0-9.-]+)\\]\\[([0-9.-]+),([0-9.-]+)\\]/;\nconst VIEW_VISIBILITY_PATTERN = /\\bmViewVisibility=(0x[0-9a-fA-F]+)/;\n// https://developer.android.com/reference/android/view/View#VISIBLE\nconst VIEW_VISIBLE = 0x0;\nconst STATUS_BAR_WINDOW_NAME_PREFIX = 'StatusBar';\nconst NAVIGATION_BAR_WINDOW_NAME_PREFIX = 'NavigationBar';\nconst DEFAULT_WINDOW_PROPERTIES = {\n  visible: false,\n  x: 0, y: 0, width: 0, height: 0,\n};\n\nconst commands = {};\n\n/**\n * @typedef {Object} WindowProperties\n * @property {boolean} visible Whether the window is visible\n * @property {number} x Window x coordinate\n * @property {number} y Window y coordinate\n * @property {number} width Window width\n * @property {number} height Window height\n */\n\n/**\n * Parses window properties from adb dumpsys output\n *\n * @param {string} name The name of the window whose properties are being parsed\n * @param {Array<string>} props The list of particular window property lines.\n * Check the corresponding unit tests for more details on the input format.\n * @param {Object?} log Logger instance\n * @returns {WindowProperties} Parsed properties object\n * @throws {Error} If there was an issue while parsing the properties string\n */\nfunction parseWindowProperties (name, props, log = null) {\n  const result = _.cloneDeep(DEFAULT_WINDOW_PROPERTIES);\n  const propLines = props.join('\\n');\n  const frameMatch = FRAME_PATTERN.exec(propLines);\n  if (!frameMatch) {\n    log?.debug(propLines);\n    throw new Error(`Cannot parse the frame size from '${name}' window properties`);\n  }\n  result.x = parseFloat(frameMatch[1]);\n  result.y = parseFloat(frameMatch[2]);\n  result.width = parseFloat(frameMatch[3]) - result.x;\n  result.height = parseFloat(frameMatch[4]) - result.y;\n  const visibilityMatch = VIEW_VISIBILITY_PATTERN.exec(propLines);\n  if (!visibilityMatch) {\n    log?.debug(propLines);\n    throw new Error(`Cannot parse the visibility value from '${name}' window properties`);\n  }\n  result.visible = parseInt(visibilityMatch[1], 16) === VIEW_VISIBLE;\n  return result;\n}\n\n/**\n * Extracts status and navigation bar information from the window manager output.\n *\n * @param {Array<string>} lines Output from dumpsys command.\n * Check the corresponding unit tests for more details on the input format.\n * @param {Object?} log Logger instance\n * @return {Object} An object containing two items where keys are statusBar and navigationBar,\n * and values are corresponding WindowProperties objects\n * @throws {Error} If no window properties could be parsed\n */\nfunction parseWindows (lines, log = null) {\n  const windows = {};\n  let currentWindowName = null;\n  for (const line of lines.split('\\n').map(_.trimEnd)) {\n    const match = WINDOW_TITLE_PATTERN.exec(line);\n    if (match) {\n      currentWindowName = match[1];\n      windows[currentWindowName] = [];\n      continue;\n    }\n    if (_.trim(line).length === 0) {\n      currentWindowName = null;\n      continue;\n    }\n\n    if (currentWindowName && _.isArray(windows[currentWindowName])) {\n      windows[currentWindowName].push(line);\n    }\n  }\n  if (_.isEmpty(windows)) {\n    log?.debug(lines.join('\\n'));\n    throw new Error('Cannot parse any window information from the dumpsys output');\n  }\n\n  const result = {statusBar: null, navigationBar: null};\n  for (const [name, props] of _.toPairs(windows)) {\n    if (name.startsWith(STATUS_BAR_WINDOW_NAME_PREFIX)) {\n      result.statusBar = parseWindowProperties(name, props, log);\n    } else if (name.startsWith(NAVIGATION_BAR_WINDOW_NAME_PREFIX)) {\n      result.navigationBar = parseWindowProperties(name, props, log);\n    }\n  }\n  const unmatchedWindows = [\n    ['statusBar', STATUS_BAR_WINDOW_NAME_PREFIX],\n    ['navigationBar', NAVIGATION_BAR_WINDOW_NAME_PREFIX]\n  ].filter(([name]) => _.isNil(result[name]));\n  for (const [window, namePrefix] of unmatchedWindows) {\n    log?.info(`No windows have been found whose title matches to ` +\n      `'${namePrefix}'. Assuming it is invisible. ` +\n      `Only the following windows are available: ${_.keys(windows)}`);\n    result[window] = _.cloneDeep(DEFAULT_WINDOW_PROPERTIES);\n  }\n  return result;\n}\n\ncommands.getSystemBars = async function getSystemBars () {\n  let stdout;\n  try {\n    stdout = await this.adb.shell(['dumpsys', 'window', 'windows']);\n  } catch (e) {\n    throw new Error(`Cannot retrieve system bars details. Original error: ${e.message}`);\n  }\n  return parseWindows(stdout, this.log);\n};\n\n// for unit tests\nexport { parseWindows, parseWindowProperties };\nexport default commands;\n"],"mappings":"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"}