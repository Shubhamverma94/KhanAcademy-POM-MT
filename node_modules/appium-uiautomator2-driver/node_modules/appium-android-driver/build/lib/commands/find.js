"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _driver = require("appium/driver");
let helpers = {},
  extensions = {};
exports.helpers = helpers;
helpers.doFindElementOrEls = async function doFindElementOrEls(params) {
  return await this.bootstrap.sendAction('find', params);
};
helpers.findElOrEls = async function findElOrEls(strategy, selector, mult, context = '') {
  if (!selector) {
    throw new Error('Must provide a selector when finding elements');
  }
  let params = {
    strategy,
    selector,
    context,
    multiple: mult
  };
  let element;
  let doFind = async () => {
    try {
      element = await this.doFindElementOrEls(params);
    } catch (err) {
      if ((0, _driver.isErrorType)(err, _driver.errors.ProxyRequestError)) {
        err = err.getActualError();
      }
      if ((0, _driver.isErrorType)(err, _driver.errors.NoSuchElementError)) {
        return false;
      }
      throw err;
    }
    return !_lodash.default.isEmpty(element);
  };
  try {
    await this.implicitWaitForCondition(doFind);
  } catch (err) {
    if (err.message && err.message.match(/Condition unmet/)) {
      element = [];
    } else {
      throw err;
    }
  }
  if (mult) {
    return element;
  }
  if (_lodash.default.isEmpty(element)) {
    throw new _driver.errors.NoSuchElementError();
  }
  return element;
};
Object.assign(extensions, helpers);
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZHJpdmVyIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJleHBvcnRzIiwiZG9GaW5kRWxlbWVudE9yRWxzIiwicGFyYW1zIiwiYm9vdHN0cmFwIiwic2VuZEFjdGlvbiIsImZpbmRFbE9yRWxzIiwic3RyYXRlZ3kiLCJzZWxlY3RvciIsIm11bHQiLCJjb250ZXh0IiwiRXJyb3IiLCJtdWx0aXBsZSIsImVsZW1lbnQiLCJkb0ZpbmQiLCJlcnIiLCJpc0Vycm9yVHlwZSIsImVycm9ycyIsIlByb3h5UmVxdWVzdEVycm9yIiwiZ2V0QWN0dWFsRXJyb3IiLCJOb1N1Y2hFbGVtZW50RXJyb3IiLCJfIiwiaXNFbXB0eSIsImltcGxpY2l0V2FpdEZvckNvbmRpdGlvbiIsIm1lc3NhZ2UiLCJtYXRjaCIsIk9iamVjdCIsImFzc2lnbiIsIl9kZWZhdWx0IiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tYW5kcy9maW5kLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBlcnJvcnMsIGlzRXJyb3JUeXBlIH0gZnJvbSAnYXBwaXVtL2RyaXZlcic7XG5cblxubGV0IGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG4vKipcbiAqIFJlYXNvbiBmb3IgaXNvbGF0aW5nIGRvRmluZEVsZW1lbnRPckVscyBmcm9tIGZpbmRFbE9yRWxzIGlzIGZvciByZXVzaW5nIGZpbmRFbE9yRWxzXG4gKiBhY3Jvc3MgYW5kcm9pZC1kcml2ZXJzIChsaWtlIGFwcGl1bS11aWF1dG9tYXRvcjItZHJpdmVyKSB0byBhdm9pZCBjb2RlIGR1cGxpY2F0aW9uLlxuICogT3RoZXIgYW5kcm9pZC1kcml2ZXJzIChsaWtlIGFwcGl1bS11aWF1dG9tYXRvcjItZHJpdmVyKSBuZWVkIHRvIG92ZXJyaWRlIGRvRmluZEVsZW1lbnRPckVsc1xuICogdG8gZmFjaWxpdGF0ZSBmaW5kRWxPckVscy5cbiAqL1xuaGVscGVycy5kb0ZpbmRFbGVtZW50T3JFbHMgPSBhc3luYyBmdW5jdGlvbiBkb0ZpbmRFbGVtZW50T3JFbHMgKHBhcmFtcykge1xuICByZXR1cm4gYXdhaXQgdGhpcy5ib290c3RyYXAuc2VuZEFjdGlvbignZmluZCcsIHBhcmFtcyk7XG59O1xuXG4vLyBzdGF0ZWd5OiBsb2NhdG9yIHN0cmF0ZWd5XG4vLyBzZWxlY3RvcjogdGhlIGFjdHVhbCBzZWxlY3RvciBmb3IgZmluZGluZyBhbiBlbGVtZW50XG4vLyBtdWx0OiBtdWx0aXBsZSBlbGVtZW50cyBvciBqdXN0IG9uZT9cbi8vIGNvbnRleHQ6IGZpbmRpbmcgYW4gZWxlbWVudCBmcm9tIHRoZSByb290IGNvbnRleHQ/IG9yIHN0YXJ0aW5nIGZyb20gYW5vdGhlciBlbGVtZW50XG5oZWxwZXJzLmZpbmRFbE9yRWxzID0gYXN5bmMgZnVuY3Rpb24gZmluZEVsT3JFbHMgKHN0cmF0ZWd5LCBzZWxlY3RvciwgbXVsdCwgY29udGV4dCA9ICcnKSB7XG4gIGlmICghc2VsZWN0b3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcHJvdmlkZSBhIHNlbGVjdG9yIHdoZW4gZmluZGluZyBlbGVtZW50cycpO1xuICB9XG5cbiAgbGV0IHBhcmFtcyA9IHtcbiAgICBzdHJhdGVneSxcbiAgICBzZWxlY3RvcixcbiAgICBjb250ZXh0LFxuICAgIG11bHRpcGxlOiBtdWx0XG4gIH07XG5cbiAgbGV0IGVsZW1lbnQ7XG4gIGxldCBkb0ZpbmQgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGVsZW1lbnQgPSBhd2FpdCB0aGlzLmRvRmluZEVsZW1lbnRPckVscyhwYXJhbXMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuXG4gICAgICAvLyBpZiB0aGUgZXJyb3IgdGhhdCBjb21lcyBiYWNrIGlzIGZyb20gYSBwcm94aWVkIHJlcXVlc3QsIHdlIG5lZWQgdG9cbiAgICAgIC8vIHVud3JhcCBpdCB0byBpdHMgYWN0dWFsIHByb3RvY29sIGVycm9yIGZpcnN0XG4gICAgICBpZiAoaXNFcnJvclR5cGUoZXJyLCBlcnJvcnMuUHJveHlSZXF1ZXN0RXJyb3IpKSB7XG4gICAgICAgIGVyciA9IGVyci5nZXRBY3R1YWxFcnJvcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV4LWFzc2lnblxuICAgICAgfVxuXG4gICAgICAvLyBub3cgd2UgaGF2ZSB0byBpbnNwZWN0IHRoZSBlcnJvciB0byBkZXRlcm1pbmUgaWYgaXQgaXMgYSBubyBzdWNoXG4gICAgICAvLyBlbGVtZW50IGVycm9yLCBiYXNlZCBvbiB0aGUgc2hhcGUgb2YgdGhlIGVycm9yIG9iamVjdCBmcm9tXG4gICAgICAvLyBhcHBpdW0vZHJpdmVyXG4gICAgICBpZiAoaXNFcnJvclR5cGUoZXJyLCBlcnJvcnMuTm9TdWNoRWxlbWVudEVycm9yKSkge1xuICAgICAgICAvLyB3ZSBhcmUgZmluZSB3aXRoIHRoaXMsIGp1c3QgaW5kaWNhdGUgYSByZXRyeVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuXG4gICAgLy8gd2Ugd2FudCB0byByZXR1cm4gZmFsc2UgaWYgd2Ugd2FudCB0byBwb3RlbnRpYWxseSB0cnkgYWdhaW5cbiAgICByZXR1cm4gIV8uaXNFbXB0eShlbGVtZW50KTtcbiAgfTtcblxuICB0cnkge1xuICAgIGF3YWl0IHRoaXMuaW1wbGljaXRXYWl0Rm9yQ29uZGl0aW9uKGRvRmluZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIubWVzc2FnZSAmJiBlcnIubWVzc2FnZS5tYXRjaCgvQ29uZGl0aW9uIHVubWV0LykpIHtcbiAgICAgIC8vIG9ubHkgZ2V0IGhlcmUgaWYgd2UgYXJlIGxvb2tpbmcgZm9yIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgICAvLyBjb25kaXRpb24gd2FzIG5vdCBtZXQgc2V0dGluZyByZXMgdG8gZW1wdHkgYXJyYXlcbiAgICAgIGVsZW1lbnQgPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtdWx0KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbiAgaWYgKF8uaXNFbXB0eShlbGVtZW50KSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm9TdWNoRWxlbWVudEVycm9yKCk7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQ7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxPQUFBLEdBQUFELE9BQUE7QUFHQSxJQUFJRSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0VBQUVDLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFBQ0MsT0FBQSxDQUFBRixPQUFBLEdBQUFBLE9BQUE7QUFRbENBLE9BQU8sQ0FBQ0csa0JBQWtCLEdBQUcsZUFBZUEsa0JBQWtCQSxDQUFFQyxNQUFNLEVBQUU7RUFDdEUsT0FBTyxNQUFNLElBQUksQ0FBQ0MsU0FBUyxDQUFDQyxVQUFVLENBQUMsTUFBTSxFQUFFRixNQUFNLENBQUM7QUFDeEQsQ0FBQztBQU1ESixPQUFPLENBQUNPLFdBQVcsR0FBRyxlQUFlQSxXQUFXQSxDQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEdBQUcsRUFBRSxFQUFFO0VBQ3hGLElBQUksQ0FBQ0YsUUFBUSxFQUFFO0lBQ2IsTUFBTSxJQUFJRyxLQUFLLENBQUMsK0NBQStDLENBQUM7RUFDbEU7RUFFQSxJQUFJUixNQUFNLEdBQUc7SUFDWEksUUFBUTtJQUNSQyxRQUFRO0lBQ1JFLE9BQU87SUFDUEUsUUFBUSxFQUFFSDtFQUNaLENBQUM7RUFFRCxJQUFJSSxPQUFPO0VBQ1gsSUFBSUMsTUFBTSxHQUFHLE1BQUFBLENBQUEsS0FBWTtJQUN2QixJQUFJO01BQ0ZELE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQ1gsa0JBQWtCLENBQUNDLE1BQU0sQ0FBQztJQUNqRCxDQUFDLENBQUMsT0FBT1ksR0FBRyxFQUFFO01BSVosSUFBSSxJQUFBQyxtQkFBVyxFQUFDRCxHQUFHLEVBQUVFLGNBQU0sQ0FBQ0MsaUJBQWlCLENBQUMsRUFBRTtRQUM5Q0gsR0FBRyxHQUFHQSxHQUFHLENBQUNJLGNBQWMsQ0FBQyxDQUFDO01BQzVCO01BS0EsSUFBSSxJQUFBSCxtQkFBVyxFQUFDRCxHQUFHLEVBQUVFLGNBQU0sQ0FBQ0csa0JBQWtCLENBQUMsRUFBRTtRQUUvQyxPQUFPLEtBQUs7TUFDZDtNQUNBLE1BQU1MLEdBQUc7SUFDWDtJQUdBLE9BQU8sQ0FBQ00sZUFBQyxDQUFDQyxPQUFPLENBQUNULE9BQU8sQ0FBQztFQUM1QixDQUFDO0VBRUQsSUFBSTtJQUNGLE1BQU0sSUFBSSxDQUFDVSx3QkFBd0IsQ0FBQ1QsTUFBTSxDQUFDO0VBQzdDLENBQUMsQ0FBQyxPQUFPQyxHQUFHLEVBQUU7SUFDWixJQUFJQSxHQUFHLENBQUNTLE9BQU8sSUFBSVQsR0FBRyxDQUFDUyxPQUFPLENBQUNDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO01BR3ZEWixPQUFPLEdBQUcsRUFBRTtJQUNkLENBQUMsTUFBTTtNQUNMLE1BQU1FLEdBQUc7SUFDWDtFQUNGO0VBRUEsSUFBSU4sSUFBSSxFQUFFO0lBQ1IsT0FBT0ksT0FBTztFQUNoQjtFQUNBLElBQUlRLGVBQUMsQ0FBQ0MsT0FBTyxDQUFDVCxPQUFPLENBQUMsRUFBRTtJQUN0QixNQUFNLElBQUlJLGNBQU0sQ0FBQ0csa0JBQWtCLENBQUMsQ0FBQztFQUN2QztFQUNBLE9BQU9QLE9BQU87QUFDaEIsQ0FBQztBQUVEYSxNQUFNLENBQUNDLE1BQU0sQ0FBQzNCLFVBQVUsRUFBRUQsT0FBTyxDQUFDO0FBQUMsSUFBQTZCLFFBQUEsR0FFcEI1QixVQUFVO0FBQUFDLE9BQUEsQ0FBQTRCLE9BQUEsR0FBQUQsUUFBQSJ9