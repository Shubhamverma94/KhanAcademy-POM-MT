"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _asyncbox = require("asyncbox");
var _support = require("@appium/support");
var _path = _interopRequireDefault(require("path"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _androidHelpers = require("../android-helpers");
var _moment = _interopRequireDefault(require("moment"));
const commands = {};
exports.commands = commands;
const DEFAULT_EXT = '.mp4';
const RECORDING_STARTUP_TIMEOUT_MS = 3 * 1000;
const RECORDING_STOP_TIMEOUT_MS = 3 * 1000;
const MIN_API_LEVEL = 29;
const RECORDING_SERVICE_NAME = `${_androidHelpers.SETTINGS_HELPER_PKG_ID}/.recorder.RecorderService`;
const RECORDING_ACTIVITY_NAME = `${_androidHelpers.SETTINGS_HELPER_PKG_ID}/io.appium.settings.Settings`;
const RECORDING_ACTION_START = `${_androidHelpers.SETTINGS_HELPER_PKG_ID}.recording.ACTION_START`;
const RECORDING_ACTION_STOP = `${_androidHelpers.SETTINGS_HELPER_PKG_ID}.recording.ACTION_STOP`;
const RECORDINGS_ROOT = `/storage/emulated/0/Android/data/${_androidHelpers.SETTINGS_HELPER_PKG_ID}/files`;
const DEFAULT_FILENAME_FORMAT = 'YYYY-MM-DDTHH-mm-ss';
async function uploadRecordedMedia(localFile, remotePath = null, uploadOptions = {}) {
  if (_lodash.default.isEmpty(remotePath)) {
    return (await _support.util.toInMemoryBase64(localFile)).toString();
  }
  const {
    user,
    pass,
    method,
    headers,
    fileFieldName,
    formFields,
    uploadTimeout: timeout
  } = uploadOptions;
  const options = {
    method: method || 'PUT',
    headers,
    fileFieldName,
    formFields,
    timeout
  };
  if (user && pass) {
    options.auth = {
      user,
      pass
    };
  }
  await _support.net.uploadFile(localFile, remotePath, options);
  return '';
}
function adjustMediaExtension(name) {
  return _lodash.default.toLower(name).endsWith(DEFAULT_EXT) ? name : `${name}${DEFAULT_EXT}`;
}
async function verifyMediaProjectionRecordingIsSupported(adb) {
  const apiLevel = await adb.getApiLevel();
  if (apiLevel < MIN_API_LEVEL) {
    throw new Error(`Media projection-based recording is not available on API Level ${apiLevel}. ` + `Minimum required API Level is ${MIN_API_LEVEL}.`);
  }
}
class MediaProjectionRecorder {
  constructor(adb) {
    this.adb = adb;
  }
  async isRunning() {
    const stdout = await this.adb.shell(['dumpsys', 'activity', 'services', RECORDING_SERVICE_NAME]);
    return stdout.includes(RECORDING_SERVICE_NAME);
  }
  async start(opts = {}) {
    if (await this.isRunning()) {
      return false;
    }
    await this.cleanup();
    const {
      filename,
      maxDurationSec,
      priority,
      resolution
    } = opts;
    const args = ['am', 'start', '-n', RECORDING_ACTIVITY_NAME, '-a', RECORDING_ACTION_START];
    if (filename) {
      args.push('--es', 'filename', filename);
    }
    if (maxDurationSec) {
      args.push('--es', 'max_duration_sec', `${maxDurationSec}`);
    }
    if (priority) {
      args.push('--es', 'priority', priority);
    }
    if (resolution) {
      args.push('--es', 'resolution', resolution);
    }
    await this.adb.shell(args);
    await new _bluebird.default((resolve, reject) => {
      setTimeout(async () => {
        if (!(await this.isRunning())) {
          return reject(new Error(`The media projection recording is not running after ${RECORDING_STARTUP_TIMEOUT_MS}ms. ` + `Please check the logcat output for more details.`));
        }
        resolve();
      }, RECORDING_STARTUP_TIMEOUT_MS);
    });
    return true;
  }
  async cleanup() {
    await this.adb.shell([`rm -f ${RECORDINGS_ROOT}/*`]);
  }
  async pullRecent() {
    const recordings = await this.adb.ls(RECORDINGS_ROOT, ['-tr']);
    if (_lodash.default.isEmpty(recordings)) {
      return null;
    }
    const dstPath = _path.default.join(await _support.tempDir.openDir(), recordings[0]);
    await this.adb.pull(`${RECORDINGS_ROOT}/${recordings[0]}`, dstPath, {
      timeout: 300000
    });
    return dstPath;
  }
  async stop() {
    if (!(await this.isRunning())) {
      return false;
    }
    await this.adb.shell(['am', 'start', '-n', RECORDING_ACTIVITY_NAME, '-a', RECORDING_ACTION_STOP]);
    try {
      await (0, _asyncbox.waitForCondition)(async () => !(await this.isRunning()), {
        waitMs: RECORDING_STOP_TIMEOUT_MS,
        intervalMs: 500
      });
    } catch (e) {
      throw new Error(`The attempt to stop the current media projection recording timed out after ` + `${RECORDING_STOP_TIMEOUT_MS}ms`);
    }
    return true;
  }
}
commands.mobileStartMediaProjectionRecording = async function mobileStartMediaProjectionRecording(options = {}) {
  await verifyMediaProjectionRecordingIsSupported(this.adb);
  const {
    resolution,
    priority,
    maxDurationSec,
    filename
  } = options;
  const recorder = new MediaProjectionRecorder(this.adb);
  const fname = adjustMediaExtension(filename || (0, _moment.default)().format(DEFAULT_FILENAME_FORMAT));
  const didStart = await recorder.start({
    resolution,
    priority,
    maxDurationSec,
    filename: fname
  });
  if (didStart) {
    this.log.info(`A new media projection recording '${fname}' has been successfully started`);
  } else {
    this.log.info('Another media projection recording is already in progress. There is nothing to start');
  }
  return didStart;
};
commands.mobileIsMediaProjectionRecordingRunning = async function mobileIsMediaProjectionRecordingRunning() {
  await verifyMediaProjectionRecordingIsSupported(this.adb);
  const recorder = new MediaProjectionRecorder(this.adb);
  return await recorder.isRunning();
};
commands.mobileStopMediaProjectionRecording = async function mobileStopMediaProjectionRecording(options = {}) {
  await verifyMediaProjectionRecordingIsSupported(this.adb);
  const recorder = new MediaProjectionRecorder(this.adb);
  if (await recorder.stop()) {
    this.log.info('Successfully stopped a media projection recording. Pulling the recorded media');
  } else {
    this.log.info('Media projection recording is not running. There is nothing to stop');
  }
  const recentRecordingPath = await recorder.pullRecent();
  if (!recentRecordingPath) {
    throw new Error(`No recent media projection recording have been found. Did you start any?`);
  }
  const {
    remotePath
  } = options;
  if (_lodash.default.isEmpty(remotePath)) {
    const {
      size
    } = await _support.fs.stat(recentRecordingPath);
    this.log.debug(`The size of the resulting media projection recording is ${_support.util.toReadableSizeString(size)}`);
  }
  try {
    return await uploadRecordedMedia(recentRecordingPath, remotePath, options);
  } finally {
    await _support.fs.rimraf(_path.default.dirname(recentRecordingPath));
  }
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNib3giLCJfc3VwcG9ydCIsIl9wYXRoIiwiX2JsdWViaXJkIiwiX2FuZHJvaWRIZWxwZXJzIiwiX21vbWVudCIsImNvbW1hbmRzIiwiZXhwb3J0cyIsIkRFRkFVTFRfRVhUIiwiUkVDT1JESU5HX1NUQVJUVVBfVElNRU9VVF9NUyIsIlJFQ09SRElOR19TVE9QX1RJTUVPVVRfTVMiLCJNSU5fQVBJX0xFVkVMIiwiUkVDT1JESU5HX1NFUlZJQ0VfTkFNRSIsIlNFVFRJTkdTX0hFTFBFUl9QS0dfSUQiLCJSRUNPUkRJTkdfQUNUSVZJVFlfTkFNRSIsIlJFQ09SRElOR19BQ1RJT05fU1RBUlQiLCJSRUNPUkRJTkdfQUNUSU9OX1NUT1AiLCJSRUNPUkRJTkdTX1JPT1QiLCJERUZBVUxUX0ZJTEVOQU1FX0ZPUk1BVCIsInVwbG9hZFJlY29yZGVkTWVkaWEiLCJsb2NhbEZpbGUiLCJyZW1vdGVQYXRoIiwidXBsb2FkT3B0aW9ucyIsIl8iLCJpc0VtcHR5IiwidXRpbCIsInRvSW5NZW1vcnlCYXNlNjQiLCJ0b1N0cmluZyIsInVzZXIiLCJwYXNzIiwibWV0aG9kIiwiaGVhZGVycyIsImZpbGVGaWVsZE5hbWUiLCJmb3JtRmllbGRzIiwidXBsb2FkVGltZW91dCIsInRpbWVvdXQiLCJvcHRpb25zIiwiYXV0aCIsIm5ldCIsInVwbG9hZEZpbGUiLCJhZGp1c3RNZWRpYUV4dGVuc2lvbiIsIm5hbWUiLCJ0b0xvd2VyIiwiZW5kc1dpdGgiLCJ2ZXJpZnlNZWRpYVByb2plY3Rpb25SZWNvcmRpbmdJc1N1cHBvcnRlZCIsImFkYiIsImFwaUxldmVsIiwiZ2V0QXBpTGV2ZWwiLCJFcnJvciIsIk1lZGlhUHJvamVjdGlvblJlY29yZGVyIiwiY29uc3RydWN0b3IiLCJpc1J1bm5pbmciLCJzdGRvdXQiLCJzaGVsbCIsImluY2x1ZGVzIiwic3RhcnQiLCJvcHRzIiwiY2xlYW51cCIsImZpbGVuYW1lIiwibWF4RHVyYXRpb25TZWMiLCJwcmlvcml0eSIsInJlc29sdXRpb24iLCJhcmdzIiwicHVzaCIsIkIiLCJyZXNvbHZlIiwicmVqZWN0Iiwic2V0VGltZW91dCIsInB1bGxSZWNlbnQiLCJyZWNvcmRpbmdzIiwibHMiLCJkc3RQYXRoIiwicGF0aCIsImpvaW4iLCJ0ZW1wRGlyIiwib3BlbkRpciIsInB1bGwiLCJzdG9wIiwid2FpdEZvckNvbmRpdGlvbiIsIndhaXRNcyIsImludGVydmFsTXMiLCJlIiwibW9iaWxlU3RhcnRNZWRpYVByb2plY3Rpb25SZWNvcmRpbmciLCJyZWNvcmRlciIsImZuYW1lIiwibW9tZW50IiwiZm9ybWF0IiwiZGlkU3RhcnQiLCJsb2ciLCJpbmZvIiwibW9iaWxlSXNNZWRpYVByb2plY3Rpb25SZWNvcmRpbmdSdW5uaW5nIiwibW9iaWxlU3RvcE1lZGlhUHJvamVjdGlvblJlY29yZGluZyIsInJlY2VudFJlY29yZGluZ1BhdGgiLCJzaXplIiwiZnMiLCJzdGF0IiwiZGVidWciLCJ0b1JlYWRhYmxlU2l6ZVN0cmluZyIsInJpbXJhZiIsImRpcm5hbWUiLCJfZGVmYXVsdCIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY29tbWFuZHMvbWVkaWEtcHJvamVjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgd2FpdEZvckNvbmRpdGlvbiB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCB7IHV0aWwsIGZzLCBuZXQsIHRlbXBEaXIgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyBTRVRUSU5HU19IRUxQRVJfUEtHX0lEIH0gZnJvbSAnLi4vYW5kcm9pZC1oZWxwZXJzJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuXG5jb25zdCBjb21tYW5kcyA9IHt9O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL2lvLmFwcGl1bS5zZXR0aW5ncyNpbnRlcm5hbC1hdWRpby0tdmlkZW8tcmVjb3JkaW5nXG5jb25zdCBERUZBVUxUX0VYVCA9ICcubXA0JztcbmNvbnN0IFJFQ09SRElOR19TVEFSVFVQX1RJTUVPVVRfTVMgPSAzICogMTAwMDtcbmNvbnN0IFJFQ09SRElOR19TVE9QX1RJTUVPVVRfTVMgPSAzICogMTAwMDtcbmNvbnN0IE1JTl9BUElfTEVWRUwgPSAyOTtcbmNvbnN0IFJFQ09SRElOR19TRVJWSUNFX05BTUUgPSBgJHtTRVRUSU5HU19IRUxQRVJfUEtHX0lEfS8ucmVjb3JkZXIuUmVjb3JkZXJTZXJ2aWNlYDtcbmNvbnN0IFJFQ09SRElOR19BQ1RJVklUWV9OQU1FID0gYCR7U0VUVElOR1NfSEVMUEVSX1BLR19JRH0vaW8uYXBwaXVtLnNldHRpbmdzLlNldHRpbmdzYDtcbmNvbnN0IFJFQ09SRElOR19BQ1RJT05fU1RBUlQgPSBgJHtTRVRUSU5HU19IRUxQRVJfUEtHX0lEfS5yZWNvcmRpbmcuQUNUSU9OX1NUQVJUYDtcbmNvbnN0IFJFQ09SRElOR19BQ1RJT05fU1RPUCA9IGAke1NFVFRJTkdTX0hFTFBFUl9QS0dfSUR9LnJlY29yZGluZy5BQ1RJT05fU1RPUGA7XG5jb25zdCBSRUNPUkRJTkdTX1JPT1QgPSBgL3N0b3JhZ2UvZW11bGF0ZWQvMC9BbmRyb2lkL2RhdGEvJHtTRVRUSU5HU19IRUxQRVJfUEtHX0lEfS9maWxlc2A7XG5jb25zdCBERUZBVUxUX0ZJTEVOQU1FX0ZPUk1BVCA9ICdZWVlZLU1NLUREVEhILW1tLXNzJztcblxuXG5hc3luYyBmdW5jdGlvbiB1cGxvYWRSZWNvcmRlZE1lZGlhIChsb2NhbEZpbGUsIHJlbW90ZVBhdGggPSBudWxsLCB1cGxvYWRPcHRpb25zID0ge30pIHtcbiAgaWYgKF8uaXNFbXB0eShyZW1vdGVQYXRoKSkge1xuICAgIHJldHVybiAoYXdhaXQgdXRpbC50b0luTWVtb3J5QmFzZTY0KGxvY2FsRmlsZSkpLnRvU3RyaW5nKCk7XG4gIH1cblxuICBjb25zdCB7XG4gICAgdXNlcixcbiAgICBwYXNzLFxuICAgIG1ldGhvZCxcbiAgICBoZWFkZXJzLFxuICAgIGZpbGVGaWVsZE5hbWUsXG4gICAgZm9ybUZpZWxkcyxcbiAgICB1cGxvYWRUaW1lb3V0OiB0aW1lb3V0LFxuICB9ID0gdXBsb2FkT3B0aW9ucztcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICBtZXRob2Q6IG1ldGhvZCB8fCAnUFVUJyxcbiAgICBoZWFkZXJzLFxuICAgIGZpbGVGaWVsZE5hbWUsXG4gICAgZm9ybUZpZWxkcyxcbiAgICB0aW1lb3V0LFxuICB9O1xuICBpZiAodXNlciAmJiBwYXNzKSB7XG4gICAgb3B0aW9ucy5hdXRoID0ge3VzZXIsIHBhc3N9O1xuICB9XG4gIGF3YWl0IG5ldC51cGxvYWRGaWxlKGxvY2FsRmlsZSwgcmVtb3RlUGF0aCwgb3B0aW9ucyk7XG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gYWRqdXN0TWVkaWFFeHRlbnNpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF8udG9Mb3dlcihuYW1lKS5lbmRzV2l0aChERUZBVUxUX0VYVCkgPyBuYW1lIDogYCR7bmFtZX0ke0RFRkFVTFRfRVhUfWA7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHZlcmlmeU1lZGlhUHJvamVjdGlvblJlY29yZGluZ0lzU3VwcG9ydGVkIChhZGIpIHtcbiAgY29uc3QgYXBpTGV2ZWwgPSBhd2FpdCBhZGIuZ2V0QXBpTGV2ZWwoKTtcbiAgaWYgKGFwaUxldmVsIDwgTUlOX0FQSV9MRVZFTCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTWVkaWEgcHJvamVjdGlvbi1iYXNlZCByZWNvcmRpbmcgaXMgbm90IGF2YWlsYWJsZSBvbiBBUEkgTGV2ZWwgJHthcGlMZXZlbH0uIGAgK1xuICAgICAgYE1pbmltdW0gcmVxdWlyZWQgQVBJIExldmVsIGlzICR7TUlOX0FQSV9MRVZFTH0uYCk7XG4gIH1cbn1cblxuXG5jbGFzcyBNZWRpYVByb2plY3Rpb25SZWNvcmRlciB7XG4gIGNvbnN0cnVjdG9yIChhZGIpIHtcbiAgICB0aGlzLmFkYiA9IGFkYjtcbiAgfVxuXG4gIGFzeW5jIGlzUnVubmluZyAoKSB7XG4gICAgY29uc3Qgc3Rkb3V0ID0gYXdhaXQgdGhpcy5hZGIuc2hlbGwoW1xuICAgICAgJ2R1bXBzeXMnLCAnYWN0aXZpdHknLCAnc2VydmljZXMnLCBSRUNPUkRJTkdfU0VSVklDRV9OQU1FXG4gICAgXSk7XG4gICAgcmV0dXJuIHN0ZG91dC5pbmNsdWRlcyhSRUNPUkRJTkdfU0VSVklDRV9OQU1FKTtcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0IChvcHRzID0ge30pIHtcbiAgICBpZiAoYXdhaXQgdGhpcy5pc1J1bm5pbmcoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGF3YWl0IHRoaXMuY2xlYW51cCgpO1xuICAgIGNvbnN0IHtcbiAgICAgIGZpbGVuYW1lLFxuICAgICAgbWF4RHVyYXRpb25TZWMsXG4gICAgICBwcmlvcml0eSxcbiAgICAgIHJlc29sdXRpb24sXG4gICAgfSA9IG9wdHM7XG4gICAgY29uc3QgYXJncyA9IFtcbiAgICAgICdhbScsICdzdGFydCcsXG4gICAgICAnLW4nLCBSRUNPUkRJTkdfQUNUSVZJVFlfTkFNRSxcbiAgICAgICctYScsIFJFQ09SRElOR19BQ1RJT05fU1RBUlQsXG4gICAgXTtcbiAgICBpZiAoZmlsZW5hbWUpIHtcbiAgICAgIGFyZ3MucHVzaCgnLS1lcycsICdmaWxlbmFtZScsIGZpbGVuYW1lKTtcbiAgICB9XG4gICAgaWYgKG1heER1cmF0aW9uU2VjKSB7XG4gICAgICBhcmdzLnB1c2goJy0tZXMnLCAnbWF4X2R1cmF0aW9uX3NlYycsIGAke21heER1cmF0aW9uU2VjfWApO1xuICAgIH1cbiAgICBpZiAocHJpb3JpdHkpIHtcbiAgICAgIGFyZ3MucHVzaCgnLS1lcycsICdwcmlvcml0eScsIHByaW9yaXR5KTtcbiAgICB9XG4gICAgaWYgKHJlc29sdXRpb24pIHtcbiAgICAgIGFyZ3MucHVzaCgnLS1lcycsICdyZXNvbHV0aW9uJywgcmVzb2x1dGlvbik7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMuYWRiLnNoZWxsKGFyZ3MpO1xuICAgIGF3YWl0IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAoIWF3YWl0IHRoaXMuaXNSdW5uaW5nKCkpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBUaGUgbWVkaWEgcHJvamVjdGlvbiByZWNvcmRpbmcgaXMgbm90IHJ1bm5pbmcgYWZ0ZXIgJHtSRUNPUkRJTkdfU1RBUlRVUF9USU1FT1VUX01TfW1zLiBgICtcbiAgICAgICAgICAgIGBQbGVhc2UgY2hlY2sgdGhlIGxvZ2NhdCBvdXRwdXQgZm9yIG1vcmUgZGV0YWlscy5gXG4gICAgICAgICAgKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSwgUkVDT1JESU5HX1NUQVJUVVBfVElNRU9VVF9NUyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBhc3luYyBjbGVhbnVwICgpIHtcbiAgICBhd2FpdCB0aGlzLmFkYi5zaGVsbChbYHJtIC1mICR7UkVDT1JESU5HU19ST09UfS8qYF0pO1xuICB9XG5cbiAgYXN5bmMgcHVsbFJlY2VudCAoKSB7XG4gICAgY29uc3QgcmVjb3JkaW5ncyA9IGF3YWl0IHRoaXMuYWRiLmxzKFJFQ09SRElOR1NfUk9PVCwgWyctdHInXSk7XG4gICAgaWYgKF8uaXNFbXB0eShyZWNvcmRpbmdzKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgZHN0UGF0aCA9IHBhdGguam9pbihhd2FpdCB0ZW1wRGlyLm9wZW5EaXIoKSwgcmVjb3JkaW5nc1swXSk7XG4gICAgLy8gaW5jcmVhc2UgdGltZW91dCB0byA1IG1pbnV0ZXMgYmVjYXVzZSBpdCBtaWdodCB0YWtlIGEgd2hpbGUgdG8gcHVsbCBhIGxhcmdlIHZpZGVvIGZpbGVcbiAgICBhd2FpdCB0aGlzLmFkYi5wdWxsKGAke1JFQ09SRElOR1NfUk9PVH0vJHtyZWNvcmRpbmdzWzBdfWAsIGRzdFBhdGgsIHt0aW1lb3V0OiAzMDAwMDB9KTtcbiAgICByZXR1cm4gZHN0UGF0aDtcbiAgfVxuXG4gIGFzeW5jIHN0b3AgKCkge1xuICAgIGlmICghYXdhaXQgdGhpcy5pc1J1bm5pbmcoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGF3YWl0IHRoaXMuYWRiLnNoZWxsKFtcbiAgICAgICdhbScsICdzdGFydCcsXG4gICAgICAnLW4nLCBSRUNPUkRJTkdfQUNUSVZJVFlfTkFNRSxcbiAgICAgICctYScsIFJFQ09SRElOR19BQ1RJT05fU1RPUCxcbiAgICBdKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgd2FpdEZvckNvbmRpdGlvbihhc3luYyAoKSA9PiAhKGF3YWl0IHRoaXMuaXNSdW5uaW5nKCkpLCB7XG4gICAgICAgIHdhaXRNczogUkVDT1JESU5HX1NUT1BfVElNRU9VVF9NUyxcbiAgICAgICAgaW50ZXJ2YWxNczogNTAwLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgVGhlIGF0dGVtcHQgdG8gc3RvcCB0aGUgY3VycmVudCBtZWRpYSBwcm9qZWN0aW9uIHJlY29yZGluZyB0aW1lZCBvdXQgYWZ0ZXIgYCArXG4gICAgICAgIGAke1JFQ09SRElOR19TVE9QX1RJTUVPVVRfTVN9bXNgXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU3RhcnRSZWNvcmRpbmdPcHRpb25zXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmc/fSByZXNvbHV0aW9uIE1heGltdW0gc3VwcG9ydGVkIHJlc29sdXRpb24gb24tZGV2aWNlIChEZXRlY3RlZFxuICogYXV0b21hdGljYWxseSBieSB0aGUgYXBwIGl0c2VsZiksIHdoaWNoIHVzdWFsbHkgZXF1YWxzIHRvIEZ1bGwgSEQgMTkyMHgxMDgwIG9uIG1vc3RcbiAqIHBob25lcyBob3dldmVyIHlvdSBjYW4gY2hhbmdlIGl0IHRvIGZvbGxvd2luZyBzdXBwb3J0ZWQgcmVzb2x1dGlvbnNcbiAqIGFzIHdlbGw6IFwiMTkyMHgxMDgwXCIsIFwiMTI4MHg3MjBcIiwgXCI3MjB4NDgwXCIsIFwiMzIweDI0MFwiLCBcIjE3NngxNDRcIi5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyP30gbWF4RHVyYXRpb25TZWMgWzkwMF0gRGVmYXVsdCB2YWx1ZTogOTAwIHNlY29uZHMgd2hpY2ggbWVhbnNcbiAqIG1heGltdW0gYWxsb3dlZCBkdXJhdGlvbiBpcyAxNSBtaW51dGUsIHlvdSBjYW4gaW5jcmVhc2UgaXQgaWYgeW91ciB0ZXN0IHRha2VzXG4gKiBsb25nZXIgdGhhbiB0aGF0LlxuICogQHByb3BlcnR5IHtzdHJpbmc/fSBwcmlvcml0eSBbaGlnaF0gTWVhbnMgcmVjb3JkaW5nIHRocmVhZCBwcmlvcml0eSBpcyBtYXhpbXVtXG4gKiBob3dldmVyIGlmIHlvdSBmYWNlIHBlcmZvcm1hbmNlIGRyb3BzIGR1cmluZyB0ZXN0aW5nIHdpdGggcmVjb3JkaW5nIGVuYWJsZWQsIHlvdVxuICogY2FuIHJlZHVjZSByZWNvcmRpbmcgcHJpb3JpdHkgdG8gXCJub3JtYWxcIiBvciBcImxvd1wiLlxuICogQHByb3BlcnR5IHtzdHJpbmc/fSBmaWxlbmFtZSBZb3UgY2FuIHR5cGUgcmVjb3JkaW5nIHZpZGVvIGZpbGUgbmFtZSBhcyB5b3Ugd2FudCxcbiAqIGJ1dCByZWNvcmRpbmcgY3VycmVudGx5IHN1cHBvcnRzIG9ubHkgXCJtcDRcIiBmb3JtYXQgc28geW91ciBmaWxlbmFtZSBtdXN0IGVuZCB3aXRoIFwiLm1wNFwiLlxuICogQW4gaW52YWxpZCBmaWxlIG5hbWUgd2lsbCBmYWlsIHRvIHN0YXJ0IHRoZSByZWNvcmRpbmcuXG4gKiBJZiBub3QgcHJvdmlkZWQgdGhlbiB0aGUgY3VycmVudCB0aW1lc3RhbXAgd2lsbCBiZSB1c2VkIGFzIGZpbGUgbmFtZS5cbiAqL1xuXG4vKipcbiAqIFJlY29yZCB0aGUgZGlzcGxheSBvZiBhIHJlYWwgZGV2aWNlcyBydW5uaW5nIEFuZHJvaWQgMTAgKEFQSSBsZXZlbCAyOSkgYW5kIGhpZ2hlci5cbiAqIFRoZSBzY3JlZW4gYWN0aXZpdHkgaXMgcmVjb3JkZWQgdG8gYSBNUEVHLTQgZmlsZS4gQXVkaW8gaXMgYWxzbyByZWNvcmRlZCBieSBkZWZhdWx0XG4gKiAob25seSBmb3IgYXBwcyB0aGF0IGFsbG93IGl0IGluIHRoZWlyIG1hbmlmZXN0cykuXG4gKiBJZiBhbm90aGVyIHJlY29yZGluZyBoYXMgYmVlbiBhbHJlYWR5IHN0YXJ0ZWQgdGhlbiB0aGUgY29tbWFuZCB3aWxsIGV4aXQgc2lsZW50bHkuXG4gKiBUaGUgcHJldmlvdXNseSByZWNvcmRlZCB2aWRlbyBmaWxlIGlzIGRlbGV0ZWQgd2hlbiBhIG5ldyByZWNvcmRpbmcgc2Vzc2lvbiBpcyBzdGFydGVkLlxuICogUmVjb3JkaW5nIGNvbnRpbnVlcyBpdCBpcyBzdG9wcGVkIGV4cGxpY2l0bHkgb3IgdW50aWwgdGhlIHRpbWVvdXQgaGFwcGVucy5cbiAqXG4gKiBAcGFyYW0gez9TdGFydFJlY29yZGluZ09wdGlvbnN9IG9wdGlvbnMgQXZhaWxhYmxlIG9wdGlvbnMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBhIG5ldyByZWNvcmRpbmcgaGFzIHN1Y2Nlc3NmdWxseSBzdGFydGVkLlxuICogQHRocm93cyB7RXJyb3J9IElmIHJlY29yZGluZyBoYXMgZmFpbGVkIHRvIHN0YXJ0IG9yIGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhlIGRldmljZSB1bmRlciB0ZXN0LlxuICovXG5jb21tYW5kcy5tb2JpbGVTdGFydE1lZGlhUHJvamVjdGlvblJlY29yZGluZyA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZVN0YXJ0TWVkaWFQcm9qZWN0aW9uUmVjb3JkaW5nIChvcHRpb25zID0ge30pIHtcbiAgYXdhaXQgdmVyaWZ5TWVkaWFQcm9qZWN0aW9uUmVjb3JkaW5nSXNTdXBwb3J0ZWQodGhpcy5hZGIpO1xuXG4gIGNvbnN0IHtyZXNvbHV0aW9uLCBwcmlvcml0eSwgbWF4RHVyYXRpb25TZWMsIGZpbGVuYW1lfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHJlY29yZGVyID0gbmV3IE1lZGlhUHJvamVjdGlvblJlY29yZGVyKHRoaXMuYWRiKTtcbiAgY29uc3QgZm5hbWUgPSBhZGp1c3RNZWRpYUV4dGVuc2lvbihmaWxlbmFtZSB8fCBtb21lbnQoKS5mb3JtYXQoREVGQVVMVF9GSUxFTkFNRV9GT1JNQVQpKTtcbiAgY29uc3QgZGlkU3RhcnQgPSBhd2FpdCByZWNvcmRlci5zdGFydCh7XG4gICAgcmVzb2x1dGlvbixcbiAgICBwcmlvcml0eSxcbiAgICBtYXhEdXJhdGlvblNlYyxcbiAgICBmaWxlbmFtZTogZm5hbWUsXG4gIH0pO1xuICBpZiAoZGlkU3RhcnQpIHtcbiAgICB0aGlzLmxvZy5pbmZvKGBBIG5ldyBtZWRpYSBwcm9qZWN0aW9uIHJlY29yZGluZyAnJHtmbmFtZX0nIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBzdGFydGVkYCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5sb2cuaW5mbygnQW5vdGhlciBtZWRpYSBwcm9qZWN0aW9uIHJlY29yZGluZyBpcyBhbHJlYWR5IGluIHByb2dyZXNzLiBUaGVyZSBpcyBub3RoaW5nIHRvIHN0YXJ0Jyk7XG4gIH1cbiAgcmV0dXJuIGRpZFN0YXJ0O1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtZWRpYSBwcm9qZWN0aW9uLWJhc2VkIHJlY29yZGluZyBpcyBjdXJyZW50bHkgcnVubmluZy5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBhIHJlY29yZGluZyBpcyBpbiBwcm9ncmVzcy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBhIHJlY29yZGluZyBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoZSBkZXZpY2UgdW5kZXIgdGVzdC5cbiAqL1xuY29tbWFuZHMubW9iaWxlSXNNZWRpYVByb2plY3Rpb25SZWNvcmRpbmdSdW5uaW5nID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlSXNNZWRpYVByb2plY3Rpb25SZWNvcmRpbmdSdW5uaW5nICgpIHtcbiAgYXdhaXQgdmVyaWZ5TWVkaWFQcm9qZWN0aW9uUmVjb3JkaW5nSXNTdXBwb3J0ZWQodGhpcy5hZGIpO1xuXG4gIGNvbnN0IHJlY29yZGVyID0gbmV3IE1lZGlhUHJvamVjdGlvblJlY29yZGVyKHRoaXMuYWRiKTtcbiAgcmV0dXJuIGF3YWl0IHJlY29yZGVyLmlzUnVubmluZygpO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTdG9wUmVjb3JkaW5nT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nP30gcmVtb3RlUGF0aCBUaGUgcGF0aCB0byB0aGUgcmVtb3RlIGxvY2F0aW9uLCB3aGVyZSB0aGUgcmVzdWx0aW5nIHZpZGVvIHNob3VsZCBiZSB1cGxvYWRlZC5cbiAqIFRoZSBmb2xsb3dpbmcgcHJvdG9jb2xzIGFyZSBzdXBwb3J0ZWQ6IGh0dHAvaHR0cHMsIGZ0cC5cbiAqIE51bGwgb3IgZW1wdHkgc3RyaW5nIHZhbHVlICh0aGUgZGVmYXVsdCBzZXR0aW5nKSBtZWFucyB0aGUgY29udGVudCBvZiByZXN1bHRpbmdcbiAqIGZpbGUgc2hvdWxkIGJlIGVuY29kZWQgYXMgQmFzZTY0IGFuZCBwYXNzZWQgYXMgdGhlIGVuZHBvb250IHJlc3BvbnNlIHZhbHVlLlxuICogQW4gZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duIGlmIHRoZSBnZW5lcmF0ZWQgbWVkaWEgZmlsZSBpcyB0b28gYmlnIHRvXG4gKiBmaXQgaW50byB0aGUgYXZhaWxhYmxlIHByb2Nlc3MgbWVtb3J5LlxuICogQHByb3BlcnR5IHtzdHJpbmc/fSB1c2VyIFRoZSBuYW1lIG9mIHRoZSB1c2VyIGZvciB0aGUgcmVtb3RlIGF1dGhlbnRpY2F0aW9uLlxuICogQHByb3BlcnR5IHtzdHJpbmc/fSBwYXNzIFRoZSBwYXNzd29yZCBmb3IgdGhlIHJlbW90ZSBhdXRoZW50aWNhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nP30gbWV0aG9kIFRoZSBodHRwIG11bHRpcGFydCB1cGxvYWQgbWV0aG9kIG5hbWUuIFRoZSAnUFVUJyBvbmUgaXMgdXNlZCBieSBkZWZhdWx0LlxuICogQHByb3BlcnR5IHtPYmplY3Q/fSBoZWFkZXJzIEFkZGl0aW9uYWwgaGVhZGVycyBtYXBwaW5nIGZvciBtdWx0aXBhcnQgaHR0cChzKSB1cGxvYWRzXG4gKiBAcHJvcGVydHkge3N0cmluZz99IGZpbGVGaWVsZE5hbWUgW2ZpbGVdIFRoZSBuYW1lIG9mIHRoZSBmb3JtIGZpZWxkLCB3aGVyZSB0aGUgZmlsZSBjb250ZW50IEJMT0Igc2hvdWxkIGJlIHN0b3JlZCBmb3JcbiAqIGh0dHAocykgdXBsb2Fkc1xuICogQHByb3BlcnR5IHtPYmplY3R8QXJyYXk8UGFpcj4/fSBmb3JtRmllbGRzIEFkZGl0aW9uYWwgZm9ybSBmaWVsZHMgZm9yIG11bHRpcGFydCBodHRwKHMpIHVwbG9hZHNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyP30gdXBsb2FkVGltZW91dCAtIFRoZSBhY3R1YWwgbWVkaWEgdXBsb2FkIHJlcXVlc3QgdGltZW91dCBpbiBtaWxsaXNlY29uZHM7XG4gKiBkZWZhdWx0cyB0byBAYXBwaXVtL3N1cHBvcnQgbmV0IERFRkFVTFRfVElNRU9VVF9NU1xuICovXG5cbi8qKlxuICogU3RvcCBhIG1lZGlhIHByb2plY3Rpb24tYmFzZWQgcmVjb3JkaW5nLlxuICogSWYgbm8gcmVjb3JkaW5nIGhhcyBiZWVuIHN0YXJ0ZWQgYmVmb3JlIHRoZW4gYW4gZXJyb3IgaXMgdGhyb3duLlxuICogSWYgdGhlIHJlY29yZGluZyBoYXMgYmVlbiBhbHJlYWR5IGZpbmlzaGVkIGJlZm9yZSB0aGlzIEFQSSBoYXMgYmVlbiBjYWxsZWRcbiAqIHRoZW4gdGhlIG1vc3QgcmVjZW50IHJlY29yZGVkIGZpbGUgaXMgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIHs/U3RvcFJlY29yZGluZ09wdGlvbnN9IG9wdGlvbnMgQXZhaWxhYmxlIG9wdGlvbnMuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBCYXNlNjQtZW5jb2RlZCBjb250ZW50IG9mIHRoZSByZWNvcmRlZCBtZWRpYSBmaWxlIGlmICdyZW1vdGVQYXRoJ1xuICogcGFyYW1ldGVyIGlzIGZhbHN5IG9yIGFuIGVtcHR5IHN0cmluZy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgc3RvcHBpbmcgYSByZWNvcmRpbmcsXG4gKiBmZXRjaGluZyB0aGUgY29udGVudCBvZiB0aGUgcmVtb3RlIG1lZGlhIGZpbGUsXG4gKiBvciBpZiBhIHJlY29yZGluZyBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoZSBkZXZpY2UgdW5kZXIgdGVzdC5cbiAqL1xuY29tbWFuZHMubW9iaWxlU3RvcE1lZGlhUHJvamVjdGlvblJlY29yZGluZyA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZVN0b3BNZWRpYVByb2plY3Rpb25SZWNvcmRpbmcgKG9wdGlvbnMgPSB7fSkge1xuICBhd2FpdCB2ZXJpZnlNZWRpYVByb2plY3Rpb25SZWNvcmRpbmdJc1N1cHBvcnRlZCh0aGlzLmFkYik7XG5cbiAgY29uc3QgcmVjb3JkZXIgPSBuZXcgTWVkaWFQcm9qZWN0aW9uUmVjb3JkZXIodGhpcy5hZGIpO1xuICBpZiAoYXdhaXQgcmVjb3JkZXIuc3RvcCgpKSB7XG4gICAgdGhpcy5sb2cuaW5mbygnU3VjY2Vzc2Z1bGx5IHN0b3BwZWQgYSBtZWRpYSBwcm9qZWN0aW9uIHJlY29yZGluZy4gUHVsbGluZyB0aGUgcmVjb3JkZWQgbWVkaWEnKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmxvZy5pbmZvKCdNZWRpYSBwcm9qZWN0aW9uIHJlY29yZGluZyBpcyBub3QgcnVubmluZy4gVGhlcmUgaXMgbm90aGluZyB0byBzdG9wJyk7XG4gIH1cbiAgY29uc3QgcmVjZW50UmVjb3JkaW5nUGF0aCA9IGF3YWl0IHJlY29yZGVyLnB1bGxSZWNlbnQoKTtcbiAgaWYgKCFyZWNlbnRSZWNvcmRpbmdQYXRoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBObyByZWNlbnQgbWVkaWEgcHJvamVjdGlvbiByZWNvcmRpbmcgaGF2ZSBiZWVuIGZvdW5kLiBEaWQgeW91IHN0YXJ0IGFueT9gKTtcbiAgfVxuXG4gIGNvbnN0IHtyZW1vdGVQYXRofSA9IG9wdGlvbnM7XG4gIGlmIChfLmlzRW1wdHkocmVtb3RlUGF0aCkpIHtcbiAgICBjb25zdCB7c2l6ZX0gPSBhd2FpdCBmcy5zdGF0KHJlY2VudFJlY29yZGluZ1BhdGgpO1xuICAgIHRoaXMubG9nLmRlYnVnKGBUaGUgc2l6ZSBvZiB0aGUgcmVzdWx0aW5nIG1lZGlhIHByb2plY3Rpb24gcmVjb3JkaW5nIGlzICR7dXRpbC50b1JlYWRhYmxlU2l6ZVN0cmluZyhzaXplKX1gKTtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCB1cGxvYWRSZWNvcmRlZE1lZGlhKHJlY2VudFJlY29yZGluZ1BhdGgsIHJlbW90ZVBhdGgsIG9wdGlvbnMpO1xuICB9IGZpbmFsbHkge1xuICAgIGF3YWl0IGZzLnJpbXJhZihwYXRoLmRpcm5hbWUocmVjZW50UmVjb3JkaW5nUGF0aCkpO1xuICB9XG59O1xuXG5cbmV4cG9ydCB7IGNvbW1hbmRzIH07XG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxTQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxRQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxLQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxTQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxlQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxPQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFHQSxNQUFNTyxRQUFR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