"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _driver = require("appium/driver");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _utils = require("../utils");
const commands = {};
exports.commands = commands;
const ALL_PERMISSIONS_MAGIC = 'all';
const PM_ACTION = Object.freeze({
  GRANT: 'grant',
  REVOKE: 'revoke'
});
const APPOPS_ACTION = Object.freeze({
  ALLOW: 'allow',
  DENY: 'deny',
  IGNORE: 'ignore',
  DEFAULT: 'default'
});
const PERMISSION_TARGET = Object.freeze({
  PM: 'pm',
  APPOPS: 'appops'
});
const PERMISSIONS_TYPE = Object.freeze({
  DENIED: 'denied',
  GRANTED: 'granted',
  REQUESTED: 'requested'
});
async function changePermissionsViaPm(permissions, appPackage, action) {
  if (!_lodash.default.values(PM_ACTION).includes(action)) {
    throw new _driver.errors.InvalidArgumentError(`Unknown action '${action}'. ` + `Only ${JSON.stringify(_lodash.default.values(PM_ACTION))} actions are supported`);
  }
  let affectedPermissions = _lodash.default.isArray(permissions) ? permissions : [permissions];
  if (_lodash.default.toLower(permissions) === ALL_PERMISSIONS_MAGIC) {
    const dumpsys = await this.adb.shell(['dumpsys', 'package', appPackage]);
    const grantedPermissions = await this.adb.getGrantedPermissions(appPackage, dumpsys);
    if (action === PM_ACTION.GRANT) {
      const reqPermissons = await this.adb.getReqPermissions(appPackage, dumpsys);
      affectedPermissions = _lodash.default.difference(reqPermissons, grantedPermissions);
    } else {
      affectedPermissions = grantedPermissions;
    }
    if (_lodash.default.isEmpty(affectedPermissions)) {
      this.log.info(`'${appPackage}' contains no permissions to ${action}`);
      return;
    }
  }
  if (action === PM_ACTION.GRANT) {
    await this.adb.grantPermissions(appPackage, affectedPermissions);
  } else {
    await _bluebird.default.all(affectedPermissions.map(name => this.adb.revokePermission(appPackage, name)));
  }
}
async function changePermissionsViaAppops(permissions, appPackage, action) {
  if (!_lodash.default.values(APPOPS_ACTION).includes(action)) {
    throw new _driver.errors.InvalidArgumentError(`Unknown action '${action}'. ` + `Only ${JSON.stringify(_lodash.default.values(APPOPS_ACTION))} actions are supported`);
  }
  if (_lodash.default.toLower(permissions) === ALL_PERMISSIONS_MAGIC) {
    throw new _driver.errors.InvalidArgumentError(`'${ALL_PERMISSIONS_MAGIC}' permission is only supported for ` + `'${PERMISSION_TARGET.PM}' target. ` + `Check AppOpsManager.java from Android platform sources to get the full list of supported AppOps permissions`);
  }
  const promises = (_lodash.default.isArray(permissions) ? permissions : [permissions]).map(permission => this.adb.shell(['appops', 'set', appPackage, permission, action]));
  await _bluebird.default.all(promises);
}
commands.mobileChangePermissions = async function mobileChangePermissions(opts = {}) {
  const {
    permissions,
    appPackage = this.opts.appPackage,
    action = _lodash.default.toLower(opts.target) === PERMISSION_TARGET.APPOPS ? APPOPS_ACTION.ALLOW : PM_ACTION.GRANT,
    target = PERMISSION_TARGET.PM
  } = opts;
  if (_lodash.default.isNil(permissions)) {
    throw new _driver.errors.InvalidArgumentError(`'permissions' argument is required`);
  }
  if (_lodash.default.isEmpty(permissions)) {
    throw new _driver.errors.InvalidArgumentError(`'permissions' argument must not be empty`);
  }
  switch (_lodash.default.toLower(target)) {
    case PERMISSION_TARGET.PM:
      return await changePermissionsViaPm.bind(this)(permissions, appPackage, _lodash.default.toLower(action));
    case PERMISSION_TARGET.APPOPS:
      this.ensureFeatureEnabled(_utils.ADB_SHELL_FEATURE);
      return await changePermissionsViaAppops.bind(this)(permissions, appPackage, _lodash.default.toLower(action));
    default:
      throw new _driver.errors.InvalidArgumentError(`'target' argument must be one of: ${_lodash.default.values(PERMISSION_TARGET)}`);
  }
};
commands.mobileGetPermissions = async function mobileGetPermissions(opts = {}) {
  const {
    type = PERMISSIONS_TYPE.REQUESTED,
    appPackage = this.opts.appPackage
  } = opts;
  let actionFunc;
  switch (_lodash.default.toLower(type)) {
    case PERMISSIONS_TYPE.REQUESTED:
      actionFunc = pkg => this.adb.getReqPermissions(pkg);
      break;
    case PERMISSIONS_TYPE.GRANTED:
      actionFunc = pkg => this.adb.getGrantedPermissions(pkg);
      break;
    case PERMISSIONS_TYPE.DENIED:
      actionFunc = pkg => this.adb.getDeniedPermissions(pkg);
      break;
    default:
      throw new _driver.errors.InvalidArgumentError(`Unknown permissions type '${type}'. ` + `Only ${JSON.stringify(_lodash.default.values(PERMISSIONS_TYPE))} types are supported`);
  }
  return await actionFunc(appPackage);
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,