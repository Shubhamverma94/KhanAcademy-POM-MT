{"version":3,"file":"webview-helpers.js","names":["_lodash","_interopRequireDefault","require","_logger","_axios","_support","_portscanner","_lruCache","_bluebird","_path","_os","NATIVE_WIN","exports","WEBVIEW_WIN","CHROMIUM_WIN","WEBVIEW_BASE","WEBVIEW_PID_PATTERN","RegExp","WEBVIEW_PKG_PATTERN","DEVTOOLS_SOCKET_PATTERN","CROSSWALK_SOCKET_PATTERN","CHROMIUM_DEVTOOLS_SOCKET","CHROME_PACKAGE_NAME","KNOWN_CHROME_PACKAGE_NAMES","DEVTOOLS_PORTS_RANGE","WEBVIEWS_DETAILS_CACHE","LRU","max","updateAgeOnGet","CDP_REQ_TIMEOUT","DEVTOOLS_PORT_ALLOCATION_GUARD","util","getLockFileGuard","path","resolve","os","tmpdir","timeout","tryRecovery","helpers","toDetailsCacheKey","adb","webview","curDeviceId","getPotentialWebviewProcs","out","shell","names","allMatches","line","split","flags","st","sockPath","trim","startsWith","push","test","_","isEmpty","logger","debug","JSON","stringify","length","pluralize","uniq","webviewsFromProcs","deviceSocket","socketNames","webviews","socketName","proc","socketNameMatch","exec","crosswalkMatch","allocateDevtoolsPort","webviewDevtoolsPort","remotePort","replace","startPort","endPort","localPort","findAPortNotInUse","e","Error","adbExec","collectWebviewsDetails","webviewsMapping","opts","ensureWebviewsHavePages","enableWebviewDetailsCollection","info","detailCollectors","item","cdpInfo","pages","cdpList","removePortForward","B","all","axios","url","data","procFromWebview","pidMatch","pid","pkg","getNameByPid","parseWebviewNames","isChromeSession","result","webviewName","getWebViewsMapping","androidDeviceSocket","webviewMapping","wvName","process","undefined","pkgMatch","name","id","warn","message","key","set","has","delete","getWebviewDetails","get","createChromedriverCaps","deviceId","webViewDetails","_opts$chromeOptions","_webViewDetails$info","_webViewDetails$proce","_webViewDetails$proce2","_opts$chromeOptions2","caps","chromeOptions","androidPackage","appPackage","isBoolean","chromeUseRunningApp","androidUseRunningApp","chromeAndroidPackage","chromeAndroidActivity","androidActivity","chromeAndroidProcess","androidProcess","toLower","browserName","appActivity","pageLoadStrategy","isChrome","includes","androidDeviceSerial","isPlainObject","loggingPrefs","chromeLoggingPrefs","enablePerformanceLogging","newPref","performance","Object","assign","Arguments","args","protectedCapNames","opt","val","toPairs","isUndefined","optName","_default","default"],"sources":["../../lib/webview-helpers.js"],"sourcesContent":["import _ from 'lodash';\nimport logger from './logger';\nimport axios from 'axios';\nimport { util } from '@appium/support';\nimport { findAPortNotInUse } from 'portscanner';\nimport LRU from 'lru-cache';\nimport B from 'bluebird';\nimport path from 'path';\nimport os from 'os';\n\nconst NATIVE_WIN = 'NATIVE_APP';\nconst WEBVIEW_WIN = 'WEBVIEW';\nconst CHROMIUM_WIN = 'CHROMIUM';\nconst WEBVIEW_BASE = `${WEBVIEW_WIN}_`;\nconst WEBVIEW_PID_PATTERN = new RegExp(`^${WEBVIEW_BASE}(\\\\d+)`);\nconst WEBVIEW_PKG_PATTERN = new RegExp(`^${WEBVIEW_BASE}([^\\\\d\\\\s][\\\\w.]*)`);\nconst DEVTOOLS_SOCKET_PATTERN = /@[\\w.]+_devtools_remote_?(\\d+)?\\b/;\nconst CROSSWALK_SOCKET_PATTERN = /@([\\w.]+)_devtools_remote\\b/;\nconst CHROMIUM_DEVTOOLS_SOCKET = 'chrome_devtools_remote';\nconst CHROME_PACKAGE_NAME = 'com.android.chrome';\nconst KNOWN_CHROME_PACKAGE_NAMES = [\n  CHROME_PACKAGE_NAME,\n  'com.chrome.beta',\n  'com.chrome.dev',\n  'com.chrome.canary',\n];\nconst DEVTOOLS_PORTS_RANGE = [10900, 11000];\nconst WEBVIEWS_DETAILS_CACHE = new LRU({\n  max: 100,\n  updateAgeOnGet: true,\n});\nconst CDP_REQ_TIMEOUT = 2000; // ms\nconst DEVTOOLS_PORT_ALLOCATION_GUARD = util.getLockFileGuard(\n  path.resolve(os.tmpdir(), 'android_devtools_port_guard'),\n  {timeout: 7, tryRecovery: true}\n);\n\nconst helpers = {};\n\nfunction toDetailsCacheKey (adb, webview) {\n  return `${adb?.curDeviceId}:${webview}`;\n}\n\n/**\n * This function gets a list of android system processes and returns ones\n * that look like webviews\n * See https://cs.chromium.org/chromium/src/chrome/browser/devtools/device/android_device_info_query.cc\n * for more details\n *\n * @param {object} adb - an ADB instance\n *\n * @return {Array.<string>} - a list of matching webview socket names (including the leading '@')\n */\nasync function getPotentialWebviewProcs (adb) {\n  const out = await adb.shell(['cat', '/proc/net/unix']);\n  const names = [];\n  const allMatches = [];\n  for (const line of out.split('\\n')) {\n    // Num RefCount Protocol Flags Type St Inode Path\n    const [,,, flags,, st,, sockPath] = line.trim().split(/\\s+/);\n    if (!sockPath) {\n      continue;\n    }\n    if (sockPath.startsWith('@')) {\n      allMatches.push(line.trim());\n    }\n    if (flags !== '00010000' || st !== '01') {\n      continue;\n    }\n    if (!DEVTOOLS_SOCKET_PATTERN.test(sockPath)) {\n      continue;\n    }\n\n    names.push(sockPath);\n  }\n  if (_.isEmpty(names)) {\n    logger.debug('Found no active devtools sockets');\n    if (!_.isEmpty(allMatches)) {\n      logger.debug(`Other sockets are: ${JSON.stringify(allMatches, null, 2)}`);\n    }\n  } else {\n    logger.debug(`Parsed ${names.length} active devtools ${util.pluralize('socket', names.length, false)}: ` +\n      JSON.stringify(names));\n  }\n  // sometimes the webview process shows up multiple times per app\n  return _.uniq(names);\n}\n\n/**\n * @typedef {Object} WebviewProc\n * @property {string} proc - The webview process name (as returned by\n * getPotentialWebviewProcs\n * @property {string} webview - The actual webview context name\n */\n/**\n * This function retrieves a list of system processes that look like webviews,\n * and returns them along with the webview context name appropriate for it.\n * If we pass in a deviceSocket, we only attempt to find webviews which match\n * that socket name (this is for apps which embed Chromium, which isn't the\n * same as chrome-backed webviews).\n *\n * @param {object} adb - an ADB instance\n * @param {?string} deviceSocket - the explictly-named device socket to use\n *\n * @return {Array.<WebviewProc>}\n */\nasync function webviewsFromProcs (adb, deviceSocket = null) {\n  const socketNames = await getPotentialWebviewProcs(adb);\n  const webviews = [];\n  for (const socketName of socketNames) {\n    if (deviceSocket === CHROMIUM_DEVTOOLS_SOCKET && socketName === `@${deviceSocket}`) {\n      webviews.push({\n        proc: socketName,\n        webview: CHROMIUM_WIN,\n      });\n      continue;\n    }\n\n    const socketNameMatch = DEVTOOLS_SOCKET_PATTERN.exec(socketName);\n    if (!socketNameMatch) {\n      continue;\n    }\n    const crosswalkMatch = CROSSWALK_SOCKET_PATTERN.exec(socketName);\n    if (!socketNameMatch[1] && !crosswalkMatch) {\n      continue;\n    }\n\n    if (deviceSocket && socketName === `@${deviceSocket}` || !deviceSocket) {\n      webviews.push({\n        proc: socketName,\n        webview: socketNameMatch[1]\n          ? `${WEBVIEW_BASE}${socketNameMatch[1]}`\n          : `${WEBVIEW_BASE}${crosswalkMatch[1]}`,\n      });\n    }\n  }\n  return webviews;\n}\n\n/**\n * Allocates a local port for devtools communication\n *\n * @param {ADB} adb ADB instance\n * @param {string} socketName The remote Unix socket name\n * @param {?number} webviewDevtoolsPort The local port number or null to apply\n * autodetection\n * @returns {number} The local port number if the remote socket has been forwarded\n * successfully or `null` otherwise\n * @throws {Error} If there was an error while allocating the local port\n */\nasync function allocateDevtoolsPort (adb, socketName, webviewDevtoolsPort = null) {\n  // socket names come with '@', but this should not be a part of the abstract\n  // remote port, so remove it\n  const remotePort = socketName.replace(/^@/, '');\n  let [startPort, endPort] = DEVTOOLS_PORTS_RANGE;\n  if (webviewDevtoolsPort) {\n    endPort = webviewDevtoolsPort + (endPort - startPort);\n    startPort = webviewDevtoolsPort;\n  }\n  logger.debug(`Forwarding remote port ${remotePort} to a local ` +\n    `port in range ${startPort}..${endPort}`);\n  if (!webviewDevtoolsPort) {\n    logger.debug(`You could use the 'webviewDevtoolsPort' capability to customize ` +\n      `the starting port number`);\n  }\n  return await DEVTOOLS_PORT_ALLOCATION_GUARD(async () => {\n    let localPort;\n    try {\n      localPort = await findAPortNotInUse(startPort, endPort);\n    } catch (e) {\n      throw new Error(`Cannot find any free port to forward the Devtools socket ` +\n        `in range ${startPort}..${endPort}. You could set the starting port number ` +\n        `manually by providing the 'webviewDevtoolsPort' capability`);\n    }\n    await adb.adbExec(['forward', `tcp:${localPort}`, `localabstract:${remotePort}`]);\n    return localPort;\n  });\n}\n\n/**\n * @typedef {Object} WebviewProps\n * @property {string} proc The name of the Devtools Unix socket\n * @property {string} webview The web view alias. Looks like `WEBVIEW_`\n * prefix plus PID or package name\n * @property {?Object} info Webview information as it is retrieved by\n * /json/version CDP endpoint\n * @property {?Array<Object>} pages Webview pages list as it is retrieved by\n * /json/list CDP endpoint\n */\n\n/**\n * @typedef {Object} DetailCollectionOptions\n * @property {?string|number} webviewDevtoolsPort The starting port to use for webview page\n * presence check (if not the default of 9222).\n * @property {?boolean} ensureWebviewsHavePages Whether to check for webview\n * pages presence\n * @property {boolean} enableWebviewDetailsCollection Whether to collect\n * web view details and send them to Chromedriver constructor, so it could\n * select a binary more precisely based on this info.\n */\n\n/**\n * This is a wrapper for Chrome Debugger Protocol data collection.\n * No error is thrown if CDP request fails - in such case no data will be\n * recorded into the corresponding `webviewsMapping` item.\n *\n * @param {ADB} adb The ADB instance\n * @param {Array<WebviewProps>} webviewsMapping The current webviews mapping\n * !!! Each item of this array gets mutated (`info`/`pages` properties get added\n * based on the provided `opts`) if the requested details have been\n * successfully retrieved for it !!!\n * @param {DetailCollectionOptions} opts If both `ensureWebviewsHavePages` and\n * `enableWebviewDetailsCollection` properties are falsy then no details collection\n * is performed\n */\nasync function collectWebviewsDetails (adb, webviewsMapping, opts = {}) {\n  if (_.isEmpty(webviewsMapping)) {\n    return;\n  }\n\n  const {\n    webviewDevtoolsPort = null,\n    ensureWebviewsHavePages = null,\n    enableWebviewDetailsCollection = null,\n  } = opts;\n\n  if (!ensureWebviewsHavePages) {\n    logger.info(`Not checking whether webviews have active pages; use the ` +\n      `'ensureWebviewsHavePages' cap to turn this check on`);\n  }\n\n  if (!enableWebviewDetailsCollection) {\n    logger.info(`Not collecting web view details. Details collection might help ` +\n      `to make Chromedriver initialization more precise. Use the 'enableWebviewDetailsCollection' ` +\n      `cap to turn it on`);\n  }\n\n  if (!ensureWebviewsHavePages && !enableWebviewDetailsCollection) {\n    return;\n  }\n\n  // Connect to each devtools socket and retrieve web view details\n  logger.debug(`Collecting CDP data of ${util.pluralize('webview', webviewsMapping.length, true)}`);\n  const detailCollectors = [];\n  for (const item of webviewsMapping) {\n    detailCollectors.push((async () => {\n      let localPort;\n      try {\n        localPort = await allocateDevtoolsPort(adb, item.proc, webviewDevtoolsPort);\n        if (enableWebviewDetailsCollection) {\n          item.info = await cdpInfo(localPort);\n        }\n        if (ensureWebviewsHavePages) {\n          item.pages = await cdpList(localPort);\n        }\n      } catch (e) {\n        logger.debug(e);\n      } finally {\n        if (localPort) {\n          try {\n            await adb.removePortForward(localPort);\n          } catch (e) {\n            logger.debug(e);\n          }\n        }\n      }\n    })());\n  }\n  await B.all(detailCollectors);\n  logger.debug(`CDP data collection completed`);\n}\n\n// https://chromedevtools.github.io/devtools-protocol/\nasync function cdpList (localPort) {\n  return (await axios({\n    url: `http://127.0.0.1:${localPort}/json/list`,\n    timeout: CDP_REQ_TIMEOUT,\n  })).data;\n}\n\n// https://chromedevtools.github.io/devtools-protocol/\nasync function cdpInfo (localPort) {\n  return (await axios({\n    url: `http://127.0.0.1:${localPort}/json/version`,\n    timeout: CDP_REQ_TIMEOUT,\n  })).data;\n}\n\n/**\n * Take a webview name like WEBVIEW_4296 and use 'adb shell ps' to figure out\n * which app package is associated with that webview. One of the reasons we\n * want to do this is to make sure we're listing webviews for the actual AUT,\n * not some other running app\n *\n * @param {object} adb - an ADB instance\n * @param {string} webview - a webview process name\n *\n * @returns {string} - the package name of the app running the webview\n * @throws {Error} If there was a failure while retrieving the process name\n */\nhelpers.procFromWebview = async function procFromWebview (adb, webview) {\n  const pidMatch = WEBVIEW_PID_PATTERN.exec(webview);\n  if (!pidMatch) {\n    throw new Error(`Could not find PID for webview '${webview}'`);\n  }\n\n  const pid = pidMatch[1];\n  logger.debug(`${webview} mapped to pid ${pid}`);\n  logger.debug(`Getting process name for webview '${webview}'`);\n  const pkg = await adb.getNameByPid(pid);\n  logger.debug(`Got process name: '${pkg}'`);\n  return pkg;\n};\n\n/**\n * Parse webview names for getContexts\n *\n * @param {Array<WebviewsMapping>} webviewsMapping See note on getWebViewsMapping\n * @param {GetWebviewsOpts} opts See note on getWebViewsMapping\n * @return {Array.<string>} - a list of webview names\n */\nhelpers.parseWebviewNames = function parseWebviewNames (webviewsMapping, {\n  ensureWebviewsHavePages = true,\n  isChromeSession = false\n} = {}) {\n  if (isChromeSession) {\n    return [CHROMIUM_WIN];\n  }\n\n  const result = [];\n  for (const {webview, pages, proc, webviewName} of webviewsMapping) {\n    if (ensureWebviewsHavePages && pages?.length === 0) {\n      logger.info(`Skipping the webview '${webview}' at '${proc}' ` +\n        `since it has reported having zero pages`);\n      continue;\n    }\n    if (webviewName) {\n      result.push(webviewName);\n    }\n  }\n  logger.debug(`Found ${util.pluralize('webview', result.length, true)}: ${JSON.stringify(result)}`);\n  return result;\n};\n\n/**\n * @typedef {Object} GetWebviewsOpts\n * @property {string} androidDeviceSocket [null] - device socket name\n * @property {boolean} ensureWebviewsHavePages [true] - whether to check for webview\n * page presence\n * @property {number} webviewDevtoolsPort [9222] - port to use for webview page\n * presence check.\n * @property {boolean} enableWebviewDetailsCollection [true] - whether to collect\n * web view details and send them to Chromedriver constructor, so it could\n * select a binary more precisely based on this info.\n */\n\n/**\n * @typedef {Object} WebviewsMapping\n * @property {string} proc See note on WebviewProps\n * @property {string} webview See note on WebviewProps\n * @property {?Object} info See note on WebviewProps\n * @property {?Array<Object>} pages See note on WebviewProps\n * @propery {?string} webviewName An actual webview name for switching context\n */\n\n/**\n * Get a list of available webviews mapping by introspecting processes with adb,\n * where webviews are listed. It's possible to pass in a 'deviceSocket' arg, which\n * limits the webview possibilities to the one running on the Chromium devtools\n * socket we're interested in (see note on webviewsFromProcs). We can also\n * direct this method to verify whether a particular webview process actually\n * has any pages (if a process exists but no pages are found, Chromedriver will\n * not actually be able to connect to it, so this serves as a guard for that\n * strange failure mode). The strategy for checking whether any pages are\n * active involves sending a request to the remote debug server on the device,\n * hence it is also possible to specify the port on the host machine which\n * should be used for this communication.\n *\n * @param {object} adb - an ADB instance\n * @param {GetWebviewsOpts} opts\n *\n * @return {Array<WebviewsMapping>} webviewsMapping\n */\nhelpers.getWebViewsMapping = async function getWebViewsMapping (adb, {\n  androidDeviceSocket = null,\n  ensureWebviewsHavePages = true,\n  webviewDevtoolsPort = null,\n  enableWebviewDetailsCollection = true\n} = {}) {\n  logger.debug('Getting a list of available webviews');\n  const webviewsMapping = await webviewsFromProcs(adb, androidDeviceSocket);\n\n  await collectWebviewsDetails(adb, webviewsMapping, {\n    ensureWebviewsHavePages,\n    enableWebviewDetailsCollection,\n    webviewDevtoolsPort,\n  });\n\n  for (const webviewMapping of webviewsMapping) {\n    const {webview, info} = webviewMapping;\n    webviewMapping.webviewName = null;\n\n    let wvName = webview;\n    let process = undefined;\n    if (!androidDeviceSocket) {\n      const pkgMatch = WEBVIEW_PKG_PATTERN.exec(webview);\n      try {\n        // web view name could either be suffixed with PID or the package name\n        // package names could not start with a digit\n        const pkg = pkgMatch ? pkgMatch[1] : await helpers.procFromWebview(adb, webview);\n        wvName = `${WEBVIEW_BASE}${pkg}`;\n        const pidMatch = WEBVIEW_PID_PATTERN.exec(webview);\n        process = {\n          name: pkg,\n          id: pidMatch ? pidMatch[1] : null,\n        };\n      } catch (e) {\n        logger.warn(e.message);\n        continue;\n      }\n    }\n\n    webviewMapping.webviewName = wvName;\n    const key = toDetailsCacheKey(adb, wvName);\n    if (info || process) {\n      WEBVIEWS_DETAILS_CACHE.set(key, { info, process });\n    } else if (WEBVIEWS_DETAILS_CACHE.has(key)) {\n      WEBVIEWS_DETAILS_CACHE.delete(key);\n    }\n  }\n  return webviewsMapping;\n};\n\n/**\n * @typedef {Object} ProcessInfo\n * @property {string} name The process name\n * @property {?string} id The process id (if could be retrieved)\n */\n\n/**\n * @typedef {Object} WebViewDetails\n * @property {?ProcessInfo} process - Web view process details\n * @property {Object} info - Web view details as returned by /json/version CDP endpoint, for example:\n * {\n *  \"Browser\": \"Chrome/72.0.3601.0\",\n *  \"Protocol-Version\": \"1.3\",\n *  \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3601.0 Safari/537.36\",\n *  \"V8-Version\": \"7.2.233\",\n *  \"WebKit-Version\": \"537.36 (@cfede9db1d154de0468cb0538479f34c0755a0f4)\",\n *  \"webSocketDebuggerUrl\": \"ws://localhost:9222/devtools/browser/b0b8a4fb-bb17-4359-9533-a8d9f3908bd8\"\n * }\n */\n\n/**\n * Retrieves web view details previously cached by `getWebviews` call\n *\n * @param {ADB} adb ADB instance\n * @param {string} webview The name of the web view\n * @returns {?WebViewDetails} Either `undefined` or the recent web view details\n */\nhelpers.getWebviewDetails = function getWebviewDetails (adb, webview) {\n  const key = toDetailsCacheKey(adb, webview);\n  return WEBVIEWS_DETAILS_CACHE.get(key);\n};\n\n/**\n * Create Chrome driver capabilities based on the provided\n * Appium capabilities\n *\n * @param {Object} opts User-provided capabilities object\n * @param {string} deviceId The identifier of the Android device under test\n * @param {?WebViewDetails} webViewDetails\n * @returns {Object} The capabilities object.\n * See https://chromedriver.chromium.org/capabilities for more details.\n */\nhelpers.createChromedriverCaps = function createChromedriverCaps (opts, deviceId, webViewDetails) {\n  const caps = { chromeOptions: {} };\n\n  const androidPackage = opts.chromeOptions?.androidPackage\n    || opts.appPackage\n    || webViewDetails?.info?.['Android-Package'];\n  if (androidPackage) {\n    // chromedriver raises an invalid argument error when androidPackage is 'null'\n    caps.chromeOptions.androidPackage = androidPackage;\n  }\n  if (_.isBoolean(opts.chromeUseRunningApp)) {\n    caps.chromeOptions.androidUseRunningApp = opts.chromeUseRunningApp;\n  }\n  if (opts.chromeAndroidPackage) {\n    caps.chromeOptions.androidPackage = opts.chromeAndroidPackage;\n  }\n  if (opts.chromeAndroidActivity) {\n    caps.chromeOptions.androidActivity = opts.chromeAndroidActivity;\n  }\n  if (opts.chromeAndroidProcess) {\n    caps.chromeOptions.androidProcess = opts.chromeAndroidProcess;\n  } else if (webViewDetails?.process?.name && webViewDetails?.process?.id) {\n    caps.chromeOptions.androidProcess = webViewDetails.process.name;\n  }\n  if (_.toLower(opts.browserName) === 'chromium-webview') {\n    caps.chromeOptions.androidActivity = opts.appActivity;\n  }\n  if (opts.pageLoadStrategy) {\n    caps.pageLoadStrategy = opts.pageLoadStrategy;\n  }\n  const isChrome = _.toLower(caps.chromeOptions.androidPackage) === 'chrome';\n  if (_.includes(KNOWN_CHROME_PACKAGE_NAMES, caps.chromeOptions.androidPackage) || isChrome) {\n    // if we have extracted package from context name, it could come in as bare\n    // \"chrome\", and so we should make sure the details are correct, including\n    // not using an activity or process id\n    if (isChrome) {\n      caps.chromeOptions.androidPackage = CHROME_PACKAGE_NAME;\n    }\n    delete caps.chromeOptions.androidActivity;\n    delete caps.chromeOptions.androidProcess;\n  }\n  // add device id from adb\n  caps.chromeOptions.androidDeviceSerial = deviceId;\n\n  if (_.isPlainObject(opts.loggingPrefs) || _.isPlainObject(opts.chromeLoggingPrefs)) {\n    if (opts.loggingPrefs) {\n      logger.warn(`The 'loggingPrefs' cap is deprecated; use the 'chromeLoggingPrefs' cap instead`);\n    }\n    caps.loggingPrefs = opts.chromeLoggingPrefs || opts.loggingPrefs;\n  }\n  if (opts.enablePerformanceLogging) {\n    logger.warn(`The 'enablePerformanceLogging' cap is deprecated; simply use ` +\n      `the 'chromeLoggingPrefs' cap instead, with a 'performance' key set to 'ALL'`);\n    const newPref = {performance: 'ALL'};\n    // don't overwrite other logging prefs that have been sent in if they exist\n    caps.loggingPrefs = caps.loggingPrefs\n      ? Object.assign({}, caps.loggingPrefs, newPref)\n      : newPref;\n  }\n\n  if (opts.chromeOptions?.Arguments) {\n    // merge `Arguments` and `args`\n    opts.chromeOptions.args = [...(opts.chromeOptions.args || []), ...opts.chromeOptions.Arguments];\n    delete opts.chromeOptions.Arguments;\n  }\n\n  logger.debug('Precalculated Chromedriver capabilities: ' +\n    JSON.stringify(caps.chromeOptions, null, 2));\n\n  const protectedCapNames = [];\n  for (const [opt, val] of _.toPairs(opts.chromeOptions)) {\n    if (_.isUndefined(caps.chromeOptions[opt])) {\n      caps.chromeOptions[opt] = val;\n    } else {\n      protectedCapNames.push(opt);\n    }\n  }\n  if (!_.isEmpty(protectedCapNames)) {\n    logger.info('The following Chromedriver capabilities cannot be overridden ' +\n      'by the provided chromeOptions:');\n    for (const optName of protectedCapNames) {\n      logger.info(`  ${optName} (${JSON.stringify(opts.chromeOptions[optName])})`);\n    }\n  }\n\n  return caps;\n};\n\nexport default helpers;\nexport { helpers, NATIVE_WIN, WEBVIEW_WIN, WEBVIEW_BASE, CHROMIUM_WIN, KNOWN_CHROME_PACKAGE_NAMES };\n"],"mappings":"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"}