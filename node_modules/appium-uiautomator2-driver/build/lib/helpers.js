"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _path = _interopRequireDefault(require("path"));
var _support = require("appium/support");
let helpers = {};
helpers.ensureInternetPermissionForApp = async function (adb, app) {
  let has = await adb.hasInternetPermissionFromManifest(app);
  if (has) {
    return;
  }
  let msg = 'Your apk does not have INTERNET permissions. Uiautomator2 needs ' + 'the internet permission to proceed. Please check if you have ' + '<uses-permission android:name="android.**permission.INTERNET"/>' + 'in your AndroidManifest.xml';
  throw new Error(msg);
};
helpers.isWriteable = async function isWriteable(filePath) {
  try {
    await _support.fs.access(filePath, _support.fs.W_OK);
    if (_support.system.isWindows()) {
      await _support.fs.close(await _support.fs.open(filePath, 'r+'));
    }
    return true;
  } catch (ign) {
    return false;
  }
};
helpers.signApp = async function (adb, appPath) {
  if (!(await this.isWriteable(appPath))) {
    throw new Error(`The application at '${appPath}' is not writeable. ` + `Please grant write permissions to this file or to its parent folder '${_path.default.dirname(appPath)}' ` + `for the Appium process, so it could sign the application`);
  }
  await adb.sign(appPath);
};
var _default = helpers;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcGF0aCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3N1cHBvcnQiLCJoZWxwZXJzIiwiZW5zdXJlSW50ZXJuZXRQZXJtaXNzaW9uRm9yQXBwIiwiYWRiIiwiYXBwIiwiaGFzIiwiaGFzSW50ZXJuZXRQZXJtaXNzaW9uRnJvbU1hbmlmZXN0IiwibXNnIiwiRXJyb3IiLCJpc1dyaXRlYWJsZSIsImZpbGVQYXRoIiwiZnMiLCJhY2Nlc3MiLCJXX09LIiwic3lzdGVtIiwiaXNXaW5kb3dzIiwiY2xvc2UiLCJvcGVuIiwiaWduIiwic2lnbkFwcCIsImFwcFBhdGgiLCJwYXRoIiwiZGlybmFtZSIsInNpZ24iLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vbGliL2hlbHBlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBmcywgc3lzdGVtIH0gZnJvbSAnYXBwaXVtL3N1cHBvcnQnO1xuXG5cbmxldCBoZWxwZXJzID0ge307XG5cbmhlbHBlcnMuZW5zdXJlSW50ZXJuZXRQZXJtaXNzaW9uRm9yQXBwID0gYXN5bmMgZnVuY3Rpb24gKGFkYiwgYXBwKSB7XG4gIGxldCBoYXMgPSBhd2FpdCBhZGIuaGFzSW50ZXJuZXRQZXJtaXNzaW9uRnJvbU1hbmlmZXN0KGFwcCk7XG4gIGlmIChoYXMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IG1zZyA9ICdZb3VyIGFwayBkb2VzIG5vdCBoYXZlIElOVEVSTkVUIHBlcm1pc3Npb25zLiBVaWF1dG9tYXRvcjIgbmVlZHMgJyArXG4gICAgICAgICAgICAndGhlIGludGVybmV0IHBlcm1pc3Npb24gdG8gcHJvY2VlZC4gUGxlYXNlIGNoZWNrIGlmIHlvdSBoYXZlICcgK1xuICAgICAgICAgICAgJzx1c2VzLXBlcm1pc3Npb24gYW5kcm9pZDpuYW1lPVwiYW5kcm9pZC4qKnBlcm1pc3Npb24uSU5URVJORVRcIi8+JyArXG4gICAgICAgICAgICAnaW4geW91ciBBbmRyb2lkTWFuaWZlc3QueG1sJztcbiAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG59O1xuXG5oZWxwZXJzLmlzV3JpdGVhYmxlID0gYXN5bmMgZnVuY3Rpb24gaXNXcml0ZWFibGUgKGZpbGVQYXRoKSB7XG4gIHRyeSB7XG4gICAgYXdhaXQgZnMuYWNjZXNzKGZpbGVQYXRoLCBmcy5XX09LKTtcbiAgICBpZiAoc3lzdGVtLmlzV2luZG93cygpKSB7XG4gICAgICAvLyBPbiBvcGVyYXRpbmcgc3lzdGVtcywgd2hlcmUgYWNjZXNzLWNvbnRyb2wgcG9saWNpZXMgbWF5XG4gICAgICAvLyBsaW1pdCBhY2Nlc3MgdG8gdGhlIGZpbGUgc3lzdGVtLCBgZnMuYWNjZXNzYCBkb2VzIG5vdCB3b3JrXG4gICAgICAvLyBhcyBleHBlY3RlZC4gU2VlIGh0dHBzOi8vZ3JvdXBzLmdvb2dsZS5jb20vZm9ydW0vIyF0b3BpYy9ub2RlanMvcW1adEl3RFJTWW9cbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHNcbiAgICAgIGF3YWl0IGZzLmNsb3NlKGF3YWl0IGZzLm9wZW4oZmlsZVBhdGgsICdyKycpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGlnbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuaGVscGVycy5zaWduQXBwID0gYXN5bmMgZnVuY3Rpb24gKGFkYiwgYXBwUGF0aCkge1xuICBpZiAoIWF3YWl0IHRoaXMuaXNXcml0ZWFibGUoYXBwUGF0aCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBhcHBsaWNhdGlvbiBhdCAnJHthcHBQYXRofScgaXMgbm90IHdyaXRlYWJsZS4gYCArXG4gICAgICBgUGxlYXNlIGdyYW50IHdyaXRlIHBlcm1pc3Npb25zIHRvIHRoaXMgZmlsZSBvciB0byBpdHMgcGFyZW50IGZvbGRlciAnJHtwYXRoLmRpcm5hbWUoYXBwUGF0aCl9JyBgICtcbiAgICAgIGBmb3IgdGhlIEFwcGl1bSBwcm9jZXNzLCBzbyBpdCBjb3VsZCBzaWduIHRoZSBhcHBsaWNhdGlvbmApO1xuICB9XG4gIGF3YWl0IGFkYi5zaWduKGFwcFBhdGgpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaGVscGVycztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxLQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxRQUFBLEdBQUFELE9BQUE7QUFHQSxJQUFJRSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBRWhCQSxPQUFPLENBQUNDLDhCQUE4QixHQUFHLGdCQUFnQkMsR0FBRyxFQUFFQyxHQUFHLEVBQUU7RUFDakUsSUFBSUMsR0FBRyxHQUFHLE1BQU1GLEdBQUcsQ0FBQ0csaUNBQWlDLENBQUNGLEdBQUcsQ0FBQztFQUMxRCxJQUFJQyxHQUFHLEVBQUU7SUFDUDtFQUNGO0VBQ0EsSUFBSUUsR0FBRyxHQUFHLGtFQUFrRSxHQUNsRSwrREFBK0QsR0FDL0QsaUVBQWlFLEdBQ2pFLDZCQUE2QjtFQUN2QyxNQUFNLElBQUlDLEtBQUssQ0FBQ0QsR0FBRyxDQUFDO0FBQ3RCLENBQUM7QUFFRE4sT0FBTyxDQUFDUSxXQUFXLEdBQUcsZUFBZUEsV0FBV0EsQ0FBRUMsUUFBUSxFQUFFO0VBQzFELElBQUk7SUFDRixNQUFNQyxXQUFFLENBQUNDLE1BQU0sQ0FBQ0YsUUFBUSxFQUFFQyxXQUFFLENBQUNFLElBQUksQ0FBQztJQUNsQyxJQUFJQyxlQUFNLENBQUNDLFNBQVMsQ0FBQyxDQUFDLEVBQUU7TUFLdEIsTUFBTUosV0FBRSxDQUFDSyxLQUFLLENBQUMsTUFBTUwsV0FBRSxDQUFDTSxJQUFJLENBQUNQLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvQztJQUNBLE9BQU8sSUFBSTtFQUNiLENBQUMsQ0FBQyxPQUFPUSxHQUFHLEVBQUU7SUFDWixPQUFPLEtBQUs7RUFDZDtBQUNGLENBQUM7QUFFRGpCLE9BQU8sQ0FBQ2tCLE9BQU8sR0FBRyxnQkFBZ0JoQixHQUFHLEVBQUVpQixPQUFPLEVBQUU7RUFDOUMsSUFBSSxFQUFDLE1BQU0sSUFBSSxDQUFDWCxXQUFXLENBQUNXLE9BQU8sQ0FBQyxHQUFFO0lBQ3BDLE1BQU0sSUFBSVosS0FBSyxDQUFFLHVCQUFzQlksT0FBUSxzQkFBcUIsR0FDakUsd0VBQXVFQyxhQUFJLENBQUNDLE9BQU8sQ0FBQ0YsT0FBTyxDQUFFLElBQUcsR0FDaEcsMERBQXlELENBQUM7RUFDL0Q7RUFDQSxNQUFNakIsR0FBRyxDQUFDb0IsSUFBSSxDQUFDSCxPQUFPLENBQUM7QUFDekIsQ0FBQztBQUFDLElBQUFJLFFBQUEsR0FFYXZCLE9BQU87QUFBQXdCLE9BQUEsQ0FBQUMsT0FBQSxHQUFBRixRQUFBIn0=