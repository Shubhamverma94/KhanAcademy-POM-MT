{"version":3,"file":"gestures.js","names":["_support","require","_lodash","_interopRequireDefault","_driver","commands","toOrigin","element","util","wrapElement","unwrapElement","undefined","toPoint","x","y","_","isFinite","toRect","left","top","width","height","some","v","mobileClickGesture","opts","elementId","uiautomator2","jwproxy","command","origin","offset","mobileLongClickGesture","duration","mobileDoubleClickGesture","mobileDragGesture","startX","startY","endX","endY","speed","start","end","mobileFlingGesture","direction","area","mobilePinchCloseGesture","percent","mobilePinchOpenGesture","mobileSwipeGesture","mobileScrollGesture","mobileScrollBackTo","elementToId","errors","InvalidArgumentError","mobileScroll","strategy","selector","maxSwipes","params","_default","exports","default"],"sources":["../../../lib/commands/gestures.js"],"sourcesContent":["import { util } from 'appium/support';\nimport _ from 'lodash';\nimport { errors } from 'appium/driver';\n\nconst commands = {};\n\n\nfunction toOrigin (element) {\n  return element ? util.wrapElement(util.unwrapElement(element)) : undefined;\n}\n\nfunction toPoint (x, y) {\n  return _.isFinite(x) && _.isFinite(y) ? {x, y} : undefined;\n}\n\nfunction toRect (left, top, width, height) {\n  return [left, top, width, height].some((v) => !_.isFinite(v))\n    ? undefined\n    : {left, top, width, height};\n}\n\n/**\n * @typedef {Object} ClickOptions\n * @property {?string} elementId - The id of the element to be clicked.\n * If the element is missing then both click offset coordinates must be provided.\n * If both the element id and offset are provided then the coordinates\n * are parsed as relative offsets from the top left corner of the element.\n * @property {?number} x - The x coordinate to click on\n * @property {?number} y - The y coordinate to click on\n */\n\n/**\n * Performs a simple click/tap gesture\n *\n * @param {?ClickOptions} opts\n * @throws {Error} if provided options are not valid\n */\ncommands.mobileClickGesture = async function mobileClickGesture (opts = {}) {\n  const {\n    elementId,\n    x, y,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/click', 'POST', {\n    origin: toOrigin(elementId),\n    offset: toPoint(x, y),\n  });\n};\n\n/**\n * @typedef {Object} LongClickOptions\n * @property {?string} elementId - The id of the element to be clicked.\n * If the element is missing then both click offset coordinates must be provided.\n * If both the element id and offset are provided then the coordinates\n * are parsed as relative offsets from the top left corner of the element.\n * @property {?number} x - The x coordinate to click on\n * @property {?number} y - The y coordinate to click on\n * @property {?number} duration [500] - Click duration in milliseconds.\n * The value must not be negative\n */\n\n/**\n * Performs a click that lasts for the given duration\n *\n * @param {?LongClickOptions} opts\n * @throws {Error} if provided options are not valid\n */\ncommands.mobileLongClickGesture = async function mobileLongClickGesture (opts = {}) {\n  const {\n    elementId,\n    x, y,\n    duration,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/long_click', 'POST', {\n    origin: toOrigin(elementId),\n    offset: toPoint(x, y),\n    duration,\n  });\n};\n\n/**\n * @typedef {Object} DoubleClickOptions\n * @property {?string} elementId - The id of the element to be double clicked.\n * If the element is missing then both click offset coordinates must be provided.\n * If both the element id and offset are provided then the coordinates\n * are parsed as relative offsets from the top left corner of the element.\n * @property {?number} x - The x coordinate to double click on\n * @property {?number} y - The y coordinate to double click on\n */\n\n/**\n * Performs a click that lasts for the given duration\n *\n * @param {?DoubleClickOptions} opts\n * @throws {Error} if provided options are not valid\n */\ncommands.mobileDoubleClickGesture = async function mobileDoubleClickGesture (opts = {}) {\n  const {\n    elementId,\n    x, y,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/double_click', 'POST', {\n    origin: toOrigin(elementId),\n    offset: toPoint(x, y),\n  });\n};\n\n/**\n * @typedef {Object} DragOptions\n * @property {?string} elementId - The id of the element to be dragged.\n * If the element id is missing then the start coordinates must be provided.\n * If both the element id and the start coordinates are provided then these\n * coordinates are considered as offsets from the top left element corner.\n * @property {?number} startX - The x coordinate where the dragging starts\n * @property {?number} startY - The y coordinate where the dragging starts\n * @property {!number} endX - The x coordinate where the dragging ends\n * @property {!number} endY - The y coordinate where the dragging ends\n * @property {?number} speed [2500 * displayDensity] - The speed at which to perform\n * this gesture in pixels per second. The value must not be negative\n */\n\n/**\n * Drags this object to the specified location.\n *\n * @param {?DragOptions} opts\n * @throws {Error} if provided options are not valid\n */\ncommands.mobileDragGesture = async function mobileDragGesture (opts = {}) {\n  const {\n    elementId,\n    startX, startY,\n    endX, endY,\n    speed,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/drag', 'POST', {\n    origin: toOrigin(elementId),\n    start: toPoint(startX, startY),\n    end: toPoint(endX, endY),\n    speed,\n  });\n};\n\n/**\n * @typedef {Object} FlingOptions\n * @property {?string} elementId - The id of the element to be flinged.\n * If the element id is missing then fling bounding area must be provided.\n * If both the element id and the fling bounding area are provided then this\n * area is effectively ignored.\n * @property {?number} left - The left coordinate of the fling bounding area\n * @property {?number} top - The top coordinate of the fling bounding area\n * @property {?number} width - The width of the fling bounding area\n * @property {?number} height - The height of the fling bounding area\n * @property {!string} direction - Direction of the fling.\n * Acceptable values are: `up`, `down`, `left` and `right` (case insensitive)\n * @property {?number} speed [7500 * displayDensity] - The speed at which to perform this\n * gesture in pixels per second. The value must be greater than the minimum fling\n * velocity for the given view (50 by default)\n */\n\n/**\n * Drags to the specified location.\n *\n * @param {?FlingOptions} opts\n * @throws {Error} if provided options are not valid\n * @returns {boolean} True if the object can still scroll in the given direction.\n */\ncommands.mobileFlingGesture = async function mobileFlingGesture (opts = {}) {\n  const {\n    elementId,\n    left, top, width, height,\n    direction,\n    speed,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/fling', 'POST', {\n    origin: toOrigin(elementId),\n    area: toRect(left, top, width, height),\n    direction,\n    speed,\n  });\n};\n\n/**\n * @typedef {Object} PinchOptions\n * @property {?string} elementId - The id of the element to be pinched.\n * If the element id is missing then pinch bounding area must be provided.\n * If both the element id and the pinch bounding area are provided then the\n * area is effectively ignored.\n * @property {?number} left - The left coordinate of the pinch bounding area\n * @property {?number} top - The top coordinate of the pinch bounding area\n * @property {?number} width - The width of the pinch bounding area\n * @property {?number} height - The height of the pinch bounding area\n * @property {!number} percent - The size of the pinch as a percentage of the pinch area size.\n * Valid values must be float numbers in range 0..1, where 1.0 is 100%\n * @property {?number} speed [2500 * displayDensity] - The speed at which to perform\n * this gesture in pixels per second. The value must not be negative\n */\n\n/**\n * Performs a pinch close gesture.\n *\n * @param {?PinchOptions} opts\n * @throws {Error} if provided options are not valid\n */\ncommands.mobilePinchCloseGesture = async function mobilePinchCloseGesture (opts = {}) {\n  const {\n    elementId,\n    left, top, width, height,\n    percent,\n    speed,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/pinch_close', 'POST', {\n    origin: toOrigin(elementId),\n    area: toRect(left, top, width, height),\n    percent,\n    speed,\n  });\n};\n\n/**\n * Performs a pinch open gesture.\n *\n * @param {?PinchOptions} opts\n * @throws {Error} if provided options are not valid\n */\ncommands.mobilePinchOpenGesture = async function mobilePinchOpenGesture (opts = {}) {\n  const {\n    elementId,\n    left, top, width, height,\n    percent,\n    speed,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/pinch_open', 'POST', {\n    origin: toOrigin(elementId),\n    area: toRect(left, top, width, height),\n    percent,\n    speed,\n  });\n};\n\n/**\n * @typedef {Object} SwipeOptions\n * @property {?string} elementId - The id of the element to be swiped.\n * If the element id is missing then swipe bounding area must be provided.\n * If both the element id and the swipe bounding area are provided then the\n * area is effectively ignored.\n * @property {?number} left - The left coordinate of the swipe bounding area\n * @property {?number} top - The top coordinate of the swipe bounding area\n * @property {?number} width - The width of the swipe bounding area\n * @property {?number} height - The height of the swipe bounding area\n * @property {!string} direction - Direction of the swipe.\n * Acceptable values are: `up`, `down`, `left` and `right` (case insensitive)\n * @property {!number} percent - The size of the swipe as a percentage of the swipe area size.\n * Valid values must be float numbers in range 0..1, where 1.0 is 100%\n * @property {?number} speed [5000 * displayDensity] - The speed at which to perform this\n * gesture in pixels per second. The value must not be negative\n */\n\n/**\n * Performs a swipe gesture.\n *\n * @param {?SwipeOptions} opts\n * @throws {Error} if provided options are not valid\n */\ncommands.mobileSwipeGesture = async function mobileSwipeGesture (opts = {}) {\n  const {\n    elementId,\n    left, top, width, height,\n    direction,\n    percent,\n    speed,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/swipe', 'POST', {\n    origin: toOrigin(elementId),\n    area: toRect(left, top, width, height),\n    direction,\n    percent,\n    speed,\n  });\n};\n\n/**\n * @typedef {Object} ScrollOptions\n * @property {?string} elementId - The id of the element to be scrolled.\n * If the element id is missing then scroll bounding area must be provided.\n * If both the element id and the scroll bounding area are provided then this\n * area is effectively ignored.\n * @property {?number} left - The left coordinate of the scroll bounding area\n * @property {?number} top - The top coordinate of the scroll bounding area\n * @property {?number} width - The width of the scroll bounding area\n * @property {?number} height - The height of the scroll bounding area\n * @property {!string} direction - Direction of the scroll.\n * Acceptable values are: `up`, `down`, `left` and `right` (case insensitive)\n * @property {!number} percent - The size of the scroll as a percentage of the scrolling area size.\n * Valid values must be float numbers greater than zero, where 1.0 is 100%\n * @property {?number} speed [5000 * displayDensity] - The speed at which to perform this gesture\n * in pixels per second. The value must not be negative\n */\n\n/**\n * Performs a scroll gesture.\n *\n * @param {?ScrollOptions} opts\n * @throws {Error} if provided options are not valid\n * @returns {boolean} True if the object can still scroll in the given direction.\n */\ncommands.mobileScrollGesture = async function mobileScrollGesture (opts = {}) {\n  const {\n    elementId,\n    left, top, width, height,\n    direction,\n    percent,\n    speed,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/scroll', 'POST', {\n    origin: toOrigin(elementId),\n    area: toRect(left, top, width, height),\n    direction,\n    percent,\n    speed,\n  });\n};\n\n/**\n * @typedef {Object} ScrollElementToElementOpts\n * @property {string} elementId The identifier of the scrollable element,\n * which is going to be scrolled. It is required this element\n * is a valid scrollable container and it was located by `-android uiautomator`\n * strategy.\n * @property {string} elementToId The identifier of the item, which belongs\n * to the scrollable element above, and which should become visible after\n * the scrolling operation is finished. It is required this element\n * was located by `-android uiautomator` strategy.\n */\n\n/**\n * Scrolls the given scrollable element `elementId` until `elementToId`\n * becomes visible. This function returns immediately if the `elementToId`\n * is already visible in the view port. Otherwise it would scroll\n * to the very beginning of the scrollable control and tries to reach the destination element\n * by scrolling its parent to the end step by step. The scroll direction (vertical or horizontal)\n * is detected automatically.\n *\n * @param {ScrollElementToElementOpts} opts\n * @throws {Error} if the scrolling operation cannot be performed\n */\ncommands.mobileScrollBackTo = async function (opts = {}) {\n  const {elementId, elementToId} = opts;\n  if (!elementId || !elementToId) {\n    throw new errors.InvalidArgumentError(`Both elementId and elementToId arguments must be provided`);\n  }\n  return await this.uiautomator2.jwproxy.command(\n    `/appium/element/${util.unwrapElement(elementId)}/scroll_to/${util.unwrapElement(elementToId)}`, 'POST', {});\n};\n\n/**\n * @typedef {Object} ScrollOpts\n * @property {?string} elementId The identifier of an element. It is required this element\n * is a valid scrollable container and it was located by `-android uiautomator`\n * strategy. If this property is not provided then the first currently available scrollable view\n * is selected for the interaction.\n * @property {!string} strategy The following strategies are supported:\n * - `accessibility id` (UiSelector().description)\n * - `class name` (UiSelector().className)\n * - `-android uiautomator` (UiSelector)\n * @property {!string} selector The corresponding lookup value for the given\n * strategy.\n * @property {?number} maxSwipes The maximum number of swipes to perform\n * on the target scrollable view in order to reach the destination element.\n * In case this value is unset then it would be retrieved from the scrollable\n * element itself (vua `getMaxSearchSwipes()` property).\n */\n\n/**\n * Scrolls the given scrollable element until the element identified\n * by `strategy` and `selector` becomes visible. This function returns immediately if the\n * destination element is already visible in the view port. Otherwise it would scroll\n * to the very beginning of the scrollable control and tries to reach the destination element\n * by scrolling its parent to the end step by step. The scroll direction (vertical or horizontal)\n * is detected automatically.\n *\n * @param {ScrollOpts} opts\n * @throws {Error} if the scrolling operation cannot be performed\n */\ncommands.mobileScroll = async function (opts = {}) {\n  const {\n    element, elementId, // `element` is deprecated, use `elementId` instead\n    strategy, selector, maxSwipes\n  } = opts;\n  if (!strategy || !selector) {\n    throw new errors.InvalidArgumentError(`Both strategy and selector arguments must be provided`);\n  }\n  return await this.uiautomator2.jwproxy.command('/touch/scroll', 'POST', {\n    origin: toOrigin(elementId || element),\n    params: {strategy, selector, maxSwipes},\n  });\n};\n\nexport default commands;\n"],"mappings":"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"}