{"version":3,"file":"app-strings.js","names":["_lodash","_interopRequireDefault","require","_support","commands","getStrings","language","adb","getDeviceLanguage","log","info","preprocessStringsMap","mapping","result","key","value","_","toPairs","isString","JSON","stringify","apkStrings","opts","app","appPackage","errorAndThrow","tmpRoot","tempDir","openDir","pullApk","err","message","fs","exists","extractStringsFromApk","rimraf","mobileGetAppStrings","_default","exports","default"],"sources":["../../../lib/commands/app-strings.js"],"sourcesContent":["import _ from 'lodash';\nimport { fs, tempDir } from 'appium/support';\n\nconst commands = {};\n\ncommands.getStrings = async function (language) {\n  if (!language) {\n    language = await this.adb.getDeviceLanguage();\n    this.log.info(`No language specified, returning strings for: ${language}`);\n  }\n\n  // Clients require the resulting mapping to have both keys\n  // and values of type string\n  const preprocessStringsMap = function (mapping) {\n    const result = {};\n    for (const [key, value] of _.toPairs(mapping)) {\n      result[key] = _.isString(value) ? value : JSON.stringify(value);\n    }\n    return result;\n  };\n\n  if (this.apkStrings[language]) {\n    // Return cached strings\n    return preprocessStringsMap(this.apkStrings[language]);\n  }\n\n  if (!this.opts.app && !this.opts.appPackage) {\n    this.log.errorAndThrow(\"One of 'app' or 'appPackage' capabilities should must be specified\");\n  }\n\n  let app = this.opts.app;\n  const tmpRoot = await tempDir.openDir();\n  try {\n    if (!app) {\n      try {\n        app = await this.adb.pullApk(this.opts.appPackage, tmpRoot);\n      } catch (err) {\n        this.log.errorAndThrow(`Failed to pull an apk from '${this.opts.appPackage}'. Original error: ${err.message}`);\n      }\n    }\n\n    if (!await fs.exists(app)) {\n      this.log.errorAndThrow(`The app at '${app}' does not exist`);\n    }\n\n    try {\n      const {apkStrings} = await this.adb.extractStringsFromApk(app, language, tmpRoot);\n      this.apkStrings[language] = apkStrings;\n      return preprocessStringsMap(apkStrings);\n    } catch (err) {\n      this.log.errorAndThrow(`Cannot extract strings from '${app}'. Original error: ${err.message}`);\n    }\n  } finally {\n    await fs.rimraf(tmpRoot);\n  }\n};\n\n/**\n * @typedef {Object} GetAppStringsOptions\n * @property {string?} language The language abbreviation to fetch app strings mapping for. If no\n * language is provided then strings for the default language on the device under test\n * would be returned. Examples: en, fr\n */\n\n/**\n * Retrives app strings from its resources for the given language\n * or the default device language.\n *\n * @param {GetAppStringsOptions} opts\n * @returns {Promise<object>} App strings map\n */\ncommands.mobileGetAppStrings = async function mobileGetAppStrings (opts = {}) {\n  return await this.getStrings(opts.language);\n};\n\nexport default commands;"],"mappings":"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"}