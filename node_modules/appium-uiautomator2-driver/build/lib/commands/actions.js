"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;
require("source-map-support/register");
let commands = {},
  helpers = {},
  extensions = {};
exports.helpers = helpers;
exports.commands = commands;
commands.pressKeyCode = async function (keycode, metastate = null, flags = null) {
  return await this.uiautomator2.jwproxy.command('/appium/device/press_keycode', 'POST', {
    keycode,
    metastate,
    flags
  });
};
commands.longPressKeyCode = async function (keycode, metastate = null, flags = null) {
  return await this.uiautomator2.jwproxy.command('/appium/device/long_press_keycode', 'POST', {
    keycode,
    metastate,
    flags
  });
};
commands.doSwipe = async function (swipeOpts) {
  return await this.uiautomator2.jwproxy.command(`/touch/perform`, 'POST', swipeOpts);
};
commands.doDrag = async function (dragOpts) {
  return await this.uiautomator2.jwproxy.command(`/touch/drag`, 'POST', dragOpts);
};
commands.getOrientation = async function () {
  return await this.uiautomator2.jwproxy.command(`/orientation`, 'GET', {});
};
commands.setOrientation = async function (orientation) {
  orientation = orientation.toUpperCase();
  return await this.uiautomator2.jwproxy.command(`/orientation`, 'POST', {
    orientation
  });
};
commands.mobilePressKey = async function mobilePressKey(opts = {}) {
  const {
    keycode,
    metastate,
    flags,
    isLongPress = false
  } = opts;
  return await this.uiautomator2.jwproxy.command(`/appium/device/${isLongPress ? 'long_' : ''}press_keycode`, 'POST', {
    keycode,
    metastate,
    flags
  });
};
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiZXhwb3J0cyIsInByZXNzS2V5Q29kZSIsImtleWNvZGUiLCJtZXRhc3RhdGUiLCJmbGFncyIsInVpYXV0b21hdG9yMiIsImp3cHJveHkiLCJjb21tYW5kIiwibG9uZ1ByZXNzS2V5Q29kZSIsImRvU3dpcGUiLCJzd2lwZU9wdHMiLCJkb0RyYWciLCJkcmFnT3B0cyIsImdldE9yaWVudGF0aW9uIiwic2V0T3JpZW50YXRpb24iLCJvcmllbnRhdGlvbiIsInRvVXBwZXJDYXNlIiwibW9iaWxlUHJlc3NLZXkiLCJvcHRzIiwiaXNMb25nUHJlc3MiLCJPYmplY3QiLCJhc3NpZ24iLCJfZGVmYXVsdCIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY29tbWFuZHMvYWN0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5jb21tYW5kcy5wcmVzc0tleUNvZGUgPSBhc3luYyBmdW5jdGlvbiAoa2V5Y29kZSwgbWV0YXN0YXRlID0gbnVsbCwgZmxhZ3MgPSBudWxsKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnVpYXV0b21hdG9yMi5qd3Byb3h5LmNvbW1hbmQoJy9hcHBpdW0vZGV2aWNlL3ByZXNzX2tleWNvZGUnLCAnUE9TVCcsIHtcbiAgICBrZXljb2RlLFxuICAgIG1ldGFzdGF0ZSxcbiAgICBmbGFncyxcbiAgfSk7XG59O1xuXG5jb21tYW5kcy5sb25nUHJlc3NLZXlDb2RlID0gYXN5bmMgZnVuY3Rpb24gKGtleWNvZGUsIG1ldGFzdGF0ZSA9IG51bGwsIGZsYWdzID0gbnVsbCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy51aWF1dG9tYXRvcjIuandwcm94eS5jb21tYW5kKCcvYXBwaXVtL2RldmljZS9sb25nX3ByZXNzX2tleWNvZGUnLCAnUE9TVCcsIHtcbiAgICBrZXljb2RlLFxuICAgIG1ldGFzdGF0ZSxcbiAgICBmbGFnc1xuICB9KTtcbn07XG5cbmNvbW1hbmRzLmRvU3dpcGUgPSBhc3luYyBmdW5jdGlvbiAoc3dpcGVPcHRzKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnVpYXV0b21hdG9yMi5qd3Byb3h5LmNvbW1hbmQoYC90b3VjaC9wZXJmb3JtYCwgJ1BPU1QnLCBzd2lwZU9wdHMpO1xufTtcblxuY29tbWFuZHMuZG9EcmFnID0gYXN5bmMgZnVuY3Rpb24gKGRyYWdPcHRzKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnVpYXV0b21hdG9yMi5qd3Byb3h5LmNvbW1hbmQoYC90b3VjaC9kcmFnYCwgJ1BPU1QnLCBkcmFnT3B0cyk7XG59O1xuXG5jb21tYW5kcy5nZXRPcmllbnRhdGlvbiA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMudWlhdXRvbWF0b3IyLmp3cHJveHkuY29tbWFuZChgL29yaWVudGF0aW9uYCwgJ0dFVCcsIHt9KTtcbn07XG5cbmNvbW1hbmRzLnNldE9yaWVudGF0aW9uID0gYXN5bmMgZnVuY3Rpb24gKG9yaWVudGF0aW9uKSB7XG4gIG9yaWVudGF0aW9uID0gb3JpZW50YXRpb24udG9VcHBlckNhc2UoKTtcbiAgcmV0dXJuIGF3YWl0IHRoaXMudWlhdXRvbWF0b3IyLmp3cHJveHkuY29tbWFuZChgL29yaWVudGF0aW9uYCwgJ1BPU1QnLCB7b3JpZW50YXRpb259KTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUHJlc3NLZXlPcHRpb25zXG4gKiBAcHJvcGVydHkge251bWJlcn0ga2V5Y29kZSBBIHZhbGlkIEFuZHJvaWQga2V5IGNvZGUuIFNlZSBodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9yZWZlcmVuY2UvYW5kcm9pZC92aWV3L0tleUV2ZW50XG4gKiBmb3IgdGhlIGxpc3Qgb2YgYXZhaWxhYmxlIGtleSBjb2Rlc1xuICogQHByb3BlcnR5IHtudW1iZXI/fSBtZXRhc3RhdGUgQW4gaW50ZWdlciBpbiB3aGljaCBlYWNoIGJpdCBzZXQgdG8gMSByZXByZXNlbnRzIGEgcHJlc3NlZCBtZXRhIGtleS4gU2VlXG4gKiBodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9yZWZlcmVuY2UvYW5kcm9pZC92aWV3L0tleUV2ZW50IGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcHJvcGVydHkge3N0cmluZz99IGZsYWdzIEZsYWdzIGZvciB0aGUgcGFydGljdWxhciBrZXkgZXZlbnQuIFNlZVxuICogaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9LZXlFdmVudCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHByb3BlcnR5IHtib29sZWFufSBpc0xvbmdQcmVzcyBbZmFsc2VdIFdoZXRoZXIgdG8gZW11bGF0ZSBsb25nIGtleSBwcmVzc1xuKi9cblxuLyoqXG4gKiBFbXVsYXRlcyBzaW5nbGUga2V5IHByZXNzIG9mIHRoZSBrZXkgd2l0aCB0aGUgZ2l2ZW4gY29kZS5cbiAqXG4gKiBAcGFyYW0ge1ByZXNzS2V5T3B0aW9uc30gb3B0c1xuICovXG5jb21tYW5kcy5tb2JpbGVQcmVzc0tleSA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZVByZXNzS2V5KG9wdHMgPSB7fSkge1xuICBjb25zdCB7XG4gICAga2V5Y29kZSxcbiAgICBtZXRhc3RhdGUsXG4gICAgZmxhZ3MsXG4gICAgaXNMb25nUHJlc3MgPSBmYWxzZSxcbiAgfSA9IG9wdHM7XG5cbiAgcmV0dXJuIGF3YWl0IHRoaXMudWlhdXRvbWF0b3IyLmp3cHJveHkuY29tbWFuZChcbiAgICBgL2FwcGl1bS9kZXZpY2UvJHtpc0xvbmdQcmVzcyA/ICdsb25nXycgOiAnJ31wcmVzc19rZXljb2RlYCxcbiAgICAnUE9TVCcsIHtcbiAgICAgIGtleWNvZGUsXG4gICAgICBtZXRhc3RhdGUsXG4gICAgICBmbGFnc1xuICAgIH1cbiAgKTtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMp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