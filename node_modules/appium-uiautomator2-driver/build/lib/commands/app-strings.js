"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("appium/support");
const commands = {};
commands.getStrings = async function (language) {
  if (!language) {
    language = await this.adb.getDeviceLanguage();
    this.log.info(`No language specified, returning strings for: ${language}`);
  }
  const preprocessStringsMap = function (mapping) {
    const result = {};
    for (const [key, value] of _lodash.default.toPairs(mapping)) {
      result[key] = _lodash.default.isString(value) ? value : JSON.stringify(value);
    }
    return result;
  };
  if (this.apkStrings[language]) {
    return preprocessStringsMap(this.apkStrings[language]);
  }
  if (!this.opts.app && !this.opts.appPackage) {
    this.log.errorAndThrow("One of 'app' or 'appPackage' capabilities should must be specified");
  }
  let app = this.opts.app;
  const tmpRoot = await _support.tempDir.openDir();
  try {
    if (!app) {
      try {
        app = await this.adb.pullApk(this.opts.appPackage, tmpRoot);
      } catch (err) {
        this.log.errorAndThrow(`Failed to pull an apk from '${this.opts.appPackage}'. Original error: ${err.message}`);
      }
    }
    if (!(await _support.fs.exists(app))) {
      this.log.errorAndThrow(`The app at '${app}' does not exist`);
    }
    try {
      const {
        apkStrings
      } = await this.adb.extractStringsFromApk(app, language, tmpRoot);
      this.apkStrings[language] = apkStrings;
      return preprocessStringsMap(apkStrings);
    } catch (err) {
      this.log.errorAndThrow(`Cannot extract strings from '${app}'. Original error: ${err.message}`);
    }
  } finally {
    await _support.fs.rimraf(tmpRoot);
  }
};
commands.mobileGetAppStrings = async function mobileGetAppStrings(opts = {}) {
  return await this.getStrings(opts.language);
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfc3VwcG9ydCIsImNvbW1hbmRzIiwiZ2V0U3RyaW5ncyIsImxhbmd1YWdlIiwiYWRiIiwiZ2V0RGV2aWNlTGFuZ3VhZ2UiLCJsb2ciLCJpbmZvIiwicHJlcHJvY2Vzc1N0cmluZ3NNYXAiLCJtYXBwaW5nIiwicmVzdWx0Iiwia2V5IiwidmFsdWUiLCJfIiwidG9QYWlycyIsImlzU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsImFwa1N0cmluZ3MiLCJvcHRzIiwiYXBwIiwiYXBwUGFja2FnZSIsImVycm9yQW5kVGhyb3ciLCJ0bXBSb290IiwidGVtcERpciIsIm9wZW5EaXIiLCJwdWxsQXBrIiwiZXJyIiwibWVzc2FnZSIsImZzIiwiZXhpc3RzIiwiZXh0cmFjdFN0cmluZ3NGcm9tQXBrIiwicmltcmFmIiwibW9iaWxlR2V0QXBwU3RyaW5ncyIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY29tbWFuZHMvYXBwLXN0cmluZ3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGZzLCB0ZW1wRGlyIH0gZnJvbSAnYXBwaXVtL3N1cHBvcnQnO1xuXG5jb25zdCBjb21tYW5kcyA9IHt9O1xuXG5jb21tYW5kcy5nZXRTdHJpbmdzID0gYXN5bmMgZnVuY3Rpb24gKGxhbmd1YWdlKSB7XG4gIGlmICghbGFuZ3VhZ2UpIHtcbiAgICBsYW5ndWFnZSA9IGF3YWl0IHRoaXMuYWRiLmdldERldmljZUxhbmd1YWdlKCk7XG4gICAgdGhpcy5sb2cuaW5mbyhgTm8gbGFuZ3VhZ2Ugc3BlY2lmaWVkLCByZXR1cm5pbmcgc3RyaW5ncyBmb3I6ICR7bGFuZ3VhZ2V9YCk7XG4gIH1cblxuICAvLyBDbGllbnRzIHJlcXVpcmUgdGhlIHJlc3VsdGluZyBtYXBwaW5nIHRvIGhhdmUgYm90aCBrZXlzXG4gIC8vIGFuZCB2YWx1ZXMgb2YgdHlwZSBzdHJpbmdcbiAgY29uc3QgcHJlcHJvY2Vzc1N0cmluZ3NNYXAgPSBmdW5jdGlvbiAobWFwcGluZykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIF8udG9QYWlycyhtYXBwaW5nKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBfLmlzU3RyaW5nKHZhbHVlKSA/IHZhbHVlIDogSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGlmICh0aGlzLmFwa1N0cmluZ3NbbGFuZ3VhZ2VdKSB7XG4gICAgLy8gUmV0dXJuIGNhY2hlZCBzdHJpbmdzXG4gICAgcmV0dXJuIHByZXByb2Nlc3NTdHJpbmdzTWFwKHRoaXMuYXBrU3RyaW5nc1tsYW5ndWFnZV0pO1xuICB9XG5cbiAgaWYgKCF0aGlzLm9wdHMuYXBwICYmICF0aGlzLm9wdHMuYXBwUGFja2FnZSkge1xuICAgIHRoaXMubG9nLmVycm9yQW5kVGhyb3coXCJPbmUgb2YgJ2FwcCcgb3IgJ2FwcFBhY2thZ2UnIGNhcGFiaWxpdGllcyBzaG91bGQgbXVzdCBiZSBzcGVjaWZpZWRcIik7XG4gIH1cblxuICBsZXQgYXBwID0gdGhpcy5vcHRzLmFwcDtcbiAgY29uc3QgdG1wUm9vdCA9IGF3YWl0IHRlbXBEaXIub3BlbkRpcigpO1xuICB0cnkge1xuICAgIGlmICghYXBwKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhcHAgPSBhd2FpdCB0aGlzLmFkYi5wdWxsQXBrKHRoaXMub3B0cy5hcHBQYWNrYWdlLCB0bXBSb290KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aGlzLmxvZy5lcnJvckFuZFRocm93KGBGYWlsZWQgdG8gcHVsbCBhbiBhcGsgZnJvbSAnJHt0aGlzLm9wdHMuYXBwUGFja2FnZX0nLiBPcmlnaW5hbCBlcnJvcjogJHtlcnIubWVzc2FnZX1gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhhcHApKSB7XG4gICAgICB0aGlzLmxvZy5lcnJvckFuZFRocm93KGBUaGUgYXBwIGF0ICcke2FwcH0nIGRvZXMgbm90IGV4aXN0YCk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHthcGtTdHJpbmdzfSA9IGF3YWl0IHRoaXMuYWRiLmV4dHJhY3RTdHJpbmdzRnJvbUFwayhhcHAsIGxhbmd1YWdlLCB0bXBSb290KTtcbiAgICAgIHRoaXMuYXBrU3RyaW5nc1tsYW5ndWFnZV0gPSBhcGtTdHJpbmdzO1xuICAgICAgcmV0dXJuIHByZXByb2Nlc3NTdHJpbmdzTWFwKGFwa1N0cmluZ3MpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhpcy5sb2cuZXJyb3JBbmRUaHJvdyhgQ2Fubm90IGV4dHJhY3Qgc3RyaW5ncyBmcm9tICcke2FwcH0nLiBPcmlnaW5hbCBlcnJvcjogJHtlcnIubWVzc2FnZX1gKTtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgZnMucmltcmFmKHRtcFJvb3QpO1xuICB9XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEdldEFwcFN0cmluZ3NPcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZz99IGxhbmd1YWdlIFRoZSBsYW5ndWFnZSBhYmJyZXZpYXRpb24gdG8gZmV0Y2ggYXBwIHN0cmluZ3MgbWFwcGluZyBmb3IuIElmIG5vXG4gKiBsYW5ndWFnZSBpcyBwcm92aWRlZCB0aGVuIHN0cmluZ3MgZm9yIHRoZSBkZWZhdWx0IGxhbmd1YWdlIG9uIHRoZSBkZXZpY2UgdW5kZXIgdGVzdFxuICogd291bGQgYmUgcmV0dXJuZWQuIEV4YW1wbGVzOiBlbiwgZnJcbiAqL1xuXG4vKipcbiAqIFJldHJpdmVzIGFwcCBzdHJpbmdzIGZyb20gaXRzIHJlc291cmNlcyBmb3IgdGhlIGdpdmVuIGxhbmd1YWdlXG4gKiBvciB0aGUgZGVmYXVsdCBkZXZpY2UgbGFuZ3VhZ2UuXG4gKlxuICogQHBhcmFtIHtHZXRBcHBTdHJpbmdzT3B0aW9uc30gb3B0c1xuICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gQXBwIHN0cmluZ3MgbWFwXG4gKi9cbmNvbW1hbmRzLm1vYmlsZUdldEFwcFN0cmluZ3MgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVHZXRBcHBTdHJpbmdzIChvcHRzID0ge30pIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0U3RyaW5ncyhvcHRzLmxhbmd1YWdlKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxRQUFBLEdBQUFELE9BQUE7QUFFQSxNQUFNRSxRQUFRLEdBQUcsQ0FBQyxDQUFDO0FBRW5CQSxRQUFRLENBQUNDLFVBQVUsR0FBRyxnQkFBZ0JDLFFBQVEsRUFBRTtFQUM5QyxJQUFJLENBQUNBLFFBQVEsRUFBRTtJQUNiQSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUNDLEdBQUcsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQztJQUM3QyxJQUFJLENBQUNDLEdBQUcsQ0FBQ0MsSUFBSSxDQUFFLGlEQUFnREosUUFBUyxFQUFDLENBQUM7RUFDNUU7RUFJQSxNQUFNSyxvQkFBb0IsR0FBRyxTQUFBQSxDQUFVQyxPQUFPLEVBQUU7SUFDOUMsTUFBTUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNqQixLQUFLLE1BQU0sQ0FBQ0MsR0FBRyxFQUFFQyxLQUFLLENBQUMsSUFBSUMsZUFBQyxDQUFDQyxPQUFPLENBQUNMLE9BQU8sQ0FBQyxFQUFFO01BQzdDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQyxHQUFHRSxlQUFDLENBQUNFLFFBQVEsQ0FBQ0gsS0FBSyxDQUFDLEdBQUdBLEtBQUssR0FBR0ksSUFBSSxDQUFDQyxTQUFTLENBQUNMLEtBQUssQ0FBQztJQUNqRTtJQUNBLE9BQU9GLE1BQU07RUFDZixDQUFDO0VBRUQsSUFBSSxJQUFJLENBQUNRLFVBQVUsQ0FBQ2YsUUFBUSxDQUFDLEVBQUU7SUFFN0IsT0FBT0ssb0JBQW9CLENBQUMsSUFBSSxDQUFDVSxVQUFVLENBQUNmLFFBQVEsQ0FBQyxDQUFDO0VBQ3hEO0VBRUEsSUFBSSxDQUFDLElBQUksQ0FBQ2dCLElBQUksQ0FBQ0MsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDRCxJQUFJLENBQUNFLFVBQVUsRUFBRTtJQUMzQyxJQUFJLENBQUNmLEdBQUcsQ0FBQ2dCLGFBQWEsQ0FBQyxvRUFBb0UsQ0FBQztFQUM5RjtFQUVBLElBQUlGLEdBQUcsR0FBRyxJQUFJLENBQUNELElBQUksQ0FBQ0MsR0FBRztFQUN2QixNQUFNRyxPQUFPLEdBQUcsTUFBTUMsZ0JBQU8sQ0FBQ0MsT0FBTyxDQUFDLENBQUM7RUFDdkMsSUFBSTtJQUNGLElBQUksQ0FBQ0wsR0FBRyxFQUFFO01BQ1IsSUFBSTtRQUNGQSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUNoQixHQUFHLENBQUNzQixPQUFPLENBQUMsSUFBSSxDQUFDUCxJQUFJLENBQUNFLFVBQVUsRUFBRUUsT0FBTyxDQUFDO01BQzdELENBQUMsQ0FBQyxPQUFPSSxHQUFHLEVBQUU7UUFDWixJQUFJLENBQUNyQixHQUFHLENBQUNnQixhQUFhLENBQUUsK0JBQThCLElBQUksQ0FBQ0gsSUFBSSxDQUFDRSxVQUFXLHNCQUFxQk0sR0FBRyxDQUFDQyxPQUFRLEVBQUMsQ0FBQztNQUNoSDtJQUNGO0lBRUEsSUFBSSxFQUFDLE1BQU1DLFdBQUUsQ0FBQ0MsTUFBTSxDQUFDVixHQUFHLENBQUMsR0FBRTtNQUN6QixJQUFJLENBQUNkLEdBQUcsQ0FBQ2dCLGFBQWEsQ0FBRSxlQUFjRixHQUFJLGtCQUFpQixDQUFDO0lBQzlEO0lBRUEsSUFBSTtNQUNGLE1BQU07UUFBQ0Y7TUFBVSxDQUFDLEdBQUcsTUFBTSxJQUFJLENBQUNkLEdBQUcsQ0FBQzJCLHFCQUFxQixDQUFDWCxHQUFHLEVBQUVqQixRQUFRLEVBQUVvQixPQUFPLENBQUM7TUFDakYsSUFBSSxDQUFDTCxVQUFVLENBQUNmLFFBQVEsQ0FBQyxHQUFHZSxVQUFVO01BQ3RDLE9BQU9WLG9CQUFvQixDQUFDVSxVQUFVLENBQUM7SUFDekMsQ0FBQyxDQUFDLE9BQU9TLEdBQUcsRUFBRTtNQUNaLElBQUksQ0FBQ3JCLEdBQUcsQ0FBQ2dCLGFBQWEsQ0FBRSxnQ0FBK0JGLEdBQUksc0JBQXFCTyxHQUFHLENBQUNDLE9BQVEsRUFBQyxDQUFDO0lBQ2hHO0VBQ0YsQ0FBQyxTQUFTO0lBQ1IsTUFBTUMsV0FBRSxDQUFDRyxNQUFNLENBQUNULE9BQU8sQ0FBQztFQUMxQjtBQUNGLENBQUM7QUFnQkR0QixRQUFRLENBQUNnQyxtQkFBbUIsR0FBRyxlQUFlQSxtQkFBbUJBLENBQUVkLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRTtFQUM1RSxPQUFPLE1BQU0sSUFBSSxDQUFDakIsVUFBVSxDQUFDaUIsSUFBSSxDQUFDaEIsUUFBUSxDQUFDO0FBQzdDLENBQUM7QUFBQyxJQUFBK0IsUUFBQSxHQUVhakMsUUFBUTtBQUFBa0MsT0FBQSxDQUFBQyxPQUFBLEdBQUFGLFFBQUEifQ==