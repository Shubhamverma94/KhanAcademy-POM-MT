/**
 * Handles updating/adding the `nav` property of `mkdocs.yml`, based on the output of `typedoc`;
 * specifically, the command documentation generated by `@appium/typedoc-plugin-appium`.
 *
 * @module
 */
import { MkDocsYmlNav } from '../model';
/**
 * Because the `nav` property of `mkdocs.yml` is both a recursive type and a kind of awful one, it's
 * easier to work with it if we rewrite the data into a flat array of objects. We keep a `keypath`
 * prop which represents the deep/nested location within the `nav` object.
 *
 * @privateRemarks This function is not recursive; instead it loops over a queue of items to process
 * data, and we append to that queue while processing if needed.
 * @param nav Contents of the `nav` prop of `mkdocs.yml`
 * @returns A list of objects, each with a `keypath` property and a `fileOrUrl` property (and maybe
 * a `name` property)
 */
export declare function parseNav(nav: MkDocsYmlNav): ParsedNavData[];
/**
 * Update the `nav` property of `mkdocs.yml` with a list of "command" files generated by TypeDoc via
 * `@appium/typedoc-plugin-appium`.
 *
 * To be clear, this function **modifies the MkDocs config file (`mkdocs.yml`) in place**; it is
 * typically under version control, so if this function makes any changes, you'll want to commit them.
 * @param opts - Options
 * @todo implement `dryRun` option
 */
export declare function updateNav({ cwd, mkdocsYml: mkDocsYmlPath, typedocJson: typeDocJsonPath, all, }?: UpdateNavOpts): Promise<void>;
/**
 * Options for {@linkcode updateNav}
 */
export interface UpdateNavOpts {
    /**
     * Current working directory
     */
    cwd?: string;
    /**
     * Path to `mkdocs.yml`
     */
    mkdocsYml?: string;
    /**
     * Path to `package.json`
     */
    packageJson?: string;
    /**
     * Path to `typedoc.json`
     */
    typedocJson?: string;
    /**
     * If `true`, do not write any files
     * @remarks Not yet implemented
     */
    dryRun?: boolean;
    /**
     * If `true`, add _all_ reference documentation to the navigation config (not just commands)
     */
    all?: boolean;
}
/**
 * Used internally by {@linkcode updatedNav}
 * @see {@linkcode parseNav}
 */
interface ParsedNavData {
    /**
     * Keypath within `nav` for some file or URL
     */
    keypath: string;
    /**
     * A filepath (usually) or a URL.
     * This is considered the "index" of the data, and should be unique within its parent. If it's not
     * unique, then it will probably end up that way after updating...
     */
    fileOrUrl: string;
    /**
     * If this file or url has a proper name, this would be it. Most don't.
     */
    name?: string;
}
export {};
//# sourceMappingURL=nav.d.ts.map