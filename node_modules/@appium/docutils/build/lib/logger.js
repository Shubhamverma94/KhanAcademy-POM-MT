"use strict";
/**
 * It's a logger.
 *
 * Since this is a CLI app only, it doesn't necessarily make sense to consume `@appium/support`'s logger.
 *
 * @module
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initLogger = exports.getLogger = exports.isLogLevelString = void 0;
const figures_1 = __importDefault(require("figures"));
const log_symbols_1 = __importDefault(require("log-symbols"));
const chalk_1 = __importDefault(require("chalk"));
const consola_1 = __importStar(require("consola"));
const constants_1 = require("./constants");
const lodash_1 = __importDefault(require("lodash"));
/**
 * This is a reporter for `consola` which uses some extra/custom icons and colors.
 *
 * @privateRemarks
 * I did not like that the default `FancyReport` logs errors in _green_ without any sort of icon.
 * Both `log-symbols` and `consola` consume `chalk`, so we do too. `consola` also depends on `figures`.
 */
class DocutilsReporter extends consola_1.FancyReporter {
    /**
     * Type guard to check if a log type has a color
     * @param type A log type
     */
    static hasTypeColor(type) {
        return type in DocutilsReporter.TYPE_COLOR_MAP;
    }
    /**
     * Type guard to check if a log level has a color
     * @param level A log level
     */
    static hasLevelColor(level) {
        return level in DocutilsReporter.LEVEL_COLORS;
    }
    /**
     * Type guard to check if a log type has an icon
     * @param type A log type
     */
    static hasTypeIcon(type) {
        return type in DocutilsReporter.TYPE_ICONS;
    }
    /**
     * Prefixes the logging output with colors and symbols, depending on contents of `logObj`.
     * @param logObj Consola's log object
     * @param isBadge {@linkcode FancyReporter} uses this; I think it depends on the terminal width
     * @returns
     */
    formatType(logObj, isBadge) {
        const { TYPE_COLOR_MAP, LEVEL_COLORS, TYPE_ICONS, hasTypeColor, hasLevelColor, hasTypeIcon, DEFAULT_COLOR, } = DocutilsReporter;
        let typeColor;
        if (hasTypeColor(logObj.type)) {
            typeColor = TYPE_COLOR_MAP[logObj.type];
        }
        else if (hasLevelColor(logObj.level)) {
            typeColor = LEVEL_COLORS[logObj.level];
        }
        else {
            typeColor = ((this.options.secondaryColor ?? DEFAULT_COLOR));
        }
        if (isBadge) {
            return chalk_1.default[('bg' + lodash_1.default.capitalize(typeColor))].black(` ${lodash_1.default.toUpper(logObj.type)}`);
        }
        const type = hasTypeIcon(logObj.type) ? TYPE_ICONS[logObj.type] : logObj.type;
        return type ? chalk_1.default[typeColor](type) : '';
    }
}
/**
 * Mapping of log types (the name of the logging method called) to chalk fg colors
 */
DocutilsReporter.TYPE_COLOR_MAP = {
    info: 'cyan',
    success: 'green',
    error: 'red',
    warn: 'yellow',
};
/**
 * Mapping of log levels to chalk fg colors
 */
DocutilsReporter.LEVEL_COLORS = {
    0: 'red',
    1: 'yellow',
    2: 'white',
    3: 'green',
};
/**
 * Mapping of log types to icons/symbols
 */
DocutilsReporter.TYPE_ICONS = {
    info: log_symbols_1.default.info,
    success: log_symbols_1.default.success,
    error: log_symbols_1.default.error,
    warn: log_symbols_1.default.warning,
    debug: (0, figures_1.default)('›'),
    trace: (0, figures_1.default)('›'),
};
/**
 * Default color to use if we can't find a color for the log type or level
 */
DocutilsReporter.DEFAULT_COLOR = 'grey';
/**
 * The global log level
 *
 * "Global" inasmuch as any logger created from the root logger will use this level.
 */
let globalLevel = constants_1.LogLevelMap[constants_1.DEFAULT_LOG_LEVEL];
/**
 * Type guard to see if a string is a recognized log level
 * @param level any value
 */
function isLogLevelString(level) {
    return level in constants_1.LogLevelMap;
}
exports.isLogLevelString = isLogLevelString;
/**
 * The logger from which all loggers are created.  This one uses a unique tag and our custom reporter.
 */
const rootLogger = consola_1.default.create({
    defaults: { tag: 'docutils' },
    reporters: [new DocutilsReporter()],
    level: globalLevel,
});
// this prevents logging before `initLogger` is called
rootLogger.pause();
/**
 * A map of tags to loggers
 */
const loggers = new Map();
function getLogger(tag, parent = rootLogger) {
    if (loggers.has(tag)) {
        const logger = loggers.get(tag)?.deref();
        if (logger) {
            return logger;
        }
    }
    const logger = parent.withTag(tag);
    logger.level = globalLevel;
    loggers.set(tag, new WeakRef(logger));
    return logger;
}
exports.getLogger = getLogger;
/**
 * Initialize the logging system.
 *
 * This should only be called once. The loglevel cannot be changed once it is set.
 *
 * @remarks Child loggers seem to inherit the "paused" state of the parent, so when this is called, we must resume all of them.
 */
exports.initLogger = lodash_1.default.once((level) => {
    globalLevel = isLogLevelString(level) ? constants_1.LogLevelMap[level] : level;
    rootLogger.level = globalLevel;
    rootLogger.resume();
    for (const ref of loggers.values()) {
        const logger = ref.deref();
        if (logger) {
            logger.level = globalLevel;
            logger.resume();
        }
    }
});
//# sourceMappingURL=logger.js.map