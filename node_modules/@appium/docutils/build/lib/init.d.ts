/**
 * Scaffolding functions for CLI `init` command
 *
 * @module
 */
import { Simplify } from 'type-fest';
import { ScaffoldTaskOptions } from './scaffold';
import { TsConfigJson } from './model';
/**
 * Function which scaffolds a `tsconfig.json` file
 */
export declare const initTsConfigJson: import("./scaffold").ScaffoldTask<InitTsConfigOptions, TsConfigJson>;
/**
 * Function which scaffolds a `typedoc.json` file
 */
export declare const initTypeDocJson: import("./scaffold").ScaffoldTask<ScaffoldTaskOptions, import("type-fest/source/jsonify").JsonifyObject<{
    $schema?: string | undefined;
    includes?: string | undefined;
    options?: string | undefined;
    tsconfig?: string | undefined;
    entryPoints?: string[] | undefined;
    entryPointStrategy?: "Resolve" | "resolve" | "Expand" | "Packages" | "expand" | "packages" | undefined;
    exclude?: string[] | undefined;
    externalPattern?: string[] | undefined;
    excludeExternals?: boolean | undefined;
    excludeNotDocumented?: boolean | undefined;
    excludeNotDocumentedKinds?: ("Reference" | "Project" | "Module" | "Namespace" | "Enum" | "EnumMember" | "Variable" | "Function" | "Class" | "Interface" | "Constructor" | "Property" | "Method" | "CallSignature" | "IndexSignature" | "ConstructorSignature" | "Parameter" | "TypeLiteral" | "TypeParameter" | "Accessor" | "GetSignature" | "SetSignature" | "ObjectLiteral" | "TypeAlias" | "All" | "ClassOrInterface" | "VariableOrProperty" | "FunctionOrMethod" | "ClassMember" | "SomeSignature" | "SomeModule" | "SomeType" | "SomeValue" | "SomeMember" | "SomeExport" | "ExportContainer" | "Inheritable" | "ContainsCallSignatures" | "SignatureContainer")[] | undefined;
    excludeInternal?: boolean | undefined;
    excludePrivate?: boolean | undefined;
    excludeProtected?: boolean | undefined;
    externalSymbolLinkMappings?: Record<string, Record<string, string>> | undefined;
    media?: string | undefined;
    out?: string | undefined;
    json?: string | undefined;
    pretty?: boolean | undefined;
    emit?: "docs" | "both" | "none" | undefined;
    theme?: string | undefined;
    lightHighlightTheme?: import("shiki").Theme | undefined;
    darkHighlightTheme?: import("shiki").Theme | undefined;
    customCss?: string | undefined;
    name?: string | undefined;
    includeVersion?: boolean | undefined;
    disableSources?: boolean | undefined;
    basePath?: string | undefined;
    excludeTags?: `@${string}`[] | undefined;
    readme?: string | undefined;
    cname?: string | undefined;
    sourceLinkTemplate?: string | undefined;
    gitRevision?: string | undefined;
    gitRemote?: string | undefined;
    htmlLang?: string | undefined;
    githubPages?: boolean | undefined;
    gaID?: string | undefined;
    hideGenerator?: boolean | undefined;
    searchInComments?: boolean | undefined;
    cleanOutputDir?: boolean | undefined;
    titleLink?: string | undefined;
    navigationLinks?: Record<string, string> | undefined;
    sidebarLinks?: Record<string, string> | undefined;
    commentStyle?: "All" | "JSDoc" | "jsdoc" | "Block" | "Line" | "all" | "block" | "line" | undefined;
    blockTags?: `@${string}`[] | undefined;
    inlineTags?: `@${string}`[] | undefined;
    modifierTags?: `@${string}`[] | undefined;
    categorizeByGroup?: boolean | undefined;
    defaultCategory?: string | undefined;
    categoryOrder?: string[] | undefined;
    sort?: ("source-order" | "alphabetical" | "enum-value-ascending" | "enum-value-descending" | "static-first" | "instance-first" | "visibility" | "required-first" | "kind")[] | undefined;
    kindSortOrder?: ("Reference" | "Project" | "Module" | "Namespace" | "Enum" | "EnumMember" | "Variable" | "Function" | "Class" | "Interface" | "Constructor" | "Property" | "Method" | "CallSignature" | "IndexSignature" | "ConstructorSignature" | "Parameter" | "TypeLiteral" | "TypeParameter" | "Accessor" | "GetSignature" | "SetSignature" | "ObjectLiteral" | "TypeAlias" | "All" | "ClassOrInterface" | "VariableOrProperty" | "FunctionOrMethod" | "ClassMember" | "SomeSignature" | "SomeModule" | "SomeType" | "SomeValue" | "SomeMember" | "SomeExport" | "ExportContainer" | "Inheritable" | "ContainsCallSignatures" | "SignatureContainer")[] | undefined;
    visibilityFilters?: {
        [tag: `@${string}`]: boolean;
        protected?: boolean | undefined;
        private?: boolean | undefined;
        inherited?: boolean | undefined;
        external?: boolean | undefined;
    } | undefined;
    searchCategoryBoosts?: Record<string, number> | undefined;
    searchGroupBoosts?: Record<string, number> | undefined;
    watch?: boolean | undefined;
    preserveWatchOutput?: boolean | undefined;
    skipErrorChecking?: boolean | undefined;
    help?: boolean | undefined;
    version?: boolean | undefined;
    showConfig?: boolean | undefined;
    plugin?: string[] | undefined;
    logLevel?: import("typedoc").LogLevel | "Verbose" | "Info" | "Warn" | "Error" | undefined;
    treatWarningsAsErrors?: boolean | undefined;
    treatValidationWarningsAsErrors?: boolean | undefined;
    intentionallyNotExported?: string[] | undefined;
    validation?: boolean | Partial<import("typedoc").ValidationOptions> | undefined;
    requiredToBeDocumented?: ("Reference" | "Project" | "Module" | "Namespace" | "Enum" | "EnumMember" | "Variable" | "Function" | "Class" | "Interface" | "Constructor" | "Property" | "Method" | "CallSignature" | "IndexSignature" | "ConstructorSignature" | "Parameter" | "TypeLiteral" | "TypeParameter" | "Accessor" | "GetSignature" | "SetSignature" | "ObjectLiteral" | "TypeAlias" | "All" | "ClassOrInterface" | "VariableOrProperty" | "FunctionOrMethod" | "ClassMember" | "SomeSignature" | "SomeModule" | "SomeType" | "SomeValue" | "SomeMember" | "SomeExport" | "ExportContainer" | "Inheritable" | "ContainsCallSignatures" | "SignatureContainer")[] | undefined;
    extends?: string | undefined;
}>>;
/**
 * Function which scaffolds an `mkdocs.yml` file
 */
export declare const initMkDocs: import("./scaffold").ScaffoldTask<InitMkDocsOptions, import("type-fest/source/jsonify").JsonifyObject<{
    theme?: import("./model").MkDocsYmlTheme | undefined;
    watch?: string[] | undefined;
    copyright?: string | undefined;
    dev_addr?: string | undefined;
    docs_dir?: string | undefined;
    extra_css?: string[] | undefined;
    extra_javascript?: string[] | undefined;
    extra_templates?: string[] | undefined;
    extra?: Record<string, import("type-fest").JsonValue> | undefined;
    hooks?: string[] | undefined;
    INHERIT?: string | undefined;
    markdown_extensions?: (string | Record<string, import("type-fest").JsonValue>)[] | undefined;
    nav?: import("./model").MkDocsYmlNav | undefined;
    plugins?: (string | Record<string, import("type-fest").JsonValue>)[] | undefined;
    repo_name?: string | undefined;
    repo_url?: string | undefined;
    site_dir?: string | undefined;
    site_name?: string | undefined;
    site_description?: string | undefined;
    strict?: boolean | undefined;
    use_directory_urls?: boolean | undefined;
}>>;
/**
 * Installs Python dependencies
 * @param opts Options
 */
export declare function initPython({ pythonPath, dryRun, upgrade, }?: InitPythonOptions): Promise<void>;
/**
 * Options for {@linkcode initMkDocs}
 */
export interface InitMkDocsOptions extends ScaffoldTaskOptions {
    copyright?: string;
    repoName?: string;
    repoUrl?: string;
    siteDescription?: string;
    siteName?: string;
}
/**
 * Main handler for `init` command.
 *
 * This runs tasks in serial; it _could_ run in parallel, but it has deleterious effects upon
 * console output which would need mitigation.
 */
export declare function init({ typescript, typedoc, python, tsconfigJson: tsconfigJsonPath, packageJson: packageJsonPath, overwrite, include, mkdocs, mkdocsYml: mkdocsYmlPath, siteName, repoName, repoUrl, copyright, dryRun, cwd, pythonPath, upgrade, typedocJson: typeDocJsonPath, }?: InitOptions): Promise<void>;
export type InitTypeDocOptions = ScaffoldTaskOptions;
export interface InitTsConfigOptions extends ScaffoldTaskOptions {
    /**
     * List of source files (globs supported); typically `src` or `lib`
     */
    include?: string[];
}
export interface InitPythonOptions extends ScaffoldTaskOptions {
    /**
     * Path to `python` (v3.x) executable
     */
    pythonPath?: string;
    /**
     * If true, upgrade only
     */
    upgrade?: boolean;
}
/**
 * Options for `init` command handler
 *
 * The props of the various "path" options are rewritten as `dest` for the scaffold tasks functions.
 */
export type InitOptions = Simplify<Omit<InitPythonOptions & InitTsConfigOptions & InitTypeDocOptions & InitMkDocsOptions, 'dest'> & {
    /**
     * If `true` will initialize a `tsconfig.json` file
     */
    typescript?: boolean;
    /**
     * If `true` will initialize a `typedoc.json` file
     */
    typedoc?: boolean;
    /**
     * If `true` will install Python deps
     */
    python?: boolean;
    /**
     * If `true` will initialize a `mkdocs.yml` file
     */
    mkdocs?: boolean;
    /**
     * Path to new or existing `typedoc.json` file
     */
    typedocJson?: string;
    /**
     * Path to new or existing `tsconfig.json` file
     */
    tsconfigJson?: string;
    /**
     * Path to existing `package.json` file
     */
    packageJson?: string;
    /**
     * Path to new or existing `mkdocs.yml` file
     */
    mkdocsYml?: string;
    /**
     * If `true`, upgrade only
     */
    upgrade?: boolean;
}>;
//# sourceMappingURL=init.d.ts.map