"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protocol_1 = require("../../protocol");
const mixin_1 = require("./mixin");
const FindCommands = {
    async findElement(strategy, selector) {
        return await this.findElOrElsWithProcessing(strategy, selector, false);
    },
    async findElements(strategy, selector) {
        return await this.findElOrElsWithProcessing(strategy, selector, true);
    },
    async findElementFromElement(strategy, selector, elementId) {
        return await this.findElOrElsWithProcessing(strategy, selector, false, elementId);
    },
    async findElementsFromElement(strategy, selector, elementId) {
        return await this.findElOrElsWithProcessing(strategy, selector, true, elementId);
    },
    /**
     * Returns an object which adheres to the way the JSON Wire Protocol represents elements:
     *
     * Override this for your own driver!
     */
    async findElOrEls(strategy, selector, mult, context) {
        throw new protocol_1.errors.NotImplementedError('Not implemented yet for find.');
    },
    async getPageSource() {
        throw new protocol_1.errors.NotImplementedError('Not implemented yet for find.');
    },
    async findElOrElsWithProcessing(strategy, selector, mult, context) {
        this.validateLocatorStrategy(strategy);
        try {
            return await this.findElOrEls(strategy, selector, mult, context);
        }
        catch (err) {
            if (this.opts.printPageSourceOnFindFailure) {
                const src = await this.getPageSource();
                this.log.debug(`Error finding element${mult ? 's' : ''}: ${err.message}`);
                this.log.debug(`Page source requested through 'printPageSourceOnFindFailure':`);
                this.log.debug(src);
            }
            // still want the error to occur
            throw err;
        }
    },
};
(0, mixin_1.mixin)(FindCommands);
//# sourceMappingURL=find.js.map