import { Context } from 'typedoc';
import { AppiumPluginLogger } from '../logger';
import { ModuleCommands, ProjectCommands } from '../model';
import { BaseConverter } from './base-converter';
import { KnownMethods } from './types';
/**
 * Name of the static `newMethodMap` property in a Driver or Plugin
 */
export declare const NAME_NEW_METHOD_MAP = "newMethodMap";
/**
 * Name of the static `executeMethodMap` property in a Driver
 */
export declare const NAME_EXECUTE_METHOD_MAP = "executeMethodMap";
/**
 * Name of the field in a method map's parameters prop which contains required parameters
 */
export declare const NAME_REQUIRED = "required";
/**
 * Name of the field in a method map's parameters prop which contains optional parameters
 */
export declare const NAME_OPTIONAL = "optional";
/**
 * Name of the field in an _execute_ method map which contains parameters
 */
export declare const NAME_PARAMS = "params";
/**
 * Name of the command in a method map
 */
export declare const NAME_COMMAND = "command";
/**
 * Name of the field in a _regular_ method map which contains parameters
 */
export declare const NAME_PAYLOAD_PARAMS = "payloadParams";
export declare const NAME_BASE_PLUGIN = "BasePlugin";
/**
 * Converts declarations to information about Appium commands
 */
export declare class ExternalConverter extends BaseConverter<ProjectCommands> {
    #private;
    protected readonly builtinMethods: KnownMethods;
    protected readonly builtinCommands?: ModuleCommands | undefined;
    /**
     * Creates a child logger for this instance
     * @param ctx Typedoc Context
     * @param log Logger
     */
    constructor(ctx: Context, log: AppiumPluginLogger, builtinMethods: KnownMethods, builtinCommands?: ModuleCommands | undefined);
    /**
     * Converts declarations into command information
     *
     * @returns Command info for entire project
     */
    convert(): ProjectCommands;
}
//# sourceMappingURL=external.d.ts.map