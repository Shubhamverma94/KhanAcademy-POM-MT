"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommentSource = exports.ExampleLanguage = void 0;
/**
 * Languages which can be used in example code blocks
 *
 * The key is the identifier used in a fenced code block, and the value is the "display" value
 */
exports.ExampleLanguage = Object.freeze({
    ts: 'TypeScript',
    typescript: 'TypeScript',
    js: 'JavaScript',
    javascript: 'JavaScript',
    py: 'Python',
    python: 'Python',
    rb: 'Ruby',
    ruby: 'Ruby',
    java: 'Java',
});
/**
 * Mainly for debugging purposes, these tell us (roughly) where a comment came from.
 * In the case of {@linkcode CommentSource.Multiple}, the comment was derived
 * from multiple sources.
 */
var CommentSource;
(function (CommentSource) {
    /**
     * This is a comment directly on the `DeclarationReference` itself.
     *
     * It's unclear to me why sometimes comments are attached to the method proper or its signature;
     * might have something to do with `ReferenceType`.
     */
    CommentSource["Method"] = "method";
    /**
     * A comment attached to the method's call signature.
     */
    CommentSource["MethodSignature"] = "method-signature";
    /**
     * A comment from "elsewhere", which is usually a method map or exec method map.
     */
    CommentSource["OtherComment"] = "other-comment";
    /**
     * A comment coming out of the `@appium/types` package; specifically a method in `ExternalDriver`
     */
    CommentSource["OtherMethod"] = "builtin-interface";
    /**
     * A comment _built_ from any of the above sources from one or more `DeclarationReference`
     * objects.  For example, the summary (description) of an implementation of `doubleClick()` and
     * the `@example` block tag from the `ExternalDriver` interface.
     */
    CommentSource["Multiple"] = "multiple";
    /**
     * A comment found in a `ParameterReflection`
     */
    CommentSource["Parameter"] = "parameter";
    /**
     * A comment found in a `ParameterReflection` within a builtin method (e.g., from `ExternalDriver`)
     */
    CommentSource["BuiltinParameter"] = "builtin-parameter";
    /**
     * A comment found in a `SignatureReflection` within a builtin method
     */
    CommentSource["BuiltinSignature"] = "builtin-signature";
    /**
     * A comment found in a `SignatureReflection`, but not via a method.
     */
    CommentSource["Signature"] = "signature";
})(CommentSource = exports.CommentSource || (exports.CommentSource = {}));
//# sourceMappingURL=types.js.map